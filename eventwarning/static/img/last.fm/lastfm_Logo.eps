%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: lastfm_Logo.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Sebastian Pietsch
%%CreationDate: 7/25/08
%%BoundingBox: 0 0 709 688
%%HiResBoundingBox: 0 0 708.7666 687.1016
%%CropBox: 0 0 708.7666 687.1016
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">lastfm medium def</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2008-07-25T17:10:36+01:00</xap:CreateDate>
         <xap:ModifyDate>2008-07-25T17:10:36+01:00</xap:ModifyDate>
         <xap:MetadataDate>2008-07-25T17:10:36+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>248</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA+AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4P8A4l8x/wDV1vP+kiX/&#xA;AJqxS+2f+cdLm5ufyb8vT3MrzzP9c5yyMXY0vpwKs1T0GKHpGKuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KvEv8AnIL89rnyV6fl7y6Y28xXMfq3Fy4DraRNslEOxlfqA2wG5BqMVfJm&#xA;t+ZvMWu3LXOs6lc6hO5qXuJXk+4MSAB2AxSg7S9vbKYT2dxJbTL9mWF2jYfJlIOKvu78iLnXLv8A&#xA;KzRL7W72a/1C8SWZ7i5cyScGlcRAs25/dheuKGfYq7FXYq7FXYq7FXYq/MzFL7n/AOca/wDySvlz&#xA;/o9/6j58UPTMVdirsVdirsVdirsVdirsVdirsVdir5G/M7/nIj80tK8767oul6hDZWen3s1tb8La&#xA;GR+Eb8RyMyyVNB4Yq9N/5xf86+avNeja9deYdRl1GeC6hSFpeI4KYySFChQK0xV7ZirsVdirsVdi&#xA;r8+fzb1eXVvzN8zXsjFwdRuIYmNf7qBzDH1/yIxil7F/zij+Wnl3WbPU/NWtWUWoPbXIstPhuFWS&#xA;JHWNZZZDG1QWpKnEkbdt8UPoLV/y68h6vaNaaj5fsJ4W/wCXeNHX3R0Cuh91IxVN9I0mw0fSrPSt&#xA;Pi9GxsIY7a1iqW4xxKEUFmqSaDqdziqLxV2KuxV2KuxV2KuxV+ZmKX3P/wA41/8AklfLn/R7/wBR&#xA;8+KHpmKsY8+fmT5S8jaat75gvPSaWotbOIc7iYjqI46jp3YkKO5xV8/69/zmRrTzMugeX7aCEbJJ&#xA;fySTM3uUiMIX5cj88VpKE/5zC/MgODJpejsn7QWG6Un5E3LfqxSzLyl/zmFpVzPHb+adGewRjRr+&#xA;yczxrXu0LBXAH+SzH2xQ+gNI1jS9Z02DU9Kuo7ywul5wXMLBkYfMdwdiDuDscVRmKvHPzK/5ya8o&#xA;+Ur2XStMgbXdWgLJcLFII7eJ12KvNR+TA9Qqn3IOKvJ7n/nMP8wWlJttI0mKLsksdzI3/BLPGPwx&#xA;TSN0f/nMfzTHOv6Z0GxuYK/GLN5rdwPEeo1wMVp9A/lz+aHlbz/pT3uiSss0BC3lhOAs8LHpyUEg&#xA;qezA0PzqMUMM/OD/AJyC/wCVc+ZrbRP0B+lPrFkl79Y+t/V+POWWLhw9GatPRrWvfpir5E84eYP8&#xA;R+adV176v9V/Sd1LdfVufqen6rFuPPinKlevEYpZ9+TX56f8q207UbL9CfpX9ITJN6n1r6tw4KVp&#xA;T0Zq1r4jFXon/Q6P/fnf9zL/ALNcVp9KWdx9YtILjjx9aNZONa05KDSu3jihVxV2KvFfzU/5yR/w&#xA;F5ul8vf4d/SXpQxTfWvrnoV9Va04ehL0/wBbFXyJrmpfpXW9Q1P0/R+vXM1z6PLlw9aQvx5UWtOV&#xA;K0xS9S/J/wD5yC/5Vz5ZudE/QH6U+sXr3v1j639X484oouHD0Zq09Gta9+mKvYPy1/5yd/xt5107&#xA;yx/hr9H/AKQ9b/S/rvrcPRgkn/u/q8da+nT7Q64oR35tf85Ff8q+81LoH+H/ANJ1to7n6z9c+r/3&#xA;jMOPD0JenDryxVPPyt/OzTPOvljVtfv7RNBttHl4XXq3HrIIvTDiQyGOGncUp298VeYecf8AnMJo&#xA;ryS38oaRHPbxkqt/qJcCSm3JYIyjBfDk9fYYqkFh/wA5i+ekuFbUNF0u4tgRzjtxcQOR3o7yzgf8&#xA;Dimn0T+Wv5m+XfP+gtqmks0UkDCO+spaerBIRWjU6qf2W6H5ggKHmH5j/wDOV2jaJfzaX5Vsl1m5&#xA;t2KS6hK5W0DDYiMJ8UoB71UeFcVefx/85hfmMJQZdK0doq/EqxXSsR7Mbhh+GKXtf5Rfn75e/MCQ&#xA;6ZJAdK8wIhf6i7h0mVRVmgkovLj1KkVA8RU4ofD2KX3P/wA41/8AklfLn/R7/wBR8+KGeeYdcsdB&#xA;0K/1q/bjZ6dBJcTEdSsaluK+LN0A8cVfn15486az5y8yXevatIWmuGPpQ1JSCIE8IY69FQff16nF&#xA;L0j8m/8AnHPUfO9iuu6zcvpegOSLX01BuLniSGZOVVRARTkQa+HfFXrV9/ziF+XMtqyWeoanbXNP&#xA;gnaSGVa/5SeklfoIxQ+c/wA0fyq8wfl5rS2OpFbmyuQX0/UogRHMq9RQ14OtfiUn7xvillv/ADjj&#xA;+at15U82QaHfTn/DutSrDIjt8EFy/wAMcy12Wpor+2/7OKvpr87PNN35Y/LHXNVspDFfCJbe0kX7&#xA;SyXMiw8190Dlh8sUPgmCCe6uY4IgXnndUQV3Z3NBufEnFL638t/84jeRrbTIhr15eX+psgNw0Miw&#xA;wK5G4jUKWoOlWbfwGKHlP58/kNbfl/bWutaLdTXWi3U31eSO44mWCUqXT40ChlYK37IpTvXFKU/8&#xA;4+XXmXSPzM0W9srK6ksLyUWV+8cUrRGC5onJ2UEBUdkep228MVfQf5wf84+/8rG8zW2t/p/9F/V7&#xA;JLL6v9U+scuEssvPn60NK+tSlO3XFD5E84eX/wDDnmnVdB+sfWv0ZdS2v1nh6fqekxXlw5PxrTpy&#xA;OKXof5OfkJ/ysjRL7U/07+ivqdz9W9H6r9Y5fu1fly9aGn2qUpirP/8AoS7/AL/H/uW/9nWK2+lL&#xA;O3+r2kFvy5ejGsfKlK8VArTfwxQq4q7FXiv5qf8AON3+PfN0vmH/ABF+jfVhih+q/U/Xp6S0rz9e&#xA;Lr/q4q+RNc039Fa3qGmep631G5mtvW48efoyFOXGrUrxrSuKXqX5P/8AOPv/ACsbyzc63+n/ANF/&#xA;V717L6v9U+scuEUUvPn60NK+tSlO3XFXsH5a/wDOMX+CfOuneZ/8S/pD9H+t/on1L0efrQSQf3n1&#xA;iSlPUr9k9MUPJ/8AnLT/AMmon/bNtv8AicuKQ810LVfMc+l3Hk/SQ8qa9d2rPbRfbllh9RYo/dWa&#xA;UEg91BxV7v5f/wCcOJ5dNSXXvMH1bUJFqba0hEqRkjoZHZedO9FHzxQ8e/NT8rtY/LvzAml38yXd&#xA;tcx+tY30alFljB4mqEng6n7S1PbfFKUeWvOeueXLLWrTTJjFHrln9RuyCQQhkVyy0/a4hk+THFXs&#xA;P5ff84nazrmkQar5k1I6Ml0iywWEcXq3HBxUGUsyLGafs0J8aHbFFsV/OT8htV/LuG31KG9GqaJc&#xA;yej9Z9P0pIpSCypItXFGANGB7dBtil595Y1270DzFputWjlLjT7iO4Qr1PBgWXfqGFQRiqWYq+5/&#xA;+ca//JK+XP8Ao9/6j58UJR/zlbq01j+VD28bFRqd/b2klO6gPcU++AYq+PdD0yTVda0/S46iS/uY&#xA;bZCNzWaQIKf8Fil+jum6faabp9tp9nGIrSziSC3iHRY41Cqv0AYoRGKvP/z28lRebPy21W2WIPqF&#xA;hGb/AE5qDkJbcFiqk/78Tkn04q+DQSCCDQjcEYpfYPmS8vPzI/5xja/t+U+qC0imuFXdnn0+ZfrF&#xA;R1+IROwHuMUPkCKWSGVJYmKSRsHRxsQymoIxS+pPJ3/OX+ivZQW/m3S7iG+RQs19YhJYpGHVzEzR&#xA;tHXwUtih6h5d/Oz8qfMrxQ2euWy3JYGO2vQbaQOOnH1wis3hxJxVnmKuxV+fn5wf+TT81/8AbTuf&#xA;+ThxS+hf+cOf+UK1z/tpf8yI8UPfsVdirsVdirsVfnP55/5TXzB/20rz/k++KX1L/wA4ff8AktNT&#xA;/wC21P8A9Qtrih7nir40/wCctP8Ayaif9s22/wCJy4pCz/nE/SLa/wDzV+sTAM2mafcXcAIr+8Lx&#xA;29foWc4qX2dih86f85lwxnQ/LM5H7xLm5RW8FeNCw/4QYq8B/KvSLXWPzH8uaddrztp7+D1kPRkR&#xA;w7KfZgtMUv0JxQ8v/wCcmIIpPyX153Xk0LWbxH+VjeQpX/gXIxV8OYpdir7n/wCca/8AySvlz/o9&#xA;/wCo+fFDEf8AnMSCRvIWjzj7EeqKjeNXt5iP+IHFXzP+Xd1DafmB5Yu5zxht9WsZZW8FS5RmO/sM&#xA;Uv0SxQ7FXEAih3B6jFX57fmj5W/wt+YGuaIqFLe2uWa0WlP9Hl/ew/8AJNwMUvdv+cPPNyva615S&#xA;nk+OJl1KxQ03VqRTgfIiM09zihO/zG/5xT8v67ez6p5YvBol5OS8ti6c7NnO5KcaPFXuByHgBirx&#xA;jX/+cZ/zb0jm0Wmx6rAn+7rCZJK/KOT0pT9CYpt5rqelanpd5JY6naTWV5EaSW1xG0Ui/NXAOKvc&#xA;/wDnG3859ZsPMNl5M1q5e70bUWEGnPMxZ7acj92iMd/TkPw8expSm+KH1tir8/Pzg/8AJp+a/wDt&#xA;p3P/ACcOKX0L/wA4c/8AKFa5/wBtL/mRHih79irsVdirsVdir85/PP8AymvmD/tpXn/J98UvqX/n&#xA;D7/yWmp/9tqf/qFtcUPc8VfGn/OWn/k1E/7Ztt/xOXFIRf8Azh9/5MvU/wDtiz/9RVrir7AxQ+d/&#xA;+cyf+Uc8uf8AMZN/yaGKvDPyQ/8AJteV/wDmOT9RxSX33ih5n/zkp/5JXzH/ANGX/UfBir4YxS7F&#xA;X2f/AM40ebvLbflNpumvqNvDe6W90l7BLIkboJLmSZXoxB4FJR8XStcUJ1+fnlw+a/yl1IacRcy2&#xA;yR6nZNEQ6yLD8bFCPtcoWbjTrir4XVmVgykhgagjYgjFL7r/ACU/NrSvPflq3SW4RPMtnEqapZsQ&#xA;rsyihnjX9pH67fZOx7VUPRmZUUsxCqoqzHYADucVeUebv+cjvI2ieYtO0KwnTVZri6ig1G7gcG3t&#xA;IncK7GQVWRlr9lTt3NdsVee/85eeQpmfT/O1nEWjVRYaqVH2fiJt5D8+TIT/AKoxV4L5E85an5N8&#xA;02PmHTt5rR/3kJNFlib4ZIm9nUkV7Hftil92+Q/zH8p+eNLS+0O8SSTiDc2LkLcwNtVZI+uxNOQ+&#xA;E9jihk+KvAv+cvR5YPlDTzcmL/EQuk+oAU9f6uVf1qjr6VadduVMVfNH5fpM/nzy4kAYzHVLL0wv&#xA;2uX1hKUpil+imKH5+/nEjJ+anmoMCD+k7g0PgZCQfuOKQ9q/5w9806VDba15buLhIb+aeO8s4XIU&#xA;yrw4SBK/aKcFNPA/PFD6C8yebPLflnT2v9e1GHT7ZQSGmYBnI7Rp9p29lBOKpjZ3dveWkF5bNzt7&#xA;mNZoX6ckdQynfxBxV8yfm/8A85OeZbDzTeaF5PMNtaaZK1vcX8kazSTTRnjIED8kVFaoG1T1riqY&#xA;fkh/zkjr2veZrfyz5uWGZ9QYpYalCgiYTUJWOVF+Ah6UUqBQ9a12VfSGKvzn88/8pr5g/wC2lef8&#xA;n3xS+pf+cPv/ACWmp/8Aban/AOoW1xQ9zxV8af8AOWn/AJNRP+2bbf8AE5cUhF/84ff+TL1P/tiz&#xA;/wDUVa4q+wMUPnf/AJzJ/wCUc8uf8xk3/JoYq8M/JD/ybXlf/mOT9RxSX33ih5n/AM5Kf+SV8x/9&#xA;GX/UfBir4YxS9E/OH8o9e8jeYrtvqkknl2eVpNN1CNS0QjckrFIw+w6fZo3WlRtirzvFX6J/l7bi&#xA;D8v/AC1bEGkWk2MdG6/DbIu+KHzd+dX/ADjXrNhqVzr3kq1a+0m4ZpZ9KhFZ7ZmNW9JOskdegX4h&#xA;0pTfFXgqtf6deVUy2d7bt1HKKWNh9zKcUo7UfN3mzU4Bb6lrV/fQKoRYrm6mlQKOgCuzCgxVNfJn&#xA;5XeefONykeh6VNLbuaPfyKYrVB3LTMOO3gtW8Bir7ssPLnr+TbXy95kMWrE2UdpqbFSI52WMI7UJ&#xA;ruRWvWu+2KHyn+aH/OMnmzy7dzXvleGXXdDYlo44hzvIV68XiUAyezRjfuBil47/ALktMvP93WV7&#xA;CaH7UUqH/hWGKp1/ysj8xPR9D/FOr+jTj6X1+548fDj6lKYqlMUWs61fhIkudT1CY7KoeeZz8hyY&#xA;4q+k/wDnHz/nH3WNK1i383+bYBazWtW0vSnoZRIwoJpgNk4g/AvWu5pTdQ+k8VfLf/OTv5O61Jrs&#xA;vnbQrR7yzu0X9LwQLyeGSJQgm4LuUdFHIgbEEnrir5xBZWqKqyn5EEYpVVF5e3CookubmQhUUcpH&#xA;Y9gBuTir78/J79MD8sfLkWs2stlqNvZrby21wpSVVgJij5q1CC0aKd98UPjz86vIGteUfPOpi7t3&#xA;/Rl/cy3Om3tCY5IpnLhefTmleLDrtXoRilNv+cdvIWu6/wDmFpWrQ28iaPo063d3fFSI+UXxJErE&#xA;UZ2egoO1Tir7exQ/PDzvp2oN5019ltZip1K7IIjYggzv7YpfUH/OIkE8P5bakk0bRMdZnIVwVNPq&#xA;ttvQ4oe34q+Ov+crrK8m/NJHhgkkT9G245IjMK85O4GKhF/84iWd3D+ZOpPNBJEp0acBnVlFfrVt&#xA;tUjFL66xQ+e/+cw7e4n8u+XRDE8pF3MSEUtT90PDFXiH5J6ffx/mv5YeS2lRFvULMyMANj1JGKX3&#xA;nih5r/zkfFLL+THmKOJGdz9Toigkml9AegxV8P8A6M1L/lkm/wCRbf0xS/Sl0R0ZHUMjAhlIqCDs&#xA;QQcUIG28v6DazCe2021gmHSWOGNG61+0qg4qj8VdiqA1Ly/oOqFW1PTbW+K7KbmCOYj5c1bFUFae&#xA;Q/I9m4e08u6ZbOp5BorO3Qg+NVQb4qniqFAVQAoFAB0AxV2KuxVB6joujamoXUrC3vVAoBcRJKAO&#xA;v7YbFUqH5d/l+JjMPLGkiZhRpBY23Ij3PCvbFU3sNK0vTojFp9nBZxGlY7eNIl22GyADbFUVirsV&#xA;diqTah5J8m6lKZtR0HTr2VjVpLi0glYnxJdCcVRWm+X9B0ss2maba2JbZjbQRwk/Pgq4qj8VWTQQ&#xA;zRmOaNZYz1RwGG3scVbjjjiQRxoEjXZUUAAD2AxVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdiqwTwlXYSKViJEhqKKQKkN4UGKrldGLBWBKGjgGtDQGh+gg4qsFxbm4NsJUNwqCRoeQ5hGJA&#xA;Yr1oSpFcVXo6OoZGDKejA1H4YqsjuraSV4Y5UeWP+8jVgWX/AFgNxirVrd2t3AtxazJcQPXhNEwd&#xA;DQ0NGUkGhFMVWwX9hcMFt7mKZiCwEbqxKqxRjsTsHBU++2Krnu7RLiO2eaNbmYEwwswDuF3YqpNT&#xA;TvTFW57q2t/TM8qReq6xRc2C8pH2VFr1Y9hiq4SRmRowwMigMyVHIKxIUkeB4mnyxVqe4gt4XnuJ&#xA;FhhjHKSWRgqqPEsaAYqpi/sS8CC5iL3QY2y81rIEFWKCvxcR1pirhf2JhSYXMRhkcRRyh14tIW4B&#xA;FatC3L4aeOKtTahYQ8PWuYovUYqnN1XkwYIQKnch2C/PbFV0l9ZRtIslxGjRK0kqs6gqigFmap2A&#xA;DCp98VXTXNtCUE0qRmRlRA7BeTMaKor1JPQYqqYqpxXFvKzrFKkjRnjIqsCVPg1OmKqL6rpaTPA9&#xA;5As8VfViMiBl4iMtyWtRQTx1/wBdf5hiqu9xAkQleRFiYqFkLAKS5CrQ9PiJAGKtTXNvCjvNKkaR&#xA;gNIzsFCqdgST0G2KuNzbi4FuZUFwyl1h5DmUBoWC9aV74qoy6tpUX97ewR/EV+KVB8QcxkbnqHBX&#xA;57Yqq3F1a2yh7iZIUNaNIwUHipdtyR0RGY+wJxVU5Ly41HKlePenjiq2C4guIhNBIs0TV4yRsGU0&#xA;NDQjbYjFV+KuxV2KuxV2KuxVh/mL8qfKevvPLfJP688wuPUWTkFfnC7BY5RJFxc20fIFDWmKoNvy&#xA;T8gi9t7mG2mgW3ZHWCOZuDNGysCxblJ+wvRhTtSpqbVVvvyb8hXkNrbzWcv1a1hFsIBPLxeFVmVU&#xA;erEnibhmBBBrTsKYFd/ypj8vfr0F9+jmNzbyNLC5mlbizU6AsaBeK0+WNqjL/wDK3yRfXM91caf+&#xA;/uW5TyJLJGzkRPCKlGWvGORgMbVCJ+TX5frLHKLB+cXp+kTNK3AxcuDJVjxYczuMNqrXn5UeUL2S&#xA;0luoppZrN+SSeqVLqJ2uQjhaLQSP1ADUAFcbVR/5U75GSyls7a1ltop1hSdklZndIHjdVZpfUND6&#xA;Cqe/H4dhgtVbS/ym8j6bp72EFizQypGk5klkYv6UMsCt9qitxuH3QLuajoKKpPrf5Yfl/oGg6pqU&#xA;ej3d6scJkns7eeeaWdY1IWLi7nkoqdjt364VSKWP8tNGlvLR/K+sQW+pWKPfylZeAW7mEyxEtNyE&#xA;gkmJen2aGvwg0UIK00z8qr+bR3tdA1O8tdYlgukfmQlsLgenBG5STdQygkciV5Ek9QFUXolt5CXy&#xA;jPcHyvqtrBaGzurm1kkmDFjMwhETc0eQj61IaBQpoancEqqa3/kC30ZTp3lbVfS0hUk08Sh45Al1&#xA;+6mliLvJzZEg5fvO5ptU4qqeZZPy/wBYtrfWbzRtV1G5vmuI5LVpOE9vLZWwVucaueLSxxpulahq&#xA;nrTFVXyZ5Y8lNrd7oMPlzVrWzuVeT/T41FtH9RrEnpvx9SrfXHZQzkBtxTFWWx/k5+X0d01wmnFS&#xA;QgWNZZVRWSX1gygMKHmBt026dai0rp/yf8gTJwbTiqAOEVJJEVObrIeABAHxxqw8D0xtV9v+VHk2&#xA;3snsI4JjYypPHPbvPJIJPrLWzOWdy0lf9BjAow7+OKrf+VQ+Q+Qc2DGUPLL6zSyNJymYu/xsS1Cz&#xA;MadNzjausfyk8lWkWpwC1aW21V1eaBiqKgjEfppE0Sxuqp6CcasaY2q2H8n/ACJGXP1J2eQlnb1p&#xA;FqxnNxWiFQCJGPQYbVMdP8geXbDT49NtkmFhDEkMVu8ruFWOVZ1ozEv9ta/awWqWn8nPIBLEWMi8&#xA;pRNQTzcVYUoFXlxVRTZQKDthtVfQvyt8o6HqN1e2EDobqJYDCSvBEXlUIVVZPiMjE1Y+1MFqn3l/&#xA;QdN0DSINJ01DHZW3P0kZixHqO0jbnf7TnFUwxV2KuxV//9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:F82EE824FE5BDD118679F4803E0A7CD6</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:F92EE824FE5BDD118679F4803E0A7CD6</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:F72EE824FE5BDD118679F4803E0A7CD6</stRef:instanceID>
            <stRef:documentID>uuid:F52EE824FE5BDD118679F4803E0A7CD6</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>297.000002</stDim:w>
            <stDim:h>419.999945</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -687.102 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 687.102 li
708.767 687.102 li
708.767 0 li
cp
clp
[1 0 0 1 0 0 ]ct
158.431 165.498 mo
150.077 142.79 li
150.077 142.79 136.502 157.93 116.145 157.93 cv
98.1318 157.93 85.3423 142.268 85.3423 117.208 cv
85.3423 85.1025 101.524 73.6172 117.449 73.6172 cv
140.418 73.6172 147.727 88.4956 153.992 107.551 cv
162.346 133.654 li
170.697 158.973 186.359 179.332 231.516 179.332 cv
263.886 179.332 285.812 169.414 285.812 143.313 cv
285.812 122.169 273.802 111.205 251.354 105.984 cv
234.649 102.33 li
223.165 99.7197 219.772 95.0215 219.772 87.1904 cv
219.772 78.3154 226.818 73.0947 238.305 73.0947 cv
250.834 73.0947 257.62 77.7939 258.665 89.0181 cv
284.767 85.8853 li
282.679 62.3931 266.496 52.7354 239.87 52.7354 cv
216.379 52.7354 193.408 61.6104 193.408 90.062 cv
193.408 107.812 202.022 119.037 223.685 124.257 cv
241.438 128.433 li
254.75 131.566 259.185 137.047 259.185 144.617 cv
259.185 154.273 249.789 158.189 232.039 158.189 cv
205.675 158.189 194.713 144.355 188.447 125.3 cv
179.833 99.1987 li
168.872 65.2646 151.382 52.7354 116.664 52.7354 cv
78.2939 52.7354 57.9331 77.0103 57.9331 118.252 cv
57.9331 157.93 78.2939 179.332 114.839 179.332 cv
144.333 179.332 158.431 165.498 158.431 165.498 cv
158.431 165.498 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
46.7256 153.229 mo
44.1152 154.013 41.5049 154.534 38.1118 154.534 cv
31.8472 154.534 27.4092 151.664 27.4092 144.092 cv
27.4092 1.82666 li
0 1.82666 li
0 150.619 li
0 170.196 13.5747 178.291 29.4971 178.291 cv
34.7178 178.291 39.6782 177.506 45.9429 175.942 cv
46.7256 153.229 li
46.7256 153.229 li
cp
true sop
0 0 0 1 nzopmsc
f
376.911 149.053 mo
370.124 153.754 364.382 156.104 356.551 156.104 cv
346.631 156.104 341.149 150.883 341.149 138.092 cv
341.149 77.0063 li
377.173 77.0063 li
377.173 55.603 li
341.41 55.603 li
341.41 26.6255 li
313.741 30.0195 li
313.741 55.603 li
296.25 55.603 li
296.25 77.0063 li
313.741 77.0063 li
313.741 143.832 li
313.741 167.852 327.575 179.332 350.024 179.332 cv
362.293 179.332 373.257 176.986 381.871 172.027 cv
376.911 149.053 li
376.911 149.053 li
cp
f
400.718 158.449 mo
400.718 169.154 409.072 177.768 419.773 177.768 cv
430.999 177.768 439.352 169.154 439.352 158.449 cv
439.352 147.486 430.999 139.136 419.773 139.136 cv
409.072 139.136 400.718 147.486 400.718 158.449 cv
400.718 158.449 li
cp
f
467.727 77.0063 mo
467.727 176.201 li
495.136 176.201 li
495.136 77.0063 li
525.938 77.0063 li
525.938 55.603 li
495.136 55.603 li
495.136 44.6382 li
495.136 28.1943 502.185 22.9736 513.67 22.9736 cv
521.762 22.9736 527.244 24.7988 533.509 28.1943 cv
537.945 5.2207 li
530.638 1.82666 522.023 0 511.582 0 cv
488.609 0 467.727 10.9629 467.727 43.5928 cv
467.727 55.603 li
450.237 55.603 li
450.237 77.0063 li
467.727 77.0063 li
467.727 77.0063 li
cp
f
635.154 79.3579 mo
632.021 59.7803 619.231 52.729 602.524 52.729 cv
585.818 52.729 571.462 60.3003 565.195 78.833 cv
561.803 55.603 li
539.614 55.603 li
539.614 176.201 li
567.023 176.201 li
567.023 108.072 li
567.023 84.8374 579.031 75.9624 591.822 75.9624 cv
605.135 75.9624 610.617 84.8374 610.617 99.1948 cv
610.617 176.201 li
637.765 176.201 li
637.765 107.811 li
637.765 84.8374 650.033 75.9624 662.825 75.9624 cv
675.877 75.9624 681.357 84.8374 681.357 99.1948 cv
681.357 176.201 li
708.767 176.201 li
708.767 89.5386 li
708.767 63.6958 693.627 52.729 673.526 52.729 cv
656.561 52.729 641.419 60.3003 635.154 79.3579 cv
635.154 79.3579 li
cp
f
72.8745 663.107 mo
72.8745 669.211 li
76.041 669.211 li
76.041 670.171 li
71.7715 670.171 li
71.7715 663.107 li
72.8745 663.107 li
cp
false sop
0 0 0 1 cmyk
f
77.8789 667.377 mo
77.8789 668.768 78.3706 669.463 79.3301 669.463 cv
80.3013 669.463 80.793 668.768 80.793 667.377 cv
80.793 666.021 80.2896 665.373 79.3301 665.373 cv
78.3823 665.373 77.8789 666.021 77.8789 667.377 cv
cp
76.8115 667.364 mo
76.8115 665.481 77.8066 664.498 79.3301 664.498 cv
80.8652 664.498 81.8604 665.481 81.8604 667.364 cv
81.8604 669.26 80.8652 670.314 79.3301 670.314 cv
77.8066 670.314 76.8115 669.26 76.8115 667.364 cv
cp
f
85.1143 667.616 mo
85.8457 667.616 86.3257 667.232 86.3257 666.453 cv
86.3257 665.674 85.8457 665.277 85.1143 665.289 cv
84.3828 665.289 83.9507 665.709 83.9507 666.453 cv
83.9507 667.148 84.3706 667.616 85.1143 667.616 cv
cp
85.0063 671.934 mo
86.1338 671.934 86.8652 671.719 86.8652 671.022 cv
86.8652 670.603 86.6372 670.291 85.9297 670.291 cv
84.7305 670.291 li
83.939 670.291 83.4951 670.555 83.4951 671.131 cv
83.4951 671.719 84.1309 671.934 85.0063 671.934 cv
cp
86.7212 664.941 mo
86.9854 664.798 87.0693 664.51 87.1411 664.102 cv
88.0767 664.426 li
87.9927 664.953 87.6089 665.313 87.1528 665.422 cv
87.3208 665.709 87.4048 666.057 87.4048 666.465 cv
87.4048 667.748 86.3735 668.384 85.126 668.384 cv
84.8501 668.384 84.5625 668.348 84.4067 668.288 cv
84.1309 668.432 84.0347 668.623 84.0347 668.863 cv
84.0347 669.176 84.2388 669.319 84.6226 669.319 cv
85.9775 669.319 li
87.2368 669.319 87.9087 669.871 87.9087 670.867 cv
87.9087 672.318 86.3496 672.701 84.8984 672.701 cv
83.6748 672.701 82.4756 672.39 82.4756 671.25 cv
82.4756 670.531 82.9912 670.051 83.9028 669.979 cv
83.3989 669.919 83.1353 669.559 83.1353 669.115 cv
83.1353 668.672 83.3633 668.3 83.9507 668.145 cv
83.2793 667.844 82.8716 667.28 82.8716 666.465 cv
82.8716 665.218 83.7827 664.498 85.1143 664.498 cv
85.7739 664.498 86.3135 664.643 86.7212 664.941 cv
cp
f
89.519 667.377 mo
89.519 668.768 90.0107 669.463 90.9702 669.463 cv
91.9414 669.463 92.4331 668.768 92.4331 667.377 cv
92.4331 666.021 91.9297 665.373 90.9702 665.373 cv
90.0225 665.373 89.519 666.021 89.519 667.377 cv
cp
88.4517 667.364 mo
88.4517 665.481 89.4468 664.498 90.9702 664.498 cv
92.5054 664.498 93.5005 665.481 93.5005 667.364 cv
93.5005 669.26 92.5054 670.314 90.9702 670.314 cv
89.4468 670.314 88.4517 669.26 88.4517 667.364 cv
cp
f
97.8696 669.991 mo
97.5098 670.207 97.042 670.314 96.5264 670.314 cv
95.5308 670.314 94.9312 669.787 94.9312 668.756 cv
94.9312 665.494 li
94.1279 665.494 li
94.1279 664.63 li
94.9312 664.63 li
94.9312 663.455 li
96.0225 663.322 li
96.0225 664.63 li
97.666 664.63 li
97.666 665.494 li
96.0107 665.494 li
96.0107 668.539 li
96.0107 669.14 96.2866 669.391 96.7422 669.391 cv
97.1021 669.391 97.354 669.295 97.666 669.092 cv
97.8696 669.991 li
cp
f
100.283 667.676 mo
100.618 668.756 100.714 669.428 100.714 669.428 cv
100.762 669.428 li
100.762 669.428 100.858 668.768 101.182 667.676 cv
102.105 664.63 li
103.233 664.63 li
101.194 670.627 li
100.63 672.258 99.9229 672.666 98.9395 672.666 cv
98.6753 672.666 98.3755 672.617 98.1357 672.533 cv
98.2314 671.609 li
98.4717 671.73 98.6875 671.777 98.9512 671.777 cv
99.5391 671.777 99.875 671.467 100.199 670.494 cv
98.1475 664.63 li
99.335 664.63 li
100.283 667.676 li
cp
f
105.274 668.023 mo
105.274 669.092 105.994 669.5 106.618 669.5 cv
107.445 669.5 108.129 668.828 108.129 667.364 cv
108.129 666.033 107.589 665.386 106.738 665.386 cv
105.946 665.386 105.274 665.973 105.274 667.004 cv
105.274 668.023 li
cp
105.274 672.605 mo
104.195 672.605 li
104.195 664.63 li
105.083 664.63 li
105.214 665.697 li
105.538 664.798 106.354 664.498 107.049 664.498 cv
108.405 664.498 109.232 665.481 109.232 667.269 cv
109.232 668.959 108.369 670.314 106.833 670.314 cv
105.982 670.314 105.466 669.919 105.274 669.439 cv
105.274 672.605 li
cp
f
113.901 666.849 mo
113.914 666.765 113.914 666.693 113.914 666.621 cv
113.914 665.913 113.458 665.35 112.714 665.35 cv
111.922 665.35 111.419 665.889 111.311 666.849 cv
113.901 666.849 li
cp
113.985 668.564 mo
114.933 668.815 li
114.705 669.932 113.77 670.314 112.714 670.314 cv
111.239 670.314 110.244 669.295 110.244 667.448 cv
110.244 665.59 111.227 664.498 112.774 664.498 cv
114.201 664.498 114.969 665.481 114.969 666.861 cv
114.969 667.172 114.921 667.461 114.861 667.629 cv
111.287 667.629 li
111.335 668.707 111.838 669.463 112.774 669.463 cv
113.386 669.463 113.793 669.224 113.985 668.564 cv
cp
f
119.495 668.204 mo
119.639 669.067 120.202 669.463 120.97 669.463 cv
121.726 669.463 122.241 669.115 122.241 668.456 cv
122.241 667.832 121.929 667.532 120.778 667.101 cv
119.675 666.717 118.715 666.262 118.715 664.953 cv
118.715 663.479 119.867 662.951 120.97 662.951 cv
122.265 662.951 123.249 663.455 123.369 664.811 cv
122.277 665.025 li
122.205 664.246 121.689 663.838 120.982 663.838 cv
120.322 663.838 119.842 664.198 119.842 664.857 cv
119.842 665.565 120.406 665.805 121.39 666.165 cv
122.469 666.561 123.369 666.992 123.369 668.313 cv
123.369 669.703 122.265 670.314 120.91 670.314 cv
119.519 670.314 118.691 669.764 118.463 668.48 cv
119.495 668.204 li
cp
f
126.094 667.676 mo
126.43 668.756 126.526 669.428 126.526 669.428 cv
126.574 669.428 li
126.574 669.428 126.67 668.768 126.994 667.676 cv
127.917 664.63 li
129.044 664.63 li
127.005 670.627 li
126.442 672.258 125.734 672.666 124.751 672.666 cv
124.487 672.666 124.187 672.617 123.947 672.533 cv
124.043 671.609 li
124.283 671.73 124.499 671.777 124.763 671.777 cv
125.351 671.777 125.687 671.467 126.01 670.494 cv
123.959 664.63 li
125.146 664.63 li
126.094 667.676 li
cp
f
130.306 668.636 mo
130.39 669.271 130.846 669.547 131.505 669.547 cv
132.141 669.547 132.609 669.307 132.609 668.804 cv
132.609 668.348 132.405 668.096 131.746 667.928 cv
130.93 667.736 li
129.922 667.496 129.539 666.98 129.539 666.165 cv
129.539 664.918 130.57 664.498 131.625 664.498 cv
132.789 664.498 133.508 664.918 133.616 665.997 cv
132.561 666.117 li
132.525 665.565 132.189 665.313 131.554 665.313 cv
130.942 665.313 130.582 665.59 130.582 666.057 cv
130.582 666.453 130.738 666.705 131.338 666.837 cv
132.105 667.017 li
133.089 667.256 133.641 667.713 133.641 668.684 cv
133.641 669.871 132.705 670.314 131.494 670.314 cv
130.234 670.314 129.503 669.932 129.347 668.924 cv
130.306 668.636 li
cp
f
137.913 669.991 mo
137.553 670.207 137.085 670.314 136.569 670.314 cv
135.574 670.314 134.974 669.787 134.974 668.756 cv
134.974 665.494 li
134.171 665.494 li
134.171 664.63 li
134.974 664.63 li
134.974 663.455 li
136.065 663.322 li
136.065 664.63 li
137.709 664.63 li
137.709 665.494 li
136.054 665.494 li
136.054 668.539 li
136.054 669.14 136.33 669.391 136.785 669.391 cv
137.145 669.391 137.397 669.295 137.709 669.092 cv
137.913 669.991 li
cp
f
142.197 666.849 mo
142.209 666.765 142.209 666.693 142.209 666.621 cv
142.209 665.913 141.753 665.35 141.01 665.35 cv
140.218 665.35 139.714 665.889 139.606 666.849 cv
142.197 666.849 li
cp
142.281 668.564 mo
143.229 668.815 li
143 669.932 142.065 670.314 141.01 670.314 cv
139.534 670.314 138.539 669.295 138.539 667.448 cv
138.539 665.59 139.522 664.498 141.069 664.498 cv
142.497 664.498 143.264 665.481 143.264 666.861 cv
143.264 667.172 143.216 667.461 143.156 667.629 cv
139.583 667.629 li
139.63 668.707 140.134 669.463 141.069 669.463 cv
141.681 669.463 142.089 669.224 142.281 668.564 cv
cp
f
150.595 664.498 mo
151.53 664.498 152.238 665.002 152.238 666.165 cv
152.238 670.171 li
151.158 670.171 li
151.158 666.525 li
151.158 665.842 150.858 665.434 150.235 665.434 cv
149.599 665.434 148.976 665.877 148.976 666.992 cv
148.976 670.171 li
147.896 670.171 li
147.896 666.525 li
147.896 665.842 147.596 665.434 146.973 665.434 cv
146.349 665.434 145.713 665.889 145.713 666.992 cv
145.713 670.171 li
144.634 670.171 li
144.634 664.63 li
145.485 664.63 li
145.618 665.697 li
145.905 664.846 146.589 664.498 147.345 664.498 cv
148.136 664.498 148.712 664.846 148.855 665.721 cv
149.131 664.834 149.851 664.498 150.595 664.498 cv
cp
f
154.762 668.611 mo
155.218 668.611 155.578 668.959 155.578 669.428 cv
155.578 669.883 155.218 670.242 154.762 670.242 cv
154.306 670.242 153.946 669.883 153.946 669.428 cv
153.946 668.959 154.306 668.611 154.762 668.611 cv
cp
154.762 664.618 mo
155.218 664.618 155.578 664.966 155.578 665.434 cv
155.578 665.889 155.218 666.249 154.762 666.249 cv
154.306 666.249 153.946 665.889 153.946 665.434 cv
153.946 664.966 154.306 664.618 154.762 664.618 cv
cp
f
163.077 668.443 mo
161.746 665.997 li
161.338 665.229 161.218 664.785 161.218 664.785 cv
161.17 664.785 li
161.17 664.785 161.229 665.218 161.229 666.057 cv
161.229 670.171 li
160.126 670.171 li
160.126 663.107 li
161.41 663.107 li
163.089 666.369 li
163.365 666.908 163.448 667.232 163.448 667.232 cv
163.497 667.232 li
163.497 667.232 163.568 666.908 163.856 666.369 cv
165.523 663.107 li
166.759 663.107 li
166.759 670.171 li
165.643 670.171 li
165.643 666.057 li
165.643 665.218 165.715 664.785 165.715 664.785 cv
165.667 664.785 li
165.667 664.785 165.547 665.229 165.127 665.997 cv
163.808 668.443 li
163.077 668.443 li
cp
f
171.92 666.849 mo
171.933 666.765 171.933 666.693 171.933 666.621 cv
171.933 665.913 171.477 665.35 170.733 665.35 cv
169.941 665.35 169.438 665.889 169.33 666.849 cv
171.92 666.849 li
cp
172.004 668.564 mo
172.952 668.815 li
172.724 669.932 171.789 670.314 170.733 670.314 cv
169.258 670.314 168.263 669.295 168.263 667.448 cv
168.263 665.59 169.246 664.498 170.793 664.498 cv
172.22 664.498 172.988 665.481 172.988 666.861 cv
172.988 667.172 172.94 667.461 172.88 667.629 cv
169.306 667.629 li
169.354 668.707 169.857 669.463 170.793 669.463 cv
171.405 669.463 171.813 669.224 172.004 668.564 cv
cp
f
177.956 666.74 mo
177.956 665.758 177.212 665.338 176.577 665.338 cv
175.761 665.338 175.089 665.901 175.089 667.461 cv
175.089 668.768 175.665 669.463 176.564 669.463 cv
177.176 669.463 177.956 668.972 177.956 667.965 cv
177.956 666.74 li
cp
177.944 662.159 mo
179.035 662.159 li
179.035 670.171 li
178.076 670.171 li
177.956 669.211 li
177.644 670.051 176.984 670.314 176.193 670.314 cv
175.029 670.314 173.998 669.367 173.998 667.496 cv
173.998 665.613 174.897 664.498 176.48 664.498 cv
177.188 664.498 177.788 664.895 177.944 665.373 cv
177.944 662.159 li
cp
f
181.845 664.63 mo
181.845 670.171 li
180.766 670.171 li
180.766 664.63 li
181.845 664.63 li
cp
181.293 662.135 mo
181.713 662.135 182.049 662.424 182.049 662.855 cv
182.049 663.263 181.713 663.574 181.293 663.574 cv
180.91 663.574 180.574 663.263 180.574 662.855 cv
180.574 662.424 180.91 662.135 181.293 662.135 cv
cp
f
186.885 669.164 mo
186.621 669.979 186.057 670.314 185.182 670.314 cv
184.174 670.314 183.502 669.799 183.502 668.48 cv
183.502 664.63 li
184.582 664.63 li
184.582 668.313 li
184.582 669.127 184.894 669.512 185.577 669.512 cv
186.177 669.512 186.861 668.972 186.861 667.904 cv
186.861 664.63 li
187.94 664.63 li
187.94 670.171 li
187.017 670.171 li
186.885 669.164 li
cp
f
195.631 664.498 mo
196.566 664.498 197.274 665.002 197.274 666.165 cv
197.274 670.171 li
196.194 670.171 li
196.194 666.525 li
196.194 665.842 195.895 665.434 195.271 665.434 cv
194.635 665.434 194.012 665.877 194.012 666.992 cv
194.012 670.171 li
192.933 670.171 li
192.933 666.525 li
192.933 665.842 192.632 665.434 192.009 665.434 cv
191.385 665.434 190.75 665.889 190.75 666.992 cv
190.75 670.171 li
189.67 670.171 li
189.67 664.63 li
190.521 664.63 li
190.654 665.697 li
190.941 664.846 191.625 664.498 192.381 664.498 cv
193.172 664.498 193.748 664.846 193.892 665.721 cv
194.167 664.834 194.887 664.498 195.631 664.498 cv
cp
f
201.934 672.605 mo
201.934 662.147 li
202.857 662.147 li
202.857 672.605 li
201.934 672.605 li
cp
f
208.401 666.645 mo
208.401 668.336 209.097 669.355 210.428 669.355 cv
211.759 669.355 212.443 668.336 212.443 666.645 cv
212.443 664.966 211.747 663.934 210.428 663.934 cv
209.097 663.934 208.401 664.966 208.401 666.645 cv
cp
207.238 666.645 mo
207.238 664.282 208.485 662.963 210.428 662.963 cv
212.371 662.963 213.606 664.282 213.606 666.645 cv
213.606 668.996 212.371 670.314 210.428 670.314 cv
208.485 670.314 207.238 668.996 207.238 666.645 cv
cp
f
216.081 668.023 mo
216.081 669.092 216.8 669.5 217.424 669.5 cv
218.251 669.5 218.935 668.828 218.935 667.364 cv
218.935 666.033 218.396 665.386 217.544 665.386 cv
216.752 665.386 216.081 665.973 216.081 667.004 cv
216.081 668.023 li
cp
216.081 672.605 mo
215.001 672.605 li
215.001 664.63 li
215.889 664.63 li
216.021 665.697 li
216.345 664.798 217.16 664.498 217.855 664.498 cv
219.211 664.498 220.039 665.481 220.039 667.269 cv
220.039 668.959 219.175 670.314 217.64 670.314 cv
216.788 670.314 216.272 669.919 216.081 669.439 cv
216.081 672.605 li
cp
f
224.708 666.849 mo
224.72 666.765 224.72 666.693 224.72 666.621 cv
224.72 665.913 224.264 665.35 223.521 665.35 cv
222.729 665.35 222.225 665.889 222.117 666.849 cv
224.708 666.849 li
cp
224.792 668.564 mo
225.739 668.815 li
225.511 669.932 224.576 670.314 223.521 670.314 cv
222.045 670.314 221.05 669.295 221.05 667.448 cv
221.05 665.59 222.033 664.498 223.58 664.498 cv
225.007 664.498 225.775 665.481 225.775 666.861 cv
225.775 667.172 225.727 667.461 225.667 667.629 cv
222.093 667.629 li
222.141 668.707 222.645 669.463 223.58 669.463 cv
224.192 669.463 224.6 669.224 224.792 668.564 cv
cp
f
228.129 665.697 mo
228.429 664.869 229.064 664.498 229.904 664.498 cv
230.816 664.498 231.583 665.002 231.583 666.213 cv
231.583 670.171 li
230.504 670.171 li
230.504 666.537 li
230.504 665.854 230.192 665.434 229.532 665.434 cv
228.861 665.434 228.225 665.793 228.225 666.992 cv
228.225 670.171 li
227.146 670.171 li
227.146 664.63 li
227.997 664.63 li
228.129 665.697 li
cp
f
234.201 670.171 mo
234.201 664.066 li
232.15 664.066 li
232.15 663.107 li
237.379 663.107 li
237.379 664.066 li
235.316 664.066 li
235.316 670.171 li
234.201 670.171 li
cp
f
239.613 667.676 mo
239.948 668.756 240.044 669.428 240.044 669.428 cv
240.092 669.428 li
240.092 669.428 240.188 668.768 240.512 667.676 cv
241.436 664.63 li
242.563 664.63 li
240.524 670.627 li
239.96 672.258 239.253 672.666 238.27 672.666 cv
238.005 672.666 237.706 672.617 237.466 672.533 cv
237.562 671.609 li
237.802 671.73 238.018 671.777 238.281 671.777 cv
238.869 671.777 239.205 671.467 239.529 670.494 cv
237.478 664.63 li
238.665 664.63 li
239.613 667.676 li
cp
f
244.604 668.023 mo
244.604 669.092 245.324 669.5 245.948 669.5 cv
246.775 669.5 247.459 668.828 247.459 667.364 cv
247.459 666.033 246.919 665.386 246.068 665.386 cv
245.276 665.386 244.604 665.973 244.604 667.004 cv
244.604 668.023 li
cp
244.604 672.605 mo
243.525 672.605 li
243.525 664.63 li
244.413 664.63 li
244.544 665.697 li
244.868 664.798 245.684 664.498 246.379 664.498 cv
247.735 664.498 248.563 665.481 248.563 667.269 cv
248.563 668.959 247.699 670.314 246.164 670.314 cv
245.312 670.314 244.796 669.919 244.604 669.439 cv
244.604 672.605 li
cp
f
253.231 666.849 mo
253.243 666.765 253.243 666.693 253.243 666.621 cv
253.243 665.913 252.787 665.35 252.044 665.35 cv
251.252 665.35 250.749 665.889 250.641 666.849 cv
253.231 666.849 li
cp
253.315 668.564 mo
254.263 668.815 li
254.035 669.932 253.099 670.314 252.044 670.314 cv
250.568 670.314 249.573 669.295 249.573 667.448 cv
249.573 665.59 250.557 664.498 252.104 664.498 cv
253.531 664.498 254.298 665.481 254.298 666.861 cv
254.298 667.172 254.25 667.461 254.19 667.629 cv
250.617 667.629 li
250.665 668.707 251.168 669.463 252.104 669.463 cv
252.715 669.463 253.123 669.224 253.315 668.564 cv
cp
f
258.453 670.171 mo
258.453 663.107 li
262.614 663.107 li
262.614 664.066 li
259.556 664.066 li
259.556 666.225 li
262.242 666.225 li
262.242 667.185 li
259.556 667.185 li
259.556 670.171 li
258.453 670.171 li
cp
f
266.971 666.849 mo
266.983 666.765 266.983 666.693 266.983 666.621 cv
266.983 665.913 266.527 665.35 265.783 665.35 cv
264.992 665.35 264.488 665.889 264.38 666.849 cv
266.971 666.849 li
cp
267.055 668.564 mo
268.002 668.815 li
267.774 669.932 266.839 670.314 265.783 670.314 cv
264.308 670.314 263.313 669.295 263.313 667.448 cv
263.313 665.59 264.296 664.498 265.843 664.498 cv
267.271 664.498 268.038 665.481 268.038 666.861 cv
268.038 667.172 267.99 667.461 267.93 667.629 cv
264.356 667.629 li
264.404 668.707 264.908 669.463 265.843 669.463 cv
266.455 669.463 266.863 669.224 267.055 668.564 cv
cp
f
272.251 667.7 mo
270.764 667.664 270.116 668 270.116 668.695 cv
270.116 669.151 270.416 669.5 271.003 669.5 cv
271.579 669.5 272.251 669.151 272.251 668.504 cv
272.251 667.7 li
cp
273.342 668.863 mo
273.342 669.283 273.534 669.379 273.75 669.379 cv
273.882 669.379 273.978 669.355 274.062 669.319 cv
274.062 670.158 li
273.906 670.219 273.714 670.255 273.474 670.255 cv
272.838 670.255 272.431 669.991 272.335 669.367 cv
272.047 670.063 271.399 670.314 270.691 670.314 cv
269.72 670.314 269.037 669.764 269.037 668.815 cv
269.037 667.592 269.984 666.885 272.251 666.992 cv
272.251 666.309 li
272.251 665.625 271.843 665.361 271.255 665.361 cv
270.656 665.361 270.296 665.674 270.248 666.249 cv
269.216 666.094 li
269.3 664.918 270.332 664.498 271.351 664.498 cv
272.431 664.498 273.342 664.93 273.342 666.201 cv
273.342 668.863 li
cp
f
278.203 669.991 mo
277.843 670.207 277.375 670.314 276.859 670.314 cv
275.864 670.314 275.264 669.787 275.264 668.756 cv
275.264 665.494 li
274.461 665.494 li
274.461 664.63 li
275.264 664.63 li
275.264 663.455 li
276.355 663.322 li
276.355 664.63 li
277.999 664.63 li
277.999 665.494 li
276.344 665.494 li
276.344 668.539 li
276.344 669.14 276.62 669.391 277.075 669.391 cv
277.435 669.391 277.687 669.295 277.999 669.092 cv
278.203 669.991 li
cp
f
282.559 669.164 mo
282.294 669.979 281.731 670.314 280.855 670.314 cv
279.848 670.314 279.176 669.799 279.176 668.48 cv
279.176 664.63 li
280.256 664.63 li
280.256 668.313 li
280.256 669.127 280.567 669.512 281.251 669.512 cv
281.851 669.512 282.535 668.972 282.535 667.904 cv
282.535 664.63 li
283.614 664.63 li
283.614 670.171 li
282.69 670.171 li
282.559 669.164 li
cp
f
288.451 665.721 mo
288.319 665.697 288.139 665.674 287.959 665.674 cv
287.18 665.674 286.424 666.285 286.424 667.364 cv
286.424 670.171 li
285.345 670.171 li
285.345 664.63 li
286.256 664.63 li
286.388 666.129 li
286.604 665.134 287.299 664.45 288.535 664.51 cv
288.451 665.721 li
cp
f
292.651 666.849 mo
292.663 666.765 292.663 666.693 292.663 666.621 cv
292.663 665.913 292.207 665.35 291.464 665.35 cv
290.672 665.35 290.168 665.889 290.061 666.849 cv
292.651 666.849 li
cp
292.735 668.564 mo
293.683 668.815 li
293.455 669.932 292.519 670.314 291.464 670.314 cv
289.988 670.314 288.993 669.295 288.993 667.448 cv
288.993 665.59 289.977 664.498 291.523 664.498 cv
292.951 664.498 293.718 665.481 293.718 666.861 cv
293.718 667.172 293.67 667.461 293.61 667.629 cv
290.037 667.629 li
290.084 668.707 290.588 669.463 291.523 669.463 cv
292.135 669.463 292.543 669.224 292.735 668.564 cv
cp
f
295.508 668.636 mo
295.592 669.271 296.048 669.547 296.708 669.547 cv
297.343 669.547 297.811 669.307 297.811 668.804 cv
297.811 668.348 297.607 668.096 296.948 667.928 cv
296.132 667.736 li
295.125 667.496 294.741 666.98 294.741 666.165 cv
294.741 664.918 295.772 664.498 296.828 664.498 cv
297.991 664.498 298.71 664.918 298.818 665.997 cv
297.763 666.117 li
297.727 665.565 297.392 665.313 296.756 665.313 cv
296.144 665.313 295.784 665.59 295.784 666.057 cv
295.784 666.453 295.94 666.705 296.54 666.837 cv
297.308 667.017 li
298.291 667.256 298.843 667.713 298.843 668.684 cv
298.843 669.871 297.907 670.314 296.696 670.314 cv
295.437 670.314 294.705 669.932 294.549 668.924 cv
295.508 668.636 li
cp
f
300.968 668.611 mo
301.424 668.611 301.784 668.959 301.784 669.428 cv
301.784 669.883 301.424 670.242 300.968 670.242 cv
300.512 670.242 300.152 669.883 300.152 669.428 cv
300.152 668.959 300.512 668.611 300.968 668.611 cv
cp
300.968 664.618 mo
301.424 664.618 301.784 664.966 301.784 665.434 cv
301.784 665.889 301.424 666.249 300.968 666.249 cv
300.512 666.249 300.152 665.889 300.152 665.434 cv
300.152 664.966 300.512 664.618 300.968 664.618 cv
cp
f
306.704 668.204 mo
306.848 669.067 307.412 669.463 308.179 669.463 cv
308.935 669.463 309.451 669.115 309.451 668.456 cv
309.451 667.832 309.139 667.532 307.987 667.101 cv
306.884 666.717 305.925 666.262 305.925 664.953 cv
305.925 663.479 307.076 662.951 308.179 662.951 cv
309.475 662.951 310.458 663.455 310.578 664.811 cv
309.487 665.025 li
309.415 664.246 308.899 663.838 308.191 663.838 cv
307.532 663.838 307.052 664.198 307.052 664.857 cv
307.052 665.565 307.616 665.805 308.599 666.165 cv
309.679 666.561 310.578 666.992 310.578 668.313 cv
310.578 669.703 309.475 670.314 308.119 670.314 cv
306.728 670.314 305.9 669.764 305.673 668.48 cv
306.704 668.204 li
cp
f
314.935 669.991 mo
314.575 670.207 314.107 670.314 313.591 670.314 cv
312.596 670.314 311.996 669.787 311.996 668.756 cv
311.996 665.494 li
311.193 665.494 li
311.193 664.63 li
311.996 664.63 li
311.996 663.455 li
313.088 663.322 li
313.088 664.63 li
314.731 664.63 li
314.731 665.494 li
313.076 665.494 li
313.076 668.539 li
313.076 669.14 313.352 669.391 313.807 669.391 cv
314.167 669.391 314.419 669.295 314.731 669.092 cv
314.935 669.991 li
cp
f
317.348 667.676 mo
317.683 668.756 317.779 669.428 317.779 669.428 cv
317.827 669.428 li
317.827 669.428 317.923 668.768 318.247 667.676 cv
319.17 664.63 li
320.298 664.63 li
318.259 670.627 li
317.695 672.258 316.988 672.666 316.004 672.666 cv
315.74 672.666 315.44 672.617 315.201 672.533 cv
315.296 671.609 li
315.537 671.73 315.752 671.777 316.016 671.777 cv
316.604 671.777 316.939 671.467 317.264 670.494 cv
315.213 664.63 li
316.4 664.63 li
317.348 667.676 li
cp
f
323.131 670.171 mo
322.843 670.242 322.651 670.268 322.459 670.268 cv
321.764 670.268 321.188 669.895 321.188 669.067 cv
321.188 662.159 li
322.268 662.159 li
322.268 668.84 li
322.268 669.188 322.471 669.332 322.759 669.332 cv
322.915 669.332 323.023 669.307 323.143 669.271 cv
323.131 670.171 li
cp
f
325.471 664.63 mo
325.471 670.171 li
324.392 670.171 li
324.392 664.63 li
325.471 664.63 li
cp
324.919 662.135 mo
325.339 662.135 325.675 662.424 325.675 662.855 cv
325.675 663.263 325.339 663.574 324.919 663.574 cv
324.536 663.574 324.2 663.263 324.2 662.855 cv
324.2 662.424 324.536 662.135 324.919 662.135 cv
cp
f
327.62 668.636 mo
327.704 669.271 328.159 669.547 328.819 669.547 cv
329.455 669.547 329.922 669.307 329.922 668.804 cv
329.922 668.348 329.719 668.096 329.059 667.928 cv
328.243 667.736 li
327.236 667.496 326.852 666.98 326.852 666.165 cv
326.852 664.918 327.884 664.498 328.939 664.498 cv
330.103 664.498 330.822 664.918 330.93 665.997 cv
329.875 666.117 li
329.838 665.565 329.503 665.313 328.867 665.313 cv
328.255 665.313 327.896 665.59 327.896 666.057 cv
327.896 666.453 328.051 666.705 328.651 666.837 cv
329.419 667.017 li
330.402 667.256 330.954 667.713 330.954 668.684 cv
330.954 669.871 330.019 670.314 328.807 670.314 cv
327.548 670.314 326.816 669.932 326.66 668.924 cv
327.62 668.636 li
cp
f
335.226 669.991 mo
334.866 670.207 334.398 670.314 333.883 670.314 cv
332.887 670.314 332.288 669.787 332.288 668.756 cv
332.288 665.494 li
331.484 665.494 li
331.484 664.63 li
332.288 664.63 li
332.288 663.455 li
333.379 663.322 li
333.379 664.63 li
335.022 664.63 li
335.022 665.494 li
333.367 665.494 li
333.367 668.539 li
333.367 669.14 333.643 669.391 334.099 669.391 cv
334.458 669.391 334.71 669.295 335.022 669.092 cv
335.226 669.991 li
cp
f
337.351 664.63 mo
337.351 670.171 li
336.271 670.171 li
336.271 664.63 li
337.351 664.63 li
cp
336.799 662.135 mo
337.219 662.135 337.555 662.424 337.555 662.855 cv
337.555 663.263 337.219 663.574 336.799 663.574 cv
336.416 663.574 336.08 663.263 336.08 662.855 cv
336.08 662.424 336.416 662.135 336.799 662.135 cv
cp
f
343.337 668.768 mo
343.146 669.883 342.258 670.314 341.167 670.314 cv
339.715 670.314 338.72 669.283 338.72 667.437 cv
338.72 665.59 339.715 664.498 341.25 664.498 cv
342.426 664.498 343.193 665.121 343.266 666.225 cv
342.282 666.43 li
342.186 665.733 341.814 665.386 341.203 665.386 cv
340.255 665.386 339.764 666.225 339.764 667.437 cv
339.764 668.611 340.339 669.451 341.25 669.451 cv
341.838 669.451 342.234 669.176 342.402 668.539 cv
343.337 668.768 li
cp
f
347.731 668.204 mo
347.875 669.067 348.439 669.463 349.206 669.463 cv
349.962 669.463 350.478 669.115 350.478 668.456 cv
350.478 667.832 350.166 667.532 349.015 667.101 cv
347.912 666.717 346.952 666.262 346.952 664.953 cv
346.952 663.479 348.104 662.951 349.206 662.951 cv
350.502 662.951 351.485 663.455 351.605 664.811 cv
350.515 665.025 li
350.442 664.246 349.927 663.838 349.219 663.838 cv
348.559 663.838 348.079 664.198 348.079 664.857 cv
348.079 665.565 348.643 665.805 349.626 666.165 cv
350.706 666.561 351.605 666.992 351.605 668.313 cv
351.605 669.703 350.502 670.314 349.146 670.314 cv
347.755 670.314 346.928 669.764 346.7 668.48 cv
347.731 668.204 li
cp
f
356.262 666.849 mo
356.274 666.765 356.274 666.693 356.274 666.621 cv
356.274 665.913 355.817 665.35 355.074 665.35 cv
354.282 665.35 353.779 665.889 353.671 666.849 cv
356.262 666.849 li
cp
356.346 668.564 mo
357.294 668.815 li
357.065 669.932 356.13 670.314 355.074 670.314 cv
353.599 670.314 352.604 669.295 352.604 667.448 cv
352.604 665.59 353.587 664.498 355.134 664.498 cv
356.562 664.498 357.329 665.481 357.329 666.861 cv
357.329 667.172 357.281 667.461 357.222 667.629 cv
353.647 667.629 li
353.695 668.707 354.198 669.463 355.134 669.463 cv
355.746 669.463 356.153 669.224 356.346 668.564 cv
cp
f
361.698 669.991 mo
361.338 670.207 360.87 670.314 360.354 670.314 cv
359.358 670.314 358.759 669.787 358.759 668.756 cv
358.759 665.494 li
357.956 665.494 li
357.956 664.63 li
358.759 664.63 li
358.759 663.455 li
359.851 663.322 li
359.851 664.63 li
361.494 664.63 li
361.494 665.494 li
359.839 665.494 li
359.839 668.539 li
359.839 669.14 360.114 669.391 360.57 669.391 cv
360.931 669.391 361.183 669.295 361.494 669.092 cv
361.698 669.991 li
cp
f
366.259 666.669 mo
366.259 668.229 366.882 669.416 367.938 669.416 cv
368.993 669.416 369.629 668.229 369.629 666.669 cv
369.629 665.074 368.993 663.922 367.938 663.922 cv
366.882 663.922 366.259 665.074 366.259 666.669 cv
cp
365.167 666.645 mo
365.167 664.63 366.211 662.963 367.95 662.963 cv
369.688 662.963 370.732 664.63 370.732 666.645 cv
370.732 668.768 369.749 670.314 367.95 670.314 cv
366.151 670.314 365.167 668.768 365.167 666.645 cv
cp
f
373.075 670.171 mo
373.075 664.294 li
371.552 664.546 li
371.552 663.563 li
374.19 663.095 li
374.19 670.171 li
373.075 670.171 li
cp
f
375.751 671.538 mo
375.751 671.022 li
376.339 670.938 376.724 670.675 376.724 670.135 cv
376.231 670.23 375.859 669.932 375.859 669.463 cv
375.859 668.983 376.195 668.72 376.663 668.72 cv
377.155 668.72 377.575 669.115 377.575 669.775 cv
377.575 670.963 376.854 671.479 375.751 671.538 cv
cp
f
383.214 663.107 mo
383.214 669.211 li
386.381 669.211 li
386.381 670.171 li
382.111 670.171 li
382.111 663.107 li
383.214 663.107 li
cp
f
388.591 664.63 mo
388.591 670.171 li
387.512 670.171 li
387.512 664.63 li
388.591 664.63 li
cp
388.039 662.135 mo
388.459 662.135 388.795 662.424 388.795 662.855 cv
388.795 663.263 388.459 663.574 388.039 663.574 cv
387.655 663.574 387.319 663.263 387.319 662.855 cv
387.319 662.424 387.655 662.135 388.039 662.135 cv
cp
f
391.304 665.697 mo
391.603 664.869 392.238 664.498 393.078 664.498 cv
393.989 664.498 394.757 665.002 394.757 666.213 cv
394.757 670.171 li
393.678 670.171 li
393.678 666.537 li
393.678 665.854 393.366 665.434 392.706 665.434 cv
392.034 665.434 391.399 665.793 391.399 666.992 cv
391.399 670.171 li
390.319 670.171 li
390.319 664.63 li
391.171 664.63 li
391.304 665.697 li
cp
f
397.507 664.63 mo
397.507 670.171 li
396.428 670.171 li
396.428 664.63 li
397.507 664.63 li
cp
396.955 662.135 mo
397.375 662.135 397.711 662.424 397.711 662.855 cv
397.711 663.263 397.375 663.574 396.955 663.574 cv
396.571 663.574 396.235 663.263 396.235 662.855 cv
396.235 662.424 396.571 662.135 396.955 662.135 cv
cp
f
400.22 665.697 mo
400.519 664.869 401.154 664.498 401.994 664.498 cv
402.905 664.498 403.673 665.002 403.673 666.213 cv
403.673 670.171 li
402.594 670.171 li
402.594 666.537 li
402.594 665.854 402.282 665.434 401.622 665.434 cv
400.95 665.434 400.315 665.793 400.315 666.992 cv
400.315 670.171 li
399.235 670.171 li
399.235 664.63 li
400.087 664.63 li
400.22 665.697 li
cp
f
407.227 667.616 mo
407.958 667.616 408.438 667.232 408.438 666.453 cv
408.438 665.674 407.958 665.277 407.227 665.289 cv
406.495 665.289 406.063 665.709 406.063 666.453 cv
406.063 667.148 406.483 667.616 407.227 667.616 cv
cp
407.118 671.934 mo
408.246 671.934 408.978 671.719 408.978 671.022 cv
408.978 670.603 408.749 670.291 408.042 670.291 cv
406.843 670.291 li
406.052 670.291 405.607 670.555 405.607 671.131 cv
405.607 671.719 406.243 671.934 407.118 671.934 cv
cp
408.833 664.941 mo
409.098 664.798 409.182 664.51 409.253 664.102 cv
410.188 664.426 li
410.104 664.953 409.722 665.313 409.265 665.422 cv
409.433 665.709 409.517 666.057 409.517 666.465 cv
409.517 667.748 408.485 668.384 407.238 668.384 cv
406.962 668.384 406.675 668.348 406.519 668.288 cv
406.243 668.432 406.147 668.623 406.147 668.863 cv
406.147 669.176 406.351 669.319 406.735 669.319 cv
408.09 669.319 li
409.349 669.319 410.021 669.871 410.021 670.867 cv
410.021 672.318 408.462 672.701 407.011 672.701 cv
405.787 672.701 404.588 672.39 404.588 671.25 cv
404.588 670.531 405.104 670.051 406.015 669.979 cv
405.511 669.919 405.247 669.559 405.247 669.115 cv
405.247 668.672 405.476 668.3 406.063 668.145 cv
405.392 667.844 404.983 667.28 404.983 666.465 cv
404.983 665.218 405.896 664.498 407.227 664.498 cv
407.886 664.498 408.426 664.643 408.833 664.941 cv
cp
f
415.05 666.669 mo
416.069 666.669 li
417.113 666.669 417.437 666.141 417.437 665.338 cv
417.437 664.486 416.958 664.03 416.058 664.03 cv
415.05 664.03 li
415.05 666.669 li
cp
413.947 670.171 mo
413.947 663.107 li
416.082 663.107 li
417.833 663.107 418.577 663.922 418.577 665.277 cv
418.577 666.693 417.772 667.58 416.19 667.58 cv
415.05 667.58 li
415.05 670.171 li
413.947 670.171 li
cp
f
422.909 665.721 mo
422.777 665.697 422.598 665.674 422.417 665.674 cv
421.638 665.674 420.882 666.285 420.882 667.364 cv
420.882 670.171 li
419.803 670.171 li
419.803 664.63 li
420.714 664.63 li
420.847 666.129 li
421.063 665.134 421.758 664.45 422.993 664.51 cv
422.909 665.721 li
cp
f
424.519 667.377 mo
424.519 668.768 425.011 669.463 425.97 669.463 cv
426.94 669.463 427.433 668.768 427.433 667.377 cv
427.433 666.021 426.929 665.373 425.97 665.373 cv
425.022 665.373 424.519 666.021 424.519 667.377 cv
cp
423.451 667.364 mo
423.451 665.481 424.446 664.498 425.97 664.498 cv
427.505 664.498 428.5 665.481 428.5 667.364 cv
428.5 669.26 427.505 670.314 425.97 670.314 cv
424.446 670.314 423.451 669.26 423.451 667.364 cv
cp
f
430.95 668.023 mo
430.95 669.092 431.67 669.5 432.294 669.5 cv
433.121 669.5 433.805 668.828 433.805 667.364 cv
433.805 666.033 433.265 665.386 432.413 665.386 cv
431.622 665.386 430.95 665.973 430.95 667.004 cv
430.95 668.023 li
cp
430.95 672.605 mo
429.871 672.605 li
429.871 664.63 li
430.759 664.63 li
430.89 665.697 li
431.214 664.798 432.03 664.498 432.726 664.498 cv
434.081 664.498 434.908 665.481 434.908 667.269 cv
434.908 668.959 434.044 670.314 432.509 670.314 cv
431.657 670.314 431.142 669.919 430.95 669.439 cv
430.95 672.605 li
cp
f
436.986 667.377 mo
436.986 668.768 437.478 669.463 438.438 669.463 cv
439.409 669.463 439.9 668.768 439.9 667.377 cv
439.9 666.021 439.397 665.373 438.438 665.373 cv
437.489 665.373 436.986 666.021 436.986 667.377 cv
cp
435.919 667.364 mo
435.919 665.481 436.914 664.498 438.438 664.498 cv
439.973 664.498 440.968 665.481 440.968 667.364 cv
440.968 669.26 439.973 670.314 438.438 670.314 cv
436.914 670.314 435.919 669.26 435.919 667.364 cv
cp
f
445.444 665.721 mo
445.313 665.697 445.134 665.674 444.953 665.674 cv
444.174 665.674 443.418 666.285 443.418 667.364 cv
443.418 670.171 li
442.339 670.171 li
442.339 664.63 li
443.25 664.63 li
443.382 666.129 li
443.599 665.134 444.294 664.45 445.528 664.51 cv
445.444 665.721 li
cp
f
449.608 669.991 mo
449.249 670.207 448.781 670.314 448.266 670.314 cv
447.271 670.314 446.671 669.787 446.671 668.756 cv
446.671 665.494 li
445.867 665.494 li
445.867 664.63 li
446.671 664.63 li
446.671 663.455 li
447.762 663.322 li
447.762 664.63 li
449.405 664.63 li
449.405 665.494 li
447.75 665.494 li
447.75 668.539 li
447.75 669.14 448.026 669.391 448.481 669.391 cv
448.841 669.391 449.093 669.295 449.405 669.092 cv
449.608 669.991 li
cp
f
451.733 664.63 mo
451.733 670.171 li
450.654 670.171 li
450.654 664.63 li
451.733 664.63 li
cp
451.183 662.135 mo
451.603 662.135 451.938 662.424 451.938 662.855 cv
451.938 663.263 451.603 663.574 451.183 663.574 cv
450.798 663.574 450.463 663.263 450.463 662.855 cv
450.463 662.424 450.798 662.135 451.183 662.135 cv
cp
f
454.171 667.377 mo
454.171 668.768 454.662 669.463 455.622 669.463 cv
456.593 669.463 457.085 668.768 457.085 667.377 cv
457.085 666.021 456.581 665.373 455.622 665.373 cv
454.674 665.373 454.171 666.021 454.171 667.377 cv
cp
453.103 667.364 mo
453.103 665.481 454.099 664.498 455.622 664.498 cv
457.157 664.498 458.151 665.481 458.151 667.364 cv
458.151 669.26 457.157 670.314 455.622 670.314 cv
454.099 670.314 453.103 669.26 453.103 667.364 cv
cp
f
460.507 665.697 mo
460.806 664.869 461.441 664.498 462.281 664.498 cv
463.192 664.498 463.96 665.002 463.96 666.213 cv
463.96 670.171 li
462.881 670.171 li
462.881 666.537 li
462.881 665.854 462.569 665.434 461.909 665.434 cv
461.237 665.434 460.603 665.793 460.603 666.992 cv
460.603 670.171 li
459.522 670.171 li
459.522 664.63 li
460.374 664.63 li
460.507 665.697 li
cp
f
468.425 667.7 mo
466.938 667.664 466.29 668 466.29 668.695 cv
466.29 669.151 466.59 669.5 467.178 669.5 cv
467.753 669.5 468.425 669.151 468.425 668.504 cv
468.425 667.7 li
cp
469.517 668.863 mo
469.517 669.283 469.708 669.379 469.925 669.379 cv
470.056 669.379 470.152 669.355 470.236 669.319 cv
470.236 670.158 li
470.08 670.219 469.888 670.255 469.648 670.255 cv
469.013 670.255 468.604 669.991 468.509 669.367 cv
468.222 670.063 467.573 670.314 466.866 670.314 cv
465.895 670.314 465.211 669.764 465.211 668.815 cv
465.211 667.592 466.158 666.885 468.425 666.992 cv
468.425 666.309 li
468.425 665.625 468.017 665.361 467.43 665.361 cv
466.83 665.361 466.47 665.674 466.423 666.249 cv
465.391 666.094 li
465.475 664.918 466.507 664.498 467.525 664.498 cv
468.604 664.498 469.517 664.93 469.517 666.201 cv
469.517 668.863 li
cp
f
473.249 670.171 mo
472.962 670.242 472.771 670.268 472.578 670.268 cv
471.882 670.268 471.307 669.895 471.307 669.067 cv
471.307 662.159 li
472.386 662.159 li
472.386 668.84 li
472.386 669.188 472.59 669.332 472.878 669.332 cv
473.034 669.332 473.142 669.307 473.262 669.271 cv
473.249 670.171 li
cp
f
477.498 672.605 mo
477.498 662.147 li
478.422 662.147 li
478.422 672.605 li
477.498 672.605 li
cp
f
487.144 670.171 mo
484.925 667.064 li
484.373 667.064 li
484.373 670.171 li
483.271 670.171 li
483.271 663.107 li
484.373 663.107 li
484.373 666.105 li
484.961 666.105 li
487.024 663.107 li
488.319 663.107 li
485.86 666.537 li
488.499 670.171 li
487.144 670.171 li
cp
f
492.628 666.849 mo
492.64 666.765 492.64 666.693 492.64 666.621 cv
492.64 665.913 492.185 665.35 491.44 665.35 cv
490.649 665.35 490.146 665.889 490.038 666.849 cv
492.628 666.849 li
cp
492.712 668.564 mo
493.659 668.815 li
493.432 669.932 492.496 670.314 491.44 670.314 cv
489.966 670.314 488.97 669.295 488.97 667.448 cv
488.97 665.59 489.954 664.498 491.501 664.498 cv
492.928 664.498 493.695 665.481 493.695 666.861 cv
493.695 667.172 493.647 667.461 493.587 667.629 cv
490.014 667.629 li
490.062 668.707 490.565 669.463 491.501 669.463 cv
492.112 669.463 492.521 669.224 492.712 668.564 cv
cp
f
498.172 665.721 mo
498.04 665.697 497.86 665.674 497.681 665.674 cv
496.901 665.674 496.146 666.285 496.146 667.364 cv
496.146 670.171 li
495.065 670.171 li
495.065 664.63 li
495.978 664.63 li
496.108 666.129 li
496.325 665.134 497.021 664.45 498.256 664.51 cv
498.172 665.721 li
cp
f
500.321 665.697 mo
500.621 664.869 501.257 664.498 502.097 664.498 cv
503.008 664.498 503.775 665.002 503.775 666.213 cv
503.775 670.171 li
502.696 670.171 li
502.696 666.537 li
502.696 665.854 502.384 665.434 501.724 665.434 cv
501.053 665.434 500.417 665.793 500.417 666.992 cv
500.417 670.171 li
499.338 670.171 li
499.338 664.63 li
500.188 664.63 li
500.321 665.697 li
cp
f
506.524 664.63 mo
506.524 670.171 li
505.445 670.171 li
505.445 664.63 li
506.524 664.63 li
cp
505.974 662.135 mo
506.394 662.135 506.729 662.424 506.729 662.855 cv
506.729 663.263 506.394 663.574 505.974 663.574 cv
505.589 663.574 505.254 663.263 505.254 662.855 cv
505.254 662.424 505.589 662.135 505.974 662.135 cv
cp
f
509.237 665.697 mo
509.537 664.869 510.173 664.498 511.013 664.498 cv
511.924 664.498 512.691 665.002 512.691 666.213 cv
512.691 670.171 li
511.612 670.171 li
511.612 666.537 li
511.612 665.854 511.3 665.434 510.64 665.434 cv
509.969 665.434 509.333 665.793 509.333 666.992 cv
509.333 670.171 li
508.254 670.171 li
508.254 664.63 li
509.104 664.63 li
509.237 665.697 li
cp
f
516.245 667.616 mo
516.976 667.616 517.456 667.232 517.456 666.453 cv
517.456 665.674 516.976 665.277 516.245 665.289 cv
515.513 665.289 515.081 665.709 515.081 666.453 cv
515.081 667.148 515.501 667.616 516.245 667.616 cv
cp
516.137 671.934 mo
517.265 671.934 517.995 671.719 517.995 671.022 cv
517.995 670.603 517.768 670.291 517.06 670.291 cv
515.86 670.291 li
515.069 670.291 514.626 670.555 514.626 671.131 cv
514.626 671.719 515.261 671.934 516.137 671.934 cv
cp
517.852 664.941 mo
518.116 664.798 518.199 664.51 518.271 664.102 cv
519.207 664.426 li
519.123 664.953 518.739 665.313 518.283 665.422 cv
518.451 665.709 518.535 666.057 518.535 666.465 cv
518.535 667.748 517.504 668.384 516.257 668.384 cv
515.98 668.384 515.692 668.348 515.537 668.288 cv
515.261 668.432 515.165 668.623 515.165 668.863 cv
515.165 669.176 515.369 669.319 515.753 669.319 cv
517.108 669.319 li
518.367 669.319 519.039 669.871 519.039 670.867 cv
519.039 672.318 517.479 672.701 516.028 672.701 cv
514.806 672.701 513.606 672.39 513.606 671.25 cv
513.606 670.531 514.122 670.051 515.033 669.979 cv
514.529 669.919 514.266 669.559 514.266 669.115 cv
514.266 668.672 514.493 668.3 515.081 668.145 cv
514.409 667.844 514.002 667.28 514.002 666.465 cv
514.002 665.218 514.913 664.498 516.245 664.498 cv
516.904 664.498 517.444 664.643 517.852 664.941 cv
cp
f
521.032 668.611 mo
521.489 668.611 521.849 668.959 521.849 669.428 cv
521.849 669.883 521.489 670.242 521.032 670.242 cv
520.577 670.242 520.218 669.883 520.218 669.428 cv
520.218 668.959 520.577 668.611 521.032 668.611 cv
cp
521.032 664.618 mo
521.489 664.618 521.849 664.966 521.849 665.434 cv
521.849 665.889 521.489 666.249 521.032 666.249 cv
520.577 666.249 520.218 665.889 520.218 665.434 cv
520.218 664.966 520.577 664.618 521.032 664.618 cv
cp
f
527.093 666.645 mo
527.093 668.336 527.788 669.355 529.12 669.355 cv
530.451 669.355 531.135 668.336 531.135 666.645 cv
531.135 664.966 530.438 663.934 529.12 663.934 cv
527.788 663.934 527.093 664.966 527.093 666.645 cv
cp
525.93 666.645 mo
525.93 664.282 527.177 662.963 529.12 662.963 cv
531.063 662.963 532.298 664.282 532.298 666.645 cv
532.298 668.996 531.063 670.314 529.12 670.314 cv
527.177 670.314 525.93 668.996 525.93 666.645 cv
cp
f
534.772 668.023 mo
534.772 669.092 535.492 669.5 536.116 669.5 cv
536.943 669.5 537.627 668.828 537.627 667.364 cv
537.627 666.033 537.087 665.386 536.235 665.386 cv
535.444 665.386 534.772 665.973 534.772 667.004 cv
534.772 668.023 li
cp
534.772 672.605 mo
533.693 672.605 li
533.693 664.63 li
534.581 664.63 li
534.712 665.697 li
535.036 664.798 535.853 664.498 536.548 664.498 cv
537.903 664.498 538.73 665.481 538.73 667.269 cv
538.73 668.959 537.866 670.314 536.331 670.314 cv
535.479 670.314 534.964 669.919 534.772 669.439 cv
534.772 672.605 li
cp
f
543.099 669.991 mo
542.739 670.207 542.271 670.314 541.756 670.314 cv
540.761 670.314 540.161 669.787 540.161 668.756 cv
540.161 665.494 li
539.357 665.494 li
539.357 664.63 li
540.161 664.63 li
540.161 663.455 li
541.252 663.322 li
541.252 664.63 li
542.896 664.63 li
542.896 665.494 li
541.24 665.494 li
541.24 668.539 li
541.24 669.14 541.517 669.391 541.972 669.391 cv
542.331 669.391 542.583 669.295 542.896 669.092 cv
543.099 669.991 li
cp
f
545.224 664.63 mo
545.224 670.171 li
544.145 670.171 li
544.145 664.63 li
545.224 664.63 li
cp
544.673 662.135 mo
545.093 662.135 545.429 662.424 545.429 662.855 cv
545.429 663.263 545.093 663.574 544.673 663.574 cv
544.288 663.574 543.953 663.263 543.953 662.855 cv
543.953 662.424 544.288 662.135 544.673 662.135 cv
cp
f
551.21 668.768 mo
551.019 669.883 550.132 670.314 549.04 670.314 cv
547.589 670.314 546.593 669.283 546.593 667.437 cv
546.593 665.59 547.589 664.498 549.124 664.498 cv
550.299 664.498 551.066 665.121 551.139 666.225 cv
550.155 666.43 li
550.06 665.733 549.688 665.386 549.075 665.386 cv
548.128 665.386 547.637 666.225 547.637 667.437 cv
547.637 668.611 548.212 669.451 549.124 669.451 cv
549.712 669.451 550.106 669.176 550.274 668.539 cv
551.21 668.768 li
cp
f
555.243 667.7 mo
553.757 667.664 553.108 668 553.108 668.695 cv
553.108 669.151 553.408 669.5 553.996 669.5 cv
554.571 669.5 555.243 669.151 555.243 668.504 cv
555.243 667.7 li
cp
556.335 668.863 mo
556.335 669.283 556.526 669.379 556.743 669.379 cv
556.874 669.379 556.971 669.355 557.055 669.319 cv
557.055 670.158 li
556.898 670.219 556.706 670.255 556.467 670.255 cv
555.831 670.255 555.423 669.991 555.327 669.367 cv
555.04 670.063 554.392 670.314 553.685 670.314 cv
552.713 670.314 552.029 669.764 552.029 668.815 cv
552.029 667.592 552.977 666.885 555.243 666.992 cv
555.243 666.309 li
555.243 665.625 554.835 665.361 554.248 665.361 cv
553.648 665.361 553.288 665.674 553.241 666.249 cv
552.209 666.094 li
552.293 664.918 553.325 664.498 554.344 664.498 cv
555.423 664.498 556.335 664.93 556.335 666.201 cv
556.335 668.863 li
cp
f
560.067 670.171 mo
559.78 670.242 559.589 670.268 559.396 670.268 cv
558.7 670.268 558.125 669.895 558.125 669.067 cv
558.125 662.159 li
559.204 662.159 li
559.204 668.84 li
559.204 669.188 559.408 669.332 559.696 669.332 cv
559.853 669.332 559.96 669.307 560.08 669.271 cv
560.067 670.171 li
cp
f
564.316 672.605 mo
564.316 662.147 li
565.24 662.147 li
565.24 672.605 li
564.316 672.605 li
cp
f
571.264 670.171 mo
571.264 664.066 li
569.213 664.066 li
569.213 663.107 li
574.442 663.107 li
574.442 664.066 li
572.379 664.066 li
572.379 670.171 li
571.264 670.171 li
cp
f
578.294 665.721 mo
578.163 665.697 577.983 665.674 577.803 665.674 cv
577.023 665.674 576.268 666.285 576.268 667.364 cv
576.268 670.171 li
575.188 670.171 li
575.188 664.63 li
576.1 664.63 li
576.231 666.129 li
576.448 665.134 577.144 664.45 578.378 664.51 cv
578.294 665.721 li
cp
f
582.11 667.7 mo
580.624 667.664 579.976 668 579.976 668.695 cv
579.976 669.151 580.275 669.5 580.863 669.5 cv
581.438 669.5 582.11 669.151 582.11 668.504 cv
582.11 667.7 li
cp
583.202 668.863 mo
583.202 669.283 583.394 669.379 583.61 669.379 cv
583.741 669.379 583.838 669.355 583.922 669.319 cv
583.922 670.158 li
583.766 670.219 583.573 670.255 583.334 670.255 cv
582.698 670.255 582.29 669.991 582.194 669.367 cv
581.907 670.063 581.259 670.314 580.552 670.314 cv
579.58 670.314 578.896 669.764 578.896 668.815 cv
578.896 667.592 579.844 666.885 582.11 666.992 cv
582.11 666.309 li
582.11 665.625 581.702 665.361 581.115 665.361 cv
580.516 665.361 580.155 665.674 580.108 666.249 cv
579.076 666.094 li
579.16 664.918 580.192 664.498 581.211 664.498 cv
582.29 664.498 583.202 664.93 583.202 666.201 cv
583.202 668.863 li
cp
f
589.321 668.768 mo
589.13 669.883 588.243 670.314 587.151 670.314 cv
585.7 670.314 584.704 669.283 584.704 667.437 cv
584.704 665.59 585.7 664.498 587.235 664.498 cv
588.41 664.498 589.178 665.121 589.25 666.225 cv
588.267 666.43 li
588.171 665.733 587.799 665.386 587.187 665.386 cv
586.239 665.386 585.748 666.225 585.748 667.437 cv
585.748 668.611 586.323 669.451 587.235 669.451 cv
587.823 669.451 588.218 669.176 588.386 668.539 cv
589.321 668.768 li
cp
f
595.237 670.171 mo
593.906 670.171 li
591.976 667.688 li
591.64 667.688 li
591.64 670.171 li
590.561 670.171 li
590.561 662.159 li
591.64 662.159 li
591.64 666.849 li
591.915 666.849 li
593.751 664.63 li
595.058 664.63 li
592.827 667.209 li
595.237 670.171 li
cp
f
597.255 664.63 mo
597.255 670.171 li
596.176 670.171 li
596.176 664.63 li
597.255 664.63 li
cp
596.704 662.135 mo
597.124 662.135 597.46 662.424 597.46 662.855 cv
597.46 663.263 597.124 663.574 596.704 663.574 cv
596.319 663.574 595.984 663.263 595.984 662.855 cv
595.984 662.424 596.319 662.135 596.704 662.135 cv
cp
f
599.968 665.697 mo
600.268 664.869 600.903 664.498 601.743 664.498 cv
602.654 664.498 603.422 665.002 603.422 666.213 cv
603.422 670.171 li
602.343 670.171 li
602.343 666.537 li
602.343 665.854 602.03 665.434 601.37 665.434 cv
600.699 665.434 600.063 665.793 600.063 666.992 cv
600.063 670.171 li
598.984 670.171 li
598.984 664.63 li
599.835 664.63 li
599.968 665.697 li
cp
f
606.976 667.616 mo
607.706 667.616 608.187 667.232 608.187 666.453 cv
608.187 665.674 607.706 665.277 606.976 665.289 cv
606.243 665.289 605.812 665.709 605.812 666.453 cv
605.812 667.148 606.231 667.616 606.976 667.616 cv
cp
606.867 671.934 mo
607.995 671.934 608.726 671.719 608.726 671.022 cv
608.726 670.603 608.498 670.291 607.79 670.291 cv
606.591 670.291 li
605.8 670.291 605.356 670.555 605.356 671.131 cv
605.356 671.719 605.991 671.934 606.867 671.934 cv
cp
608.582 664.941 mo
608.847 664.798 608.93 664.51 609.002 664.102 cv
609.938 664.426 li
609.854 664.953 609.47 665.313 609.014 665.422 cv
609.182 665.709 609.266 666.057 609.266 666.465 cv
609.266 667.748 608.234 668.384 606.987 668.384 cv
606.711 668.384 606.423 668.348 606.268 668.288 cv
605.991 668.432 605.896 668.623 605.896 668.863 cv
605.896 669.176 606.1 669.319 606.483 669.319 cv
607.839 669.319 li
609.098 669.319 609.77 669.871 609.77 670.867 cv
609.77 672.318 608.21 672.701 606.759 672.701 cv
605.536 672.701 604.337 672.39 604.337 671.25 cv
604.337 670.531 604.853 670.051 605.764 669.979 cv
605.26 669.919 604.996 669.559 604.996 669.115 cv
604.996 668.672 605.224 668.3 605.812 668.145 cv
605.14 667.844 604.732 667.28 604.732 666.465 cv
604.732 665.218 605.644 664.498 606.976 664.498 cv
607.635 664.498 608.175 664.643 608.582 664.941 cv
cp
f
611.763 668.611 mo
612.22 668.611 612.579 668.959 612.579 669.428 cv
612.579 669.883 612.22 670.242 611.763 670.242 cv
611.308 670.242 610.948 669.883 610.948 669.428 cv
610.948 668.959 611.308 668.611 611.763 668.611 cv
cp
611.763 664.618 mo
612.22 664.618 612.579 664.966 612.579 665.434 cv
612.579 665.889 612.22 666.249 611.763 666.249 cv
611.308 666.249 610.948 665.889 610.948 665.434 cv
610.948 664.966 611.308 664.618 611.763 664.618 cv
cp
f
616.948 666.633 mo
619.706 666.633 li
619.706 667.545 li
616.948 667.545 li
616.948 666.633 li
cp
f
625.514 670.171 mo
620.944 670.171 li
620.944 669.319 li
622.863 667.771 624.29 666.717 624.29 665.182 cv
624.29 664.318 623.823 663.862 623.067 663.862 cv
622.323 663.862 621.903 664.318 621.903 664.978 cv
621.903 665.434 622.167 665.842 622.503 666.117 cv
621.604 666.561 li
621.28 666.309 620.849 665.721 620.849 664.966 cv
620.849 663.959 621.544 662.963 623.103 662.963 cv
624.386 662.963 625.405 663.61 625.405 665.146 cv
625.405 667.172 623.391 668.539 622.239 669.164 cv
622.239 669.211 li
625.514 669.211 li
625.514 670.171 li
cp
f
289.253 682.436 mo
288.809 683.06 288.233 683.359 287.346 683.359 cv
286.11 683.359 285.163 682.592 285.163 681.033 cv
285.163 679.545 286.11 678.706 287.442 678.706 cv
288.377 678.706 288.905 679.066 289.253 679.785 cv
288.425 680.241 li
288.246 679.75 287.921 679.498 287.406 679.498 cv
286.626 679.498 286.123 680.037 286.123 681.033 cv
286.123 681.992 286.59 682.557 287.43 682.557 cv
287.934 682.557 288.246 682.352 288.545 681.896 cv
289.253 682.436 li
cp
287.358 684.367 mo
289.181 684.367 290.668 682.988 290.668 681.045 cv
290.668 679.102 289.181 677.711 287.358 677.711 cv
285.535 677.711 284.048 679.102 284.048 681.045 cv
284.048 682.988 285.535 684.367 287.358 684.367 cv
cp
287.346 677.363 mo
289.373 677.363 291.028 678.91 291.028 681.045 cv
291.028 683.18 289.373 684.715 287.346 684.715 cv
285.319 684.715 283.676 683.18 283.676 681.045 cv
283.676 678.91 285.319 677.363 287.346 677.363 cv
cp
f
295.507 683.035 mo
295.591 683.672 296.047 683.947 296.707 683.947 cv
297.342 683.947 297.81 683.707 297.81 683.203 cv
297.81 682.748 297.606 682.496 296.947 682.328 cv
296.131 682.137 li
295.124 681.896 294.74 681.381 294.74 680.564 cv
294.74 679.318 295.771 678.898 296.827 678.898 cv
297.99 678.898 298.709 679.318 298.817 680.396 cv
297.762 680.518 li
297.726 679.965 297.391 679.713 296.755 679.713 cv
296.143 679.713 295.783 679.989 295.783 680.457 cv
295.783 680.854 295.939 681.104 296.539 681.236 cv
297.307 681.416 li
298.29 681.656 298.842 682.112 298.842 683.084 cv
298.842 684.271 297.906 684.715 296.695 684.715 cv
295.436 684.715 294.704 684.331 294.548 683.324 cv
295.507 683.035 li
cp
f
303.114 684.391 mo
302.754 684.607 302.286 684.715 301.771 684.715 cv
300.775 684.715 300.175 684.188 300.175 683.156 cv
300.175 679.894 li
299.372 679.894 li
299.372 679.029 li
300.175 679.029 li
300.175 677.854 li
301.267 677.723 li
301.267 679.029 li
302.91 679.029 li
302.91 679.894 li
301.255 679.894 li
301.255 682.939 li
301.255 683.539 301.531 683.791 301.986 683.791 cv
302.346 683.791 302.598 683.695 302.91 683.491 cv
303.114 684.391 li
cp
f
303.392 679.029 mo
304.567 679.029 li
305.527 682.076 li
305.851 683.119 305.958 683.84 305.958 683.84 cv
306.006 683.84 li
306.006 683.84 306.09 683.131 306.414 682.076 cv
307.338 679.029 li
308.477 679.029 li
306.582 684.57 li
305.323 684.57 li
303.392 679.029 li
cp
f
311.262 682.016 mo
311.994 682.016 312.474 681.633 312.474 680.854 cv
312.474 680.073 311.994 679.678 311.262 679.689 cv
310.53 679.689 310.099 680.109 310.099 680.854 cv
310.099 681.549 310.519 682.016 311.262 682.016 cv
cp
311.154 686.334 mo
312.282 686.334 313.013 686.118 313.013 685.422 cv
313.013 685.002 312.785 684.691 312.078 684.691 cv
310.878 684.691 li
310.087 684.691 309.643 684.955 309.643 685.53 cv
309.643 686.118 310.279 686.334 311.154 686.334 cv
cp
312.869 679.342 mo
313.133 679.197 313.217 678.91 313.289 678.502 cv
314.225 678.826 li
314.141 679.354 313.757 679.713 313.301 679.821 cv
313.469 680.109 313.553 680.457 313.553 680.865 cv
313.553 682.148 312.521 682.783 311.274 682.783 cv
310.998 682.783 310.71 682.748 310.555 682.688 cv
310.279 682.832 310.183 683.023 310.183 683.264 cv
310.183 683.575 310.387 683.719 310.771 683.719 cv
312.125 683.719 li
313.385 683.719 314.057 684.271 314.057 685.267 cv
314.057 686.718 312.498 687.102 311.046 687.102 cv
309.823 687.102 308.624 686.789 308.624 685.65 cv
308.624 684.931 309.139 684.451 310.051 684.379 cv
309.547 684.318 309.283 683.959 309.283 683.516 cv
309.283 683.072 309.511 682.699 310.099 682.544 cv
309.427 682.244 309.02 681.68 309.02 680.865 cv
309.02 679.617 309.931 678.898 311.262 678.898 cv
311.922 678.898 312.461 679.042 312.869 679.342 cv
cp
f
315.955 683.012 mo
316.411 683.012 316.771 683.359 316.771 683.827 cv
316.771 684.283 316.411 684.643 315.955 684.643 cv
315.499 684.643 315.139 684.283 315.139 683.827 cv
315.139 683.359 315.499 683.012 315.955 683.012 cv
cp
f
322.673 683.168 mo
322.481 684.283 321.594 684.715 320.502 684.715 cv
319.051 684.715 318.056 683.684 318.056 681.836 cv
318.056 679.989 319.051 678.898 320.586 678.898 cv
321.761 678.898 322.529 679.521 322.601 680.625 cv
321.618 680.828 li
321.521 680.133 321.15 679.785 320.538 679.785 cv
319.591 679.785 319.099 680.625 319.099 681.836 cv
319.099 683.012 319.675 683.852 320.586 683.852 cv
321.174 683.852 321.569 683.575 321.737 682.939 cv
322.673 683.168 li
cp
f
324.991 680.086 mo
325.255 679.293 325.83 678.898 326.67 678.898 cv
327.582 678.898 328.349 679.402 328.349 680.613 cv
328.349 684.57 li
327.27 684.57 li
327.27 680.925 li
327.27 680.254 326.958 679.834 326.298 679.834 cv
325.626 679.834 324.991 680.182 324.991 681.393 cv
324.991 684.57 li
323.911 684.57 li
323.911 676.559 li
324.991 676.559 li
324.991 680.086 li
cp
f
331.976 679.894 mo
331.976 679.029 li
332.779 679.029 li
332.779 678.406 li
332.779 676.955 333.703 676.475 334.686 676.475 cv
335.13 676.475 335.514 676.571 335.837 676.703 cv
335.633 677.627 li
335.346 677.471 335.106 677.387 334.746 677.387 cv
334.194 677.387 333.871 677.662 333.871 678.454 cv
333.871 679.029 li
335.286 679.029 li
335.286 679.894 li
333.871 679.894 li
333.871 684.57 li
332.779 684.57 li
332.779 679.894 li
331.976 679.894 li
cp
f
336.787 681.776 mo
336.787 683.168 337.278 683.863 338.238 683.863 cv
339.209 683.863 339.701 683.168 339.701 681.776 cv
339.701 680.421 339.197 679.773 338.238 679.773 cv
337.29 679.773 336.787 680.421 336.787 681.776 cv
cp
335.719 681.764 mo
335.719 679.881 336.714 678.898 338.238 678.898 cv
339.773 678.898 340.768 679.881 340.768 681.764 cv
340.768 683.659 339.773 684.715 338.238 684.715 cv
336.714 684.715 335.719 683.659 335.719 681.764 cv
cp
f
345.245 680.121 mo
345.113 680.098 344.934 680.073 344.753 680.073 cv
343.974 680.073 343.218 680.686 343.218 681.764 cv
343.218 684.57 li
342.139 684.57 li
342.139 679.029 li
343.05 679.029 li
343.182 680.529 li
343.398 679.533 344.094 678.85 345.329 678.91 cv
345.245 680.121 li
cp
f
350.934 684.57 mo
350.646 684.643 350.454 684.666 350.263 684.666 cv
349.566 684.666 348.991 684.295 348.991 683.467 cv
348.991 676.559 li
350.07 676.559 li
350.07 683.24 li
350.07 683.588 350.274 683.731 350.562 683.731 cv
350.718 683.731 350.825 683.707 350.946 683.672 cv
350.934 684.57 li
cp
f
354.989 682.1 mo
353.502 682.064 352.854 682.4 352.854 683.096 cv
352.854 683.551 353.154 683.898 353.741 683.898 cv
354.317 683.898 354.989 683.551 354.989 682.904 cv
354.989 682.1 li
cp
356.081 683.264 mo
356.081 683.684 356.272 683.779 356.488 683.779 cv
356.62 683.779 356.716 683.756 356.8 683.719 cv
356.8 684.559 li
356.644 684.619 356.452 684.654 356.212 684.654 cv
355.577 684.654 355.169 684.391 355.073 683.768 cv
354.785 684.463 354.138 684.715 353.43 684.715 cv
352.458 684.715 351.774 684.163 351.774 683.215 cv
351.774 681.992 352.722 681.285 354.989 681.393 cv
354.989 680.709 li
354.989 680.025 354.581 679.762 353.993 679.762 cv
353.394 679.762 353.034 680.073 352.986 680.648 cv
351.954 680.493 li
352.038 679.318 353.07 678.898 354.089 678.898 cv
355.169 678.898 356.081 679.33 356.081 680.602 cv
356.081 683.264 li
cp
f
358.362 683.035 mo
358.446 683.672 358.902 683.947 359.562 683.947 cv
360.197 683.947 360.665 683.707 360.665 683.203 cv
360.665 682.748 360.462 682.496 359.802 682.328 cv
358.985 682.137 li
357.979 681.896 357.595 681.381 357.595 680.564 cv
357.595 679.318 358.626 678.898 359.682 678.898 cv
360.845 678.898 361.564 679.318 361.673 680.396 cv
360.617 680.518 li
360.581 679.965 360.245 679.713 359.61 679.713 cv
358.998 679.713 358.638 679.989 358.638 680.457 cv
358.638 680.854 358.794 681.104 359.394 681.236 cv
360.161 681.416 li
361.146 681.656 361.696 682.112 361.696 683.084 cv
361.696 684.271 360.761 684.715 359.55 684.715 cv
358.29 684.715 357.559 684.331 357.403 683.324 cv
358.362 683.035 li
cp
f
365.969 684.391 mo
365.608 684.607 365.142 684.715 364.626 684.715 cv
363.63 684.715 363.03 684.188 363.03 683.156 cv
363.03 679.894 li
362.228 679.894 li
362.228 679.029 li
363.03 679.029 li
363.03 677.854 li
364.122 677.723 li
364.122 679.029 li
365.765 679.029 li
365.765 679.894 li
364.11 679.894 li
364.11 682.939 li
364.11 683.539 364.386 683.791 364.841 683.791 cv
365.201 683.791 365.453 683.695 365.765 683.491 cv
365.969 684.391 li
cp
f
368.105 683.012 mo
368.562 683.012 368.921 683.359 368.921 683.827 cv
368.921 684.283 368.562 684.643 368.105 684.643 cv
367.649 684.643 367.29 684.283 367.29 683.827 cv
367.29 683.359 367.649 683.012 368.105 683.012 cv
cp
f
369.991 679.894 mo
369.991 679.029 li
370.795 679.029 li
370.795 678.406 li
370.795 676.955 371.718 676.475 372.702 676.475 cv
373.146 676.475 373.529 676.571 373.853 676.703 cv
373.649 677.627 li
373.361 677.471 373.122 677.387 372.762 677.387 cv
372.21 677.387 371.886 677.662 371.886 678.454 cv
371.886 679.029 li
373.302 679.029 li
373.302 679.894 li
371.886 679.894 li
371.886 684.57 li
370.795 684.57 li
370.795 679.894 li
369.991 679.894 li
cp
f
380.055 678.898 mo
380.99 678.898 381.698 679.402 381.698 680.564 cv
381.698 684.57 li
380.618 684.57 li
380.618 680.925 li
380.618 680.241 380.318 679.834 379.694 679.834 cv
379.06 679.834 378.436 680.277 378.436 681.393 cv
378.436 684.57 li
377.356 684.57 li
377.356 680.925 li
377.356 680.241 377.056 679.834 376.433 679.834 cv
375.81 679.834 375.173 680.289 375.173 681.393 cv
375.173 684.57 li
374.094 684.57 li
374.094 679.029 li
374.945 679.029 li
375.077 680.098 li
375.365 679.246 376.049 678.898 376.805 678.898 cv
377.597 678.898 378.172 679.246 378.315 680.121 cv
378.591 679.234 379.312 678.898 380.055 678.898 cv
cp
f
383.19 685.938 mo
383.19 685.422 li
383.778 685.338 384.162 685.074 384.162 684.535 cv
383.671 684.631 383.298 684.331 383.298 683.863 cv
383.298 683.383 383.634 683.119 384.103 683.119 cv
384.594 683.119 385.014 683.516 385.014 684.175 cv
385.014 685.362 384.294 685.878 383.19 685.938 cv
cp
f
393.544 684.57 mo
388.975 684.57 li
388.975 683.719 li
390.894 682.172 392.321 681.117 392.321 679.582 cv
392.321 678.719 391.853 678.262 391.097 678.262 cv
390.354 678.262 389.935 678.719 389.935 679.377 cv
389.935 679.834 390.198 680.241 390.534 680.518 cv
389.634 680.961 li
389.31 680.709 388.878 680.121 388.878 679.365 cv
388.878 678.358 389.574 677.363 391.134 677.363 cv
392.417 677.363 393.437 678.01 393.437 679.545 cv
393.437 681.572 391.421 682.939 390.27 683.563 cv
390.27 683.611 li
393.544 683.611 li
393.544 684.57 li
cp
f
395.706 681.068 mo
395.706 682.628 396.329 683.815 397.385 683.815 cv
398.44 683.815 399.075 682.628 399.075 681.068 cv
399.075 679.474 398.44 678.322 397.385 678.322 cv
396.329 678.322 395.706 679.474 395.706 681.068 cv
cp
394.614 681.045 mo
394.614 679.029 395.657 677.363 397.396 677.363 cv
399.136 677.363 400.179 679.029 400.179 681.045 cv
400.179 683.168 399.196 684.715 397.396 684.715 cv
395.598 684.715 394.614 683.168 394.614 681.045 cv
cp
f
402.546 681.068 mo
402.546 682.628 403.169 683.815 404.225 683.815 cv
405.28 683.815 405.915 682.628 405.915 681.068 cv
405.915 679.474 405.28 678.322 404.225 678.322 cv
403.169 678.322 402.546 679.474 402.546 681.068 cv
cp
401.454 681.045 mo
401.454 679.029 402.497 677.363 404.236 677.363 cv
405.976 677.363 407.019 679.029 407.019 681.045 cv
407.019 683.168 406.036 684.715 404.236 684.715 cv
402.438 684.715 401.454 683.168 401.454 681.045 cv
cp
f
409.409 679.306 mo
409.409 680.17 409.925 680.541 410.62 680.541 cv
411.316 680.541 411.832 680.17 411.832 679.306 cv
411.832 678.622 411.412 678.154 410.62 678.154 cv
409.829 678.154 409.409 678.622 409.409 679.306 cv
cp
409.253 682.64 mo
409.253 683.42 409.769 683.911 410.62 683.911 cv
411.472 683.911 411.976 683.42 411.976 682.64 cv
411.976 681.813 411.364 681.393 410.62 681.393 cv
409.877 681.393 409.253 681.813 409.253 682.64 cv
cp
408.187 682.783 mo
408.187 681.872 408.737 681.261 409.517 681.009 cv
409.517 680.949 li
408.678 680.686 408.33 680.061 408.33 679.281 cv
408.33 678.131 409.241 677.363 410.62 677.363 cv
411.987 677.363 412.911 678.131 412.911 679.281 cv
412.911 680.061 412.563 680.686 411.712 680.949 cv
411.712 681.009 li
412.503 681.261 413.056 681.872 413.056 682.783 cv
413.056 683.971 412.108 684.715 410.62 684.715 cv
409.134 684.715 408.187 683.971 408.187 682.783 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 13.0.2%%For: (Sebastian Pietsch) ()%%Title: (lastfm_Logo.eps)%%CreationDate: 7/25/08 5:11 PM%AI9_DataStream%Gb!Q;kB?F-[e=nIgd;@@pKdsS(t1jU$%un_kQ]Vllhi`or^jE3`n89BhQcf=@uZa4_*XTZRT5f;XOZ="j*Egp:[u]E68'sPn&=R6%HXDA2hi$+P<b\u+H%jr[)qfg<05TjWq>B(LB^N5'!`&M*Qd+R]#/Kthc02[3eqXmO),^9Z@^Fk:qp5_b*/kX_/XGpUPOg(hDWoX/%nD^o;i+MIre?$A+9W?AHqORFAZQ:]ZA#][G9T:hYn9>HcpqP5F<U+N'`.?d9@,OGHS`:4f5%XaMHrd31I".doL\YQ<2)9U3W7?&O%3)F:+hOrK_IIXfe2Kp;%(];C`#@sU<DPu+KnTY*g*f&#'FLtl]ILl4h$\!*+d3m-S3)3;"c)JHF0875U^-6B,1M44pq1rGb7N\Z%%rrFndGau3-+;f?C3eIp3fBZt==,oq2Y-7!nAu8ZWaE182N2\+*QZFh@EWEZ/5lWjTT1jmkJ=]XDYc=2S&MaEHk?oB[**;sP587?N%(Ge<r9<E!!#,9l;%X;f-T>Lcpo(d)ST>U[1VXF'O?^r0mlQtb<]f6+--n%E[iLT0GFq1`@f\:*W2rL^E";\75c_pAWa9`!1jdc?4%7F0$0iqcq6!TjWUN%MjB5C!$sTc,WCE1kc5S"-YM7"O[EiNO&s@+=7`SCjq$aoGkui]o?O5]2mW.J)p(4*gtBIbZ\W5_"95Cd;d?%N1`ts#C7$X/hN.B;2X3M\!co"UG?6;c&d6#%1Y0:psaW&2nlMg0n6nkhZ0;2kC6@QB=>X(CR"4i7RI3F^(c>eeE?nHb^RA+<^"_=%eEr9r,KM5."fIFYfh61g=e=liHup^!r>9qig](oF;*nVl(Y9(nY=E%@#Y+rrnfKdtBIu@KGkdodHXa3acDU;B4.D;L"qZ'/*f5/c%a'_0QBo;dOqXa?_!jVZ92;BbGq\:K<]MD-%qCj!CWTl_F"1>_r)aR2K,NH$<I@=F@74gH&*g,V]#4(ePF$O[*\q\BbRBOXr6]aKQ%Ctu,#clp/'B7hdia?@a<e?Z)>N0f1iJ:9eVT=]d=#KSR&B9ss%q<Zn9pDXr=^?Mt-j_a#5?O/D_TIW/&ZNP1&Sm-.4?DB_k67Tl#%@.iHf4EQQ9p5d%IHEjF8eN*-We>\;bV5SF=^2F%$X/JdR.&T+O6cVjc+7Mc9r:0qRqYS8';L&$(3aThadoJm@>ukaBZ83I,X'Y.#%=R[sf&BoqTn)bT_K-g"L'I'8.<(Y%QOJKST.RGSD<$hH)aJl@i31's,n_&(C#Lq[oV/eVa7uZHCDZ1aT1$D0tTg\&pXeuG](`W`0%mC3&d2crfLf6d_30qeOYrS-^dYudm?o#7gRN5nC1&DD'CM]E$ljMe>Alkdl9cI5;\mH,O)2#qC;Hj%:oHNjmp(iSRqjs)PVa_8#V%R8:[bCGIQqnZ[;<%"No%6-ptB&PVS'$^?j(g!<a?-!JSM*N2'P!a(lLAjDDa7PKd2T%dJ'r!*Mk7-=nHrmtnq#*5n%f?j-JnNa@D%gG,-<YT3MW>s+g1?E;Ii^)YT9bFTCI:J]r1_`q@k^BWM?s8CQ"hM6[Y=$c9t$G'pIf3ikd[=t7A-/,JPkr:=CgX,Luc^j`@9dsJo%E\glq@jRX*[="-F5!#n+*+ba;"`jd_!CHGi1l9uYj0sKco)Fjd:0C=?Rf@ah>Z+/ss5p?\Rh^?ng`JGT5GdZF9i`h;Qf?-'VTM@'%ccKU/5CcTKFQl'0P`"KCf*ajeIh4(/(US9Kq>3D/)ulDX@)&4mrnD:p0As<"*R8_n/N),t24r0YB\0fV^XilUII;X_eti;:Nt4#m%F(-*fH`+f!akrK:5>%gFcbFlhIW+_Qf_nI*;>GE3jd^cl9k1[nJ7'a#9b,BB\<:!#J*0&3o-9H#h&PYkKoV/lmB.NjW.-`4/*\f*%K1P48F9I(bLM"cuX=02`?=WWhcN5tq+'1,Na\eDV%@1up?d9TLkd]]-4bfZoQP*$[WP]+1C&,I*I1W=:ATDZZUC@t(?e";DTjNP,%j^:4aWfZ-hUZHn#1>9NWo3X.-2$J[#YI7pn^9K[>QLd!,EhNDSORIN(l)+KT?8d:1oG6k#mH)*%l?[rQ2[`62%d2#lXY4b2a2*=Q%)8^G:FFJjgp,Yqq&+1#EW;Z(qc%PeQGRGYKrF-5AG<jKtPhG>U:#1hfcAT`\(,V-AhWORC]op!.02=e48\eTDAd<XdhJWWaG";Q4%''A5@rHY%%AsZGb3m#%dj`(I"gU_XIhe[U7\+FCpj!M%oQHkDB.%OnH#/ojS3M%;s_te>%puf;)-O%"XSGZbX4V"@=951^q/_sDl%G[\dre1s0HJ8XqId9m:RClb0Gg&5tr0Kqp<#_#GGiu6->i2EPD5]T=5H;'=%$$rk+C^q8B0;UF,W^:De\l%Lg*QJ937%e-N`^&OB%HE_Inc451O&`e.E"#OCTDcRRWq0UBIUI*p'gEAifb&*<o[p<rt7_'Y&;&.#[^80\uPW$<CZJ7VK2e(ha-PKlD8O,L0+9(-D$g?fX%CrGEo("isTU/=3B@^?:)YQnOn'77UtLeWGC!8olt!''lEn_RG0DTu"?#;u]3=I+DI5/AU&/3EYB[/+b8\bUP&FKNtA%CcUa*.0=?%*9glqR8Yq\[3PuO!Srs*cheu`_W=cMQ\8mj1VK9qU.d$Y#FnYT+8'ZSpC)ARV:^U\$jR$7H:7SW>U^gHKSk_DW'K.I0"&st[d(-Y%Tirh;mO8]mdE(?313&OSgg1H"N`$M*M_Kg]8Pui<2m/N6kE\MBbleY4&jo5H$=?]\R'XMEfjRoc0JU;:2gf5'?q'%J/oVoFo4p(k%"YmuZ68"<4;i,518$qi%_&bE4_[YUiFf!XK&;nVBIAjqmPGJWr:nn9M/MA`>Cfih/emf7ca`coZ\t#r2"+%4RDD$0mL[c0g7q/]6%U9OGb79j.ZQN0Gp<r>tnB>!e%L(EMHmA?t#XRW%Gg[dI]8%0;-^8K=\4!=Nm=r;!1^m>j>2fk?`04RHc?hS;MgrnS2CAkF[qut&O%Y^V/Y1SP;HQ!J'p?3YcON3+BLaE,((HN?LNI_j>nqV"BIs(m]K>7`g.!1g$T[6R,6I81%=ouh`B^@oEJ29Q@EpAFkH:rAX;#50jI%?KNA_>/(JPQ36ceIpf8YKFShn`j4rlUD]jcZR2XLI(JJ:@`DtK"$1o7'Q5<<2=pdiEP6m6-T:5a"u.!;4JM"CA_&@82&52![FoOW%>S#u?]i*=SaF+%l!)q:pq49rS#(\(<;F=QIWK\*'KHW9U`a[6FMq^Oa^mT08>`Ni4^D*+<J_fL3DhG<PoQ3mkVTISoQ6Q\OZ,/Q&%#6IA+*`pkSh/GfEWPH%pTnt-]2dHr0AEPXrKKQ9*pRpTL.9_Z\F*^47pe_>g:Vl3f16FQ.b3SEKon$c#q.>m6&`(`9YGhKS$uO?E%%h;Y[D8Kmh+9]KS:LujrfPJ<iDhl+F/u6#dS'_pD_^J%r^[qg!/\o61lt-MLmY/j3*E#!2c+05XJs>$*R<F>22F,Chfsq"BI\-u\%n5<d<nb;bTINO%NIOf<pmJ-Ud#ZrsHaTT6Z=GS]5kgOie7GXk%dX9Z%#;&U"XXdTF31X6t6IW>'9<'QJI:>CEmGE<aFOI&n`TsL:%_%R4<^\!4>I2r()UoP'R3^"OD_m(S<LoJA`((^.UVKg%bh8f7MQX-GIL\#9We0o[ZVs/4c*q<(W`;DbZ,&B19oP1?&\.-IL';RPI%n"^H3:D`bIX;5W[amZK.oe80lI@;BPGi"nacViY"Bo.Zk3u%)Kbo`JN)s,C!XHp(JU^-"j$[(Kl"keljp9p6SY\9)n+Z5ji["qjq%+'9:fdV\jNAUN/<:%6gZ1%TUZ([UAOLljL.Maq7Q-IWJJH(X:pHQ2IDDF\6W))Z:@r4HH<X(KW'cl.k(.W+[q?lgUahQe:Zo6c<<%R+AAqiuaT$3M+ULaTQ`C72oCS/3Fg[(@\fD3B>4-R$!pLqnQ"Rhtj$l00@1?g6g_hS%jtc^8fpRqMk#aG32h>IGmXSNibhJQ2/*)%[ej-5mrQ8$^7VniHB`E<(EqtP`t=Hi2ZVV1HHP,e43!t>_EItclR][fX;2.MqF`>N#49&]T#a;Vc(lZLh1KjlI/5ZsIq$k_7iLF6%ODCfZU2H`A/XTAaB@=RAq=HOmjYc*t'OM]*<`V$rj1N:_eJ&;d+JL+2jphhjn\GGne-g#cdQ3,d)%ZT"*$lirDinWea#$RoP's2`%=5/u@U>'^UUX>mV7Du(lCd62=89k((d6fF0-5cAV`4bLcTFmbY'@>hHE#RR`YS#t_T6\sHnVpW[XF8=QlhGou=H3)1',,_1QQ-G+%Dn'^f0*b/(<ZN\;n.IITc?Jea2`+NKEDO4?bqQKa)g@J&:3-O3['1`Gr%u/%o,jSf4BZBrA7B"g!X;-kIXbqAiPl7)GH2]abaWVu%@3"GIhOGG-a?E`)_q%jH`u9RN1SLa#0SkL"LKCRC4WLZ'-K$G9&#Y+pdHXY3<M2@k`'L4oG/i78Wum01%e;.<7NrE.7n<\PLWO#F%2o2))XY)WW?eEgo0Tm*=m>m&r?nQgjAb.A;46o9I'/=FCIF9gkfe>pleo;SbH4bmn96U)jPorL6FB`6ak,U%rk.H]7,S_^mHNPin%2*$C()@&mBdXeB3N/?dM\bCkLoa9jM\=18l.&E8iMnWOs8ZQD>'O-aYK$#B=>-(aARt69M"pmEL?AMI:>4UCDgAVCTR\\-c8pLcq%P&i%6`mQV9'&JYl*)6+..P3S40WWTS9G1Yrm^!ZJaPb^@l%T?N9%a#F'E3%iYOLYbZ,(1]ef3fsB0LOD9j0Fs/lH?TIq"\b9Fnkg%e_r]5I`>J_,;ITDI=U%rN3RuV7OrmBiF%1@\)o$te+XV7n9nd0R5M7\G-o##Vo(!lcXl$IBoO6n`]4)S$MSq3F[Y_Q@65h].Aq`0%gH-/!JBnne96eJ1knkJ*LA+u;o/)&s5`uQ]rtLPb<Nhu!qW;a/562OHV"*Hij73kap9P)!Bb9UN,O'jj2!HrL(!,][BBT&L<KB!J%pCoIhFprc&MUS>^N`dsJIbNP==>@)Sqf;k!,CB3E4*$'U')WU,Ngt0L0u%;Smm6GI.geHZ`;-#cV`=MW(kpjf^j\"NQmPR8quOPM%K-fYAm'fam0`<\rD+W),<WTu6&53bGnWk'S9HJ#gmg"iX,(s7kLd-A6],2242%3'<37J>/!KP#j'D2Wf1?)<r1U](r.l7V2[ZEpj%P(ePN,:mauIqUI,1#BCGLLLBCWlMo9:Q3Ul1q]Lu5B/DUk-9HqB1MuAlD98US->Zm/sQ.ZhRa>NAN5b1;Q!:6!edl(5GKSi?*Jrq%a8O-$$^)JhnhgjhF&B4gBEl\!V]ONh(OncVJEnC&(c#RJ;<Rb]i^Dms=m,l+7>tBn>S/>Ym,6,+2ATjROq$9<=U(HX-Ccsg%QiOX%Mb@f09$0j%1O:c(m#N$k'h.u9Xk)U61;&6&1<fhI`)MFj8GG'@!.5qY6iA_)!h\AnlC7?r=PdMa`lZkYiOSD2C,epM,_fu(f]aT?%+\d]$)h#]SDeMIV)U(nJ?^IIY$*,q(CGN&jC*:rs\G-OYLol63SE@qBTcG?--6)G`%VcgfS@lQ.%7Dhe,2Ui!Vho]f4.[EDFumX.%n\PV$Td62SnA>`W';[K-(V<@S&>@%lC5am@?R]L_idBNM[cPlS)gXk*0frDs6nYsdq%LW[.BKg%MXbGB*eFZ@).,BW7kpdo+nX_q%IRgJfE[,sHIl2\,,dagNN\!%Lm^'F)]Y)XK&#TPA8uB/O$:[Y@@ut1/)hi\DMS.Gu+%1Y/']uj?-+TEtiRq39/J%WFF^m((^+`(o%Lm103md9p!3Dkm,^e!^VabbW!KT5iR&o*,!@oDHIgpacN16fT&7]4osW,!2cI+6<u.#d9_`-(a&/$hKtoI6D)Ih=]rV[!;@LNkiY%Bu8'ImK&$ZNbll&(Z?#l(I;LPp#U!Xk/T^EfEO)=a>fLafK/D</Fta#=O."f#MR9*-V&tl;ShiYlLUFh$BW,k^?I#&r`*,SrkBeE%.MA_7Q3->ONkeAK&bsUk88V^h_4WgTq7,cL09N%uoSeJq@F\rE%)+m\3Cf?:d1rjcK5@Dg1Jr[*$dXg.hpkkC'!j66#S?q4I9QTP%%8>@XF<=j(bTIKH9g!%l$,OQQLG)p$C@8o@fH$[UC?^8lPeG/#I5i*9IbE#[prQjoU`krf,LB&L2Rj)JP%ApFIg5hGHknB%i['qr%^%u+C4gqb#q4lYo\b>8Ro>f,HGb]?T(WTt+Ol+lYWI9o'"XC?W.2_s8,HJ1aOX/sD4f`orKk:`&&9c"/I@/h:*0XbS_s=qE`RD?[%Lc_,mqHeTT#+n%0(sZ:1%r.],D2t;p/89siYLtaH10QfU>W"fr@i;J$GH-bc[o#;@1Ng___qmH2/=UdURCP?`c7esFjIBkRY;S)_%<[(2+qM^A=98knLAQk\upS'HTg?\<<3og>#50PVWF`X%4o%M83"DTS\"ZMX`Hp@AA>m9OAL`_elKV1g==['%DZ5RuUPP2SYWC1W\%RY713o`rilA%QiuEc(!,=iU3ka-[^IJsMVi).#V#*chmL["`Qier;_*@l=CUh6Z7U2am=]'[*Crac8#k'dr4P\jg+`9$<1g;%Ic4%h`^?S+F^>Nn*lq-m'1/8\H>mapSJ+a#\KaUR3m^_cMTGP5o0>2jmK4bc;-a%jDPgBeP"fE[.HlD8LiCD%_k;G&r$U'@SDg+N\AUd%#aU&;CBg/.J0!LKM+;#t*KaLL5B1V:A])ZfdM/b3bTtOOD5upB(X=b[%ojI%nnog1T6V(Y2CbX3Yg/B2)"E0Gm]B*1CNOE&!r.I&%")er!CG6Z'E-'TY'M2!+$Qp,!fC7k'3YNC\".X%9T/<$b'>AgGCUO,\Hh#,1iG]hu&!hI?p)W]LaS9^mc"=Y6UfTW5T;`+N`S&##%*SSBVA.k?sb68I*=YQ"PVbLW!]4g@bX0gjRk4;6K;8_Jp(kmm"-=Noe>bHMPd)Rt*:KfXs-a8P9-W]o'h:1^td_g5m-OXuA7@HC/%-&!3MaM`J.<8o.ML^@UE4h[N=T-.t,<PTg!GJ*.$mE/i>ltpW?>''`gZ3E4[T/iP4S_U%d`%pfCJm`a6HQ"arWV/9-q<OLd#e$Xe%XeV;DQjgfRJO3GnN4-R>`9tR$Tk#bs`jbleS#%ZFLssr5&_c;*k3n<pLe4gh:Ni[h:;G36&$<#9^Y`g:Rp",A3-H`%kAUb+q8EpV%Ll,bg;A+EP\]"[s\A47bbTEpZYjn3MPkVs<1T#c#2Q\,9=Ed@aimUNrmG42HK(]?ph?5Y5`#H,.J;b$E*]:_GCL6%p-8gbf[e)N4%Qb4@ckq\^S=og'%c'6M<$1fcrM56GkPr\,*V1F-LFi*P;6FhZ@9^^jtI2PSrO"T:Ve;h2UUV?)WYZ8]oGj+1#_$eQ)O.,O&>US1!%Qa=9k0NT<srX*nb$hinQp)2EHT3+g5q!:NfO$pRgh\2;!R>`!?ZumLLm2`nj7_RFE;LSf;CXI]q;V5[`G0ZidTj#]99PQCTp)K82%:BNEMDEjsDe[[ZAkoGT%L:2pEC_1j9W=b`h[)g02k2t0Kc!Ojti.i8V9Sc-O[=76JQZk//;Gf"L6B%Rufn1;&3r=!-@FC5T2dpb&%"`6YcTHZOd.NH]<!dHcfELRBVJ<pa)5ua*F_2;"C%FXUq+s)SY21/[lKgFY+Z(8p(a55877I-Njk-a?ocql^*7mW+GTfph('D4r#%A:C'hH.QG7X3E'0/3W.!(.bY6m1QkD-3j!;!9\D(W@eT%H?)\H"g].md[Eq585h1[SlljY_*;kP3t=N4CMV/QMNMHm<..8We>BoI%4MBRA)I#*RT^smiP\S7*khqP^0$Ne;:6rp@i,uX+dN<s+W<@R0l%=a!Ia\n_Mb;&OM9tFRo!]_KBqkc;0"66p!met*cYX2V6UsPj%O5S\4IEVe03M><0KE`LK33^OPIip;]h=q[5/WOJDq>LPWU.^MQI9hrVW+e")W2,-``\(Q=UI7+)=m:#ND?'-GZ&hKZ:]M7mBg[df%7ZiNV_TemeW&Fe_p8i<%U'73E\Ml2tBbMFgV*0mqN(920OWT2`40)!>*E;!'iZf?-,DT`gmQ3_[3!*k%Vt=jT)r!&6q681&Ta2Ua%Sf3aK9=k_e8Dc2jDbZEt+LOGLUMhYsaBBMhB77/u;^'s(bdh3DNuZuX:_X4QEbn-L>0A-+(iH66Q[fK^V`[M&=E!4*:Q?,@1qahA%@HW(!Hn^M47]#eFSA?\2\#UblT)p1>*c'fjo'8Y70B*)X!t%;@RP#/46jd&H&dR_X26H\L+Q6"SNj%>B^hS4M!MN:3?GIS`.GV6H%O+!"6[h8,M''[@$F8QA$XOh]mm-YIr>ibR*==j@gLr[Sf/f>1DlQGQdQd$#,AN'Zk^9[f'GI#1;95jF=#S1,/]s76&jK`YGp)8=*%kuAQ(3@=nma=7`K,9u<.mS$bmPSbqWe(d-uZ<:g]Fgb7^,P?1V$rH6aCOHX$'/!3GgiN+943)d[7eqnq!k\t.=%R%Ra-'r*k;B>4%9Kh28=JeHU[jfEU.I+N:X3X!8B$Ktjm!tUb<AHBPO(tALhXF)0]>kej<>]B@ct7]W&?DqL(PMc8fbk5\,!BfDqpSRYX/Ka@L>nq3%B\@1:A>ZZR7WM9jCl+_cE=_Yc2f)>+r9#Gr:=['Eg3ZGV&XQ_D6%<YS$apB;lTK=^[%W>DeTBeDX0\,W"DW'mi;0ZB0FGlh9fk*s%NqW%65;1<RSRgDmJAMlfeOsC6d+Q"l13Wse^e/?hF?(@ofrI<6KA43u&G>l(5h=*^UAJH<"jI-<i3$3Onom+t)2NISqtB,`GStl"%iL^#%kP*T:A'nRthcY`G_ur:EdCq2^oug\\dZD?K=>=H'_Le4:&0Lj:0HR-K?sP*=XVWs4IQtMNOsGc&QW+d=GW8b-d?DJr,-pKj%j'qnu$j)[qWJ>aFR8*pCRABR6J,ZU!B\p'hYo9l+nWG'R`E"[>2-l4^,SR]Bc"&<J"tKPP2bATuaEZQ%^3!T$Luh/98OH3hn2KO<%2Gsb;+foO@]Ta2q0<thsVCgrKh"6u%Mo.E0+,QuZl](-Y9mgT)*?08o*o%PRg%]X];a15]pU4NN9!4StJL/amJRV,dFA0EN"af3D%kClAble-VC+IMMa/:a1p'hl8i"N!>[CRnf+-hn8VlXEU)bWuecj$,dZ[n#?^N/djsSu_K9$f;3mrtX$4#%,q#%U'4_R3?0VZ_*j>%%<$l:;%9-+d.XIh1'+(G#o4FZiBsC8QsA.*6#,$k%.F_@!5@u#W_D^m4W)KgL(Ra0aM?.*+:BJ,@Yb)MREbtdPo2LklPng=Q#Ku]%[1pHA#b["%9Xnsj>"6Zt("5i2Z^Bma\TKo4k$,=XqETJpG"^SW]9]7n<acp_0>QR[K;-oFYT<0^N.AqpeV\h_Lk23G?tSGciBJsu%4oYnU]8G1l_Cr(fe]HEkNs$_!2k&R$lpcsGN;6N-mom/-HF0JbX3Fb4BR4LLcr6Dbc"rlaG^ph)<r:9P8Y,^hg$UL2b#+r$;@]25%Zl-"?Eh!8L%QkkkW"`!.$el`Z89puT&/KuWBJZCE+;9t3_)>V+/;\&0rGd(NPtPqh]kp@>74i)XAoAW_.VBW>pU2q:*?=3kaj#0N%)f=.2FM4;?S#(1Zi+K>d4O@t1)iQ57i[g[7.u5f^;gY4Sj1"m:eoh]:%GF'(Xu,+1_.Gcl_3CVtH^Uk.#34b"0P0`:H-N2+1uQ8k%4d%T$W6o"dhT3Pb:odf$G-p6H$:EWM[CnDr+`LD5"#,aBL2+%sqD,e_jcVq@Y&%;H74KmsTFJhVbdi'`*e5Mn&\gO]:G-,"5XXW-%!F)nT\2B@^\fF/`/D#bNfZHOi@7t2ic4-<F.9AB^87eI[BDDFbQA:[onbW4T/SWK4"WZNZG]#V(iF$1YhZfd#Du)X`1K"(l(uaT]%(FWG6L1h`cltnsG)tF,2[bY=US0(c6):JVU12Z5j4Kk\**hfVD%e(*=),andF'(VZYH3i[D&XCJE]4g=)bto0S8IKi@DtU.(!6O;%TugtI5iHaf]cAr6m:72"EgkJr?MG\E2N2]GHG_>/9N//\L\]oAg(KK/e.h*u%'qT32fV/-b%cB[g.=2tH$<u[MAIBhD9)tM8l1@r%&"l!HCS7?jfcV\V94%gu[p&B_Jgf7n2.&YNj<`=`)P=!0d$@20K%:!%-4unfl,dNhVktjn3[7.+gAtN&):++G*<RJe>%gOHmhGgS%Vb2mX%"B+`F1?h[M76tIE4?LE>j/2dj'Z=42O!"@+D"Es^u4<EX+01]*S57OR#+0CYuC6e:uYb>*V$=((Gt"Zeu*aSI%B&5(\D(k%-k?PpDOQ>0oBDYM_+aZsLggrnea$oOH8He)AJ^)97m+%c5Dh^=@4J'YUH_TV%GB&Loq^=>kn&5SN\uQ7LMM2)@[.j7MheasTWdB[%F];OD`.L)Qj+[50oiO.\leus3IKuH'jI/XL9h,HSe?\U#`;>6DL06F13S@*=[d7_0PJbh_=G!Wn4KZ-l&D=sBcR?^?V9H3t_6).3%eHoa=ZZkfa8UuA_95I"B,3;Xl9KMDs_D9b$QpWij`fE]4+l=Pc)0If53@5(YiJkOeC8*ce7O]C]Q&dj#hOF3kLWLRa+h_U*m^+pK%-"?#i-f4lB<W0IQbQ@b`=U"H%e9EMZp_t8ZP,#4R04c+(T&e?49A:A;gTFJV<mrtcGVrTGj@KjF:G&RffRI.Rg<h-oZhrGkhot6.%#:!>nZ'lq.c.E:[:*ujEKK8fpX$>""%bD*b#5pFSoY@ZHH:5/9V*-Q6&HL8gUg1r`IgH$1)BE<nRp[&1^PUE]Gi,7-7\\g[>(8kP%Ia%*;Plq9)C$p4P>p5E89UX+D\j^L5Q'UjhI0;L1?r1dp]qD2+mF0nITe8'5@d'j$X=c=XZhh=Cl$]5hPSuCG$#6`!pn3aNh-U,i%fnp4Gk&ThCh@.<2b*Uac*ManqOVlTGGmf9Q61I6(m4S]I_ol^iYkis^^6764[Q#p>6jHG#2L3D1p"@!U+>tX8$XdqErYi>QE7jY;%K3t*cXnSInK3Binp3&fA;0L<L?8#DZ:X,M8U-Vd_V[4:h03>PSG8nGW`1WfBDgaaUM[nIIeiq"V<GBjbIf#q@8&JXB)GqI<IE9&;%+11+tH!7Pe7;U>a52'TO$!L!\>eMqg*iDoqK6l6g#8qW2L^s8R:Ao*rQ)c;M'V=V8;<i<r#mU8`g;UXbO;`6!86PcunNg(`9MZQ(%D3\.d_$>rG`X^_2)?`YGqs_7J0nUgf(?EH-SVSNZ[lWK@&T1F1Q5qkXD,.\-YR9JNs4J8\%-l=:(Ls`u2(7E3R(<hZE]G[4BP&'<%s3Mi&d6XgA]j#O(**%,C"G;;'fO7"HNp=+D<IE.uRelgG(_*3l2Y?=7jIk%+\N`J'=_t75.7YVlNJJ+6GAHMT4Rt*gkVi;f(_htH%%bpbR]cNsR/NT?**$ILZ+e&>sQ+L>L6+b*)#&'j_>^tJa0e"j@=2<5>0<O5dIf+"``F-L+%19`b2sbb.\s=>#elL%1M*]m=7rl>d%M@LR"YeI-El?LpL"N.ff6DZ\kqnLfMLMikPBoJV\^k;o7l(a"*j\59+^+"`O6)/6)_[R!brRpG*g$]gre7ZO:D]@Lo46Ri"(<f_e%*5.IP'Q6&hQ\H&>IIt5p<Pr8*f2a>14j>hC'F\^dVdFkrTJ:*).PQOAXllI?#'I\7&io0ppqshnoO,1`KAqJKBc<a)-i(a;6Mp*I%$/t6DTs@D.?Bt5,6hP5RK;/Y.^.Y3KF^8o!P'kt94')ljV_^iSY<B0t9^Fbn]nB/?gL(J4k(K%KqEt&^:ON9,pPJ26,&jBD^@gj#%-$[]kMPX#19Ccf4AZGAKT;o8Lfq>70I#baZSWW!^]QkN=8O"42-fHl%Y+HM;8&M^P[f^>M3`=ik:FH!E;"3;PGolrnT/p=H<ue7O%ZdlJA3R>h[k#7Kno!GA:g=;?^<SHRO&UKdkhUhK!Dj!nG%]+#Go')n-_TO<eM*,,saCnB7gL0a:YZLC0f&_asUcG:mXbYH>e@0R8%?09<Uq)!pCL6Uat'c9%+lBHUTWEjG^OMk(9g6$bAS`UnIKEY/r[IQM)k#fJ9&Nm8i;^RJ%p=7W[kq.&cLW,k)3q4Eo.ELAkH):D?%Cee),$/]1Gl[hO*"tsr4hP7pZgWsHJaeTBnXYI+=6i9Wpp%I5iCr^rShO)fn%qg9);_IE9>DPmMD/&XBC<Q@]VD`f?O79Uk&E#uD%D9[KU*A6782Vue^h\[$nFL7rJfj+c$1.i,&dJ(leJI`u+P=pns>"0>0F9CUuiG/u8Dk4("eu\D5VP[R+)kmR*>iXD1j;IQ5Q>UBc%%DXYn,4$_(Di^:8#iN\gKtpm<$k(O1&7F65SC.)ErsU^*Tf#U!kO1b_b(nYH)rt:;o1raobMitQ:i<l:n"hF#U2&(2_>J)bAZo"m%H&Q*>j9^Zi-$rZaim98)/9q^<pD%V0#P,O848aMj\9<oX%S![cjJC@4"h\oP;KVe0>QW[Hl:/U_0]N7\&<A3!]k[rK40B>c1SZGj%S\[_I+P%90rQEL1iFVuJ<bEI`<rlSTS)Qkb;Ot3['m8)%hj>\MR&BnbUbeBYh4/#F;T(;95L!q\G?.R+(Q.jLE3(Ua.MU[Cd&b=,%,TA`AaYNo?_:N(3U7s;q*uPSWbiii?fM_M]N?r1!@)+9X2=mqpLsupe?@q%+\8T'_`Zt(B$Z-Y+c).a?V8\>;=;-(.Ht?MW[7dU(%GqX`_*O"WMFZUQ,IZ/I4.!_Uk2dp[&fYuP;&kkOuCjb#PWB2]p+.pV!Q[J/f%(gMhjYT.te*.7>g=K`jE8k5'[X@VPr>OtMq]Q55%6_!;j0V0IV#%K'/=VOsp!mtDU%W?2TpN>E7pX+Z8$h\_?&C7]QAl-omKem\^NJ[68E;PS<[-&MG6pF;CfU](LkZ2)4!p3s2LW$J@%'<t@K):*AAY_Slu/c3F`5h"Alfc-[O`.uf8'=:@^5M(6o\sJp9j,q_o2;Dr'X;-5^0gd^oBVt8(**K*Aj;!7ZjQY2*/qea7AhF3[%TF+J!Lp0H9*;!_"jCqlqQm2]GQ/V1k1ENj_"0;,e^auIYJ2e:)Ha6;VELQA=P0n/k]E:MUSUo$HCQ>YEld]at%qm_f!oEJ@P>=N8%C2]^lG8o`'9qOm6:H_&$20%N\,]Q(VmO$86GCnM[Lf8"@aV-C;j.Wgd97A1?m.G8`_30>^.V1DL>NCbt-^m(cF"X;P[E2h/?BPn+%4sr15!@K#``e&ZD8qXS27?f.pePL=NA9WC=VTJfSZj8Xb["Qm"P4#eu/h^"jMHM>4<O1kVPiQ"uOs628+`8/q3?@ER0BNN,(c+Or%r#<q&;hI.79`[hu4XDCBSOp-C72!q)>nI7geb3qVF=,,'d`R=O%dHm"Z]]Gh!/&lj8p($+WSq/WIFroh&76u0J]HF`B17h1;7AP0%1O]QPim>+'LWdXL4L0+#;cGS%$0=:+R%_sb@`N>@13dXVjUD3bqg+?@'t>-W,h?]q]"1Bo-a+KE&!j_g?4ZX";=Y&hjU9(r!jj2"%h&ikeTL[V;HXo"&+.Uoli"W8N0K`VDXt8V@doICVU`d]K,\'_igQJr5I^!EG)\=s_Mnn;>nQ6,R.t&qF\0):#A!5mV'uXT#.%b\Y%R6locK!2JN$1ifh1DPa/0<O>a$P@bb.O@?CQ&qmdnrtBe4I;6C1X8iU5Z-g4_1FO\m-6f./Q*&BK^9\>.5keu'\j:=4].@E1^ZKt%bs9kK6P`uGZemL!n'BWWkpkPUB:tVV4%+9jr[\Mdo&S2ISKPK4el_.^&H/+h(5CnEYla-%VS4GHW1<NLf[&RM<^2HFEgfJS<Di`>%n?3Ig4@gjmUA9]MZeDUoqjGDfHTfdJI2+Q\k-j8aG)5Q,A,ROlE=&b]>Uh&=Dio!@=u>1JM0Phg^,qC@P0.^pFThRYMlnie5(cg<%d8X3l&l+?R_Dh)YC05`';`V*I@_hn)[E[7X&+RT^TAH;H3):nHBQ8JVJjku1@MO@s9]=:I$o3l[QX/h*Kd:m:]:3OgA;A*P'F6EM%gkq`u?luiJ)$Sc+VqiEnQB*kJ]"8*.9<AB*U[5"l@uX[N^'u"F2,0?:p[;<YcBL:ZDJm:ZWs?_XF)sulh\)&q41\6R*#%pVjL;Vd%kFH"%l_[Cj-;S/nCHn*>giC.5\&YQ"(Z4tt]t"l!k,pIpF5G!]P&>3DXKi@SDMdPtm^J9Pk^=Q1gfe8h=p<Yb[l:e%ns`i"(.NK%%"t\f[n_iOFG?W6d:2G:Crgb<*P5Er[5I0;R85ct.V,BRC=!=1mi`f7rHa&U;K^D\MZT+:rCR_,R[RjG%d8N.M0it@Rbo''CD/=94%DnN\XrDo)&0JUo/Q=P\P5+&-Pi?W^39BV1M&b:Hdb5YeFA+b&@6>P75lB!0OR\0G&Rt/h/IVa:fo@Fkn;N`[+/g+$;&r+of:?cK0%/NtV&"P46e6k#ZNgl7V\_(Rbp&qe(O9>+<uScCnl<d,"1@Ml'X,S7.BAXO1pjP@/S7@E/b]2]RPRjCj"DMQJUVFpfglGd)F9]J&i%nJ)<Tnh6gS>jhHlXU4@5GTA>No]KED44Y%mIGaR\jB3*t`_68Y<-t%W!`hp:IcDRT*4nE7Q/\0q4V.p^HTSQUh+Xi[7^=]";gS5C%("O$h7r,t$R9r3&iSG1iO*)m78^s>4?d;KB*pr^6?id%uH[TO-drMO-Cp%t5`&1ltI%N>,^p3Z5,e:0WBqKY,%V'>&6b="DjDGP0%%na^p=NQu2[.8:OhHtNO^PLG"4HooSlB5S9aKG3\[1kX-\7*1lo1HNOk3EJ18!jH_A\YKgH.U/"lLE$@_#AR6VP$F6CUod1iV"%d%n1AFTY_"8(*b9q./=^*Tm_I^^q"FE\]*_AljNks:;dj4Wg;6##LWibF/#gBe]5T^io!,bDZ$jerj#=N+:r].8$d\PhM8DMB(3pWq%S;SP&M5m(tr<5cQ4`Y3YH"<Sr1'u.Bq.c3h=F^Fn/+]2BH\.SsiZOV9:;S3R`0&1mPp\+WZ%V6/I==0)#<)j@<Ln*3eCucYj_Mo5%/%;RQjAj1pC)'BD*iSCWo.)3u0Q0oWJn9=1_?-*IRBA6Xo!3-=2mD;\X/<F(3FRtM>D0lm?u.:HUY).?+OhU7_P!s@ct`\#HZ3I:%SoVoQY^Nr7^S@noQ1e[B:QdHi,'=sd4c8oVp;e%54u5M1m.K/4KY5XEK-aZVC:&*=`=3#$%F\1=FXuL)Keh5kG*XFu8A==mB*e7r%&ErTR!.[KHh:JF#%OGpl8K@k9M77eTD\l%2cu:Y86i=V*H'oK9;5"IKe]ORVc%C$W\uP.K$s%]4U.C&I3R7TdPqpfg*[`I/\O<K>%A9I+1]&SsZ-gD8k9$lUX@l1#C`0RSm5Feo'L\B+&>E>j)&6jIIa+B[M]t0,[GHY%eQ<H0Nhh5Th9Tm6$G`Spp9?F^BTSHT`q:e;m%CtFJ<11C?X3T(i'E8)e'_!O.g)8<3Z^.<ECW_HK<cP=CKI=8SQmB*\t?_lFr3;.b@0hP98?#`nsF)I'd=4AO:(DRH?M``a"SIMAP%p$M>A(3DI/r`"L8%?s4+IQ`W8FOhEQ'anXlPD1*IZk;t#OuO<MZWPA91>)-LXp!>aYD(tlKBJL4Y[_oDeDN7O\?CEBQ$31rZ3GU8%]s^(XA7r7g$Q!XB4+<_)jj9=qoXEEuf%&=97sAmP:\i<"A)D"48JbL0Ggj%],$5/o?HL%Nc?pOT9iFiZ0$#bf,s"cZ1+hjPi=1g\%VVZ\-3!P<iAan#`Z2^TS;F$TF9B3)1jB1=bf20mu]PFX+aPn.T(I8mK3"#N`:BZW5c?LZ87FA=3NiTS?f,0N>IF4tGoocH:^#OBN%n6V[uGIa><)_jF%V:.j?d.545FnhEa+CgcdC&<]CA6LSWfr9;e'H`<WQA@qG@4T/_$7`/koPk?S,i`a(lA)\+hBKPm9XhPKk\qo:%puW(!1t5AgFekk<\VS8%4&^_A@69\>l@c=R0$^s;j)E,KULJ>IJrl!(.ErEpWCdcX<"YQdL2G0"T<YFCiOQWm@Cf#R.%.Q&.UA`o%LU>/(3I%JZV;tqDIL>a?,SNCnLi6]]hM2:]n8#NY,E(V\V@4i\am>qrn1W4+'<t[TRIcNK7;-;k],n.r!bF:U%eQtt/!".fc<^g4%Y&,RLI=)/\bkV/6GDtuX&"dWa`,W%X64YmHO8Zf.;B@uK=1.G5ki&Ri?h=?Z\*.8rI/d@5@@lTDiJ2!sTuc/R!oGN6F*3iD*P/'t%XLT'I.J:EN=96#ZHTC!e=tn>c<QLXUFtu4<*BKt)QD.mPT<VoI]@_<$>o5=_(%aI3Imo-Ed.W($cN>@$^)Qb>&2ukEXERZYn(R"1%K+;hZp]M((nk:$F7`hBNMO!cKPEM>c/EmKms-n_Pg4:&+52NOU$@k)UE@U?Mnud2pmfkN:lrXVFY!!4t3DORcMg(?ZGU`a!^/mDU%^Q[`u<E7Rd#(f]_d([!Z4j"Ut@S6unQ9Phkbs3ul+PpjC-r3oYY;>ic=oet,=Yr<:UBS8`Y2q\X?hcu^a`Rd2WMj)4lDXnGN,4JP%EcJU1A/76(7tAM*3:W2<PsWIHPL3"RoKnf1<R%gC%OKrS&(S07(R+:M->$AVW#nHp&'4BpZkE(R(&pHQX6WYrifrt)#*-HM$X^DT%aK\t%U5!ce$LroGBr*rQp$Nbjpg%/L;[c7n)bFphG1kDq5>kU*VUt]!TX--_e\c2J%Oc0qDY`B,r1Aq\!T<HV(TR$VOK]jZQ+To7%e_SR,:Loqsh>$#HPDUFB/Bi&&_+H3FPjC0:ha4M=W`rI^@:@I:eKmI)4)0Z5jK*qg5ijK^biu;_b[\.aV$0%AcqdfLSa;-Y:GHMU%W1X2g$1q@gB-4/:7jQnrJhO]ZOhJ:EE^t*UU^L37?)*[6LK3W>B**5;hl>Xqe[7=p@MPnYXDZTO$,rm:N_]D@?+F=CWt>#?GfJ>&%2CD>Q7sD(VGH%V_Q3T^%T:rDJ<'_e4Y]gJ->#JYp_^=Fc<*+pF.g.bZT"8t>QG'EEnIUA;hF>.LB'4bo98ME:3e`"oRqbs_`K\Ba%&>0rQ;+c,J$!bRi&Hj%;K^$7S;$:s*^Hb^H8?L#`/q9en60PD%@j72d[5@jeJAI/.&C/r!1hQ9c=4Y,7WT=7&]6tP%5I412*Ci]0%$Do.no7[J4?0Rq/"</l(*`f+J*t%GgR$?I$_!ga1((ktG4Xr:Q@QfT'>,=Zh#.]Wc?&I2*?Q[J]-2EDE?ibVnrVj!o_2k2Xh$4CT%]-66\csQl.pbu?=$oIb9]^ddjY]rUTZ_>2oC9F-2%2ST6d`V:Y-oC_Mm1%4`+s8l9N`\fK\c]+GK'Tb-`&^TJ7H1lN0OUcEZ&Vcu%JKhJ%k;a8F#b1[\>m2Jj:FV00d(D;62YWkimt3#\hl5%Kimtu'@nKK/mu;I?Ju<(@-]&+Cq4u.ML]FR4W9mFlgQ[b<mQ=!oVa4Bg%^q[F0%*j!oH-T)`g*aGh_.u=tP/"&H%#MqJ^j\!P-NqZmdKT6has-;[H'DGj?EsS*@./*O@P:lomF'D:)/ctBURV_kVA3o+W0FmO%eh%]^LQi+go0dLZBSf^&/+-995N[q0dWZA]S"G,X@elFFIo2<"9gT''=&PX8P%5rA]]N520C\_"+aH!AWsY-J'+PiP_FB@CqmU?$%Kg!Srrek?"5Pa1$:l(C$3YI'_=!S]6[%^b+(!N^tHN:t\Ch3M5:r-3GT<NU5Ml[`*V#NBpH5T]O6cf,9;8JDmhc!Cg@[Q(\+R:=M%_(6r.ifND8/Y@P#VW1e4=3HJ0JlUN;UOpH=_7/=qHS6k9WF(a9g[B2[_.&d>fsgoDKF/J>:A&^.YS\]hV0t6O=:>keXo>Y'_.$]L%[*M2FMd_4V3;,F5YS\_^(<>i5"j:oPH)P+*E3Dn2CfIXkf0C\^A5ocM-5`i`P>T0URJ=*c_.&d>;+0]Q:r-V'M<a?(i#?;E:I55C%@=gr9\b[U%=H%*ScR]d*JsF"mpU@)/524"NGb9Tq(1S;E@o#DpM\.?,B$"DQK#KF[E:;esW*lkfQ)fRc$l(<nCFulm8l-pFi!.S-%dJM;0pLg4^A']BYnS*!]Z,Iob4:f,p=T0j?oqZdFbO5`m];*,j2mGKR=S*qt#Mr0+:QgD!hu.G%Bp)kYq1P5@'jusggOi5W"]aZ-%O"O4R*e-,Rr!A7Dq_!Qciqp2C0@0BXTo8B[(/%[q.DZ'9`YKdMc^j:Zqm",$^%(]#CpE7Hcm+H$^)s't[KD!e?$nlFq"EJ(Y0k5_%@uHc*^COUt5IQr)'C1)1iqoR*`JWN+0"rE3/=n0DnKM4,f])MY[WeC&mt\o?lrr:7(Z19*<q9SEHPe/k/UeOrIM]FpV%q8>AC8Bj%@uF@@4/.$:?$nlFpsP'L6PnX@/QQTS7i-5F;i3/-<7NGt>%.Zf@O?]?%p^_H2+_Vh6nThBcO\R9T,L!)]YZT?hhs(Pg`a5acQ1YI%3<Zfj`d9qYQp"*Rdk+5*PmJLM?(GA]h5$qoj1QP0XC/7##oI6=!p&e<1!6Cfr">k(>>HK^-qd/&F"tgpET4aM-jt"R/5#`k(hNNt%:7d/:(:gVEb5D8@UF_-5-P"JB.,TAYT+'I&l0Ln#^-993q\@[bWf#`F=D+cZ:(!9[%'9&gT4m]Q:LTfDZZDr_l`:*(qh1t[%dEog%l9T-co;1mT.BKl>=jkd(c5\$!r&3Kr@%B:eK6=DJ$L96I61d"8Z]Z9+IZJWcW$(qH=D)NVn&Oo]U95\HltKR7:0i@+ifqDChtOj\%8$U?;Oj\<Uc5b7Ml,t0c3XbZ%rXdX`g5A*-l[7<@e\bL%DPh&Gg)n*khgWJm1U,0IOBfQ>3cg5#TEY?(f(mo4Wf"%+r3N1`LNV_`%jfm:]a#\9g@d#BDIgG?kU+^urlc^NC<SBZmFll?fT>N^Jqu(/;S[fES;m#_b^cDj<XoAs`q);H>EielW]^dLRB+F/W<nm3sX>@>l%_<bA*)6>XGT4gCfPH`=CSrDH]FdBZ,jEXj?%dC&/`VBejR@EI&Bu4qrcCEHW^5)G#]*`2Ho@)Q$/0!p1pZCI*?cOY/K1H^BI,@ST%"WUILU\Hh"R<-/q\&plLlhl^Re8Ace3=!dZOSf]l1Zs;-hH]t0X>B$iDs]"P#4!hA:]<.PB9@M`5CdnUrU"[c=D'(<WKQ$Xpc[2r%l]7155D++@*&+]OIg55_ouFBm:WGM;q3gT=^41u^QLHP'`]?cC><Wkhbhl4qF'*([I/j"EB<FHJSG4nEcD#MN4<<b3aX><NrtO$e%bU,Orl`BlQX'];+7F%(q!7mPobbD"R:Vo/688$U8q3P2rOj)fF=QaH-K94Bo-Au?(@nuDs\7U"cZV(*7>dHOJ=/C<TY#ugrN)6$?%^bs<1Re\u7DfEtlW+I<s:V\j2URGcOOF%58q:7W]T7^pF7l=Ye;trX`ZTP6jp+=L4i0nSuL&!1-ApIAI'uqB629Vb`JQ=r<f.;tt%k.QKE=1Djf<&7_V-fCHT;9c1rq),<X^;^OL8l*5[bMu:BmhGaIY*k?b]LFc:h4XWNY5+b0p^=MZ_)9C@D\i]I?f7B,1VM"\DUp0c%`&5`i"08d9WbE1*RcUC5)Su@hY#ugrXO99;f<"IYN5*:gbHImY2#[KX=WZ+@"90!H32WVcF$,\dliL*XgjI_(6Fr@f)5S_Lo)"Pd%bLPp`IT+pbHu<L3R(lPcjpeukP:F2-:TNi6+SVd5FsWb]fnDtC:1[MtAnBSrSKboG$Ue7Cf7k]uE\C6skiU!fo9.Rq"7h;6>m'YS%>;1TmmqX3#is1fVVUm.uPeBEEUX\EIlr!S18`$0j[^ijQCo)[G.?WYmhaC(p^g>kXLuGXNhd*9.^f:6/g#M`XgomrO2ks'3cqhi,%G)0^@3]g,8+mq39Nu_-(&3Sr[^o@CZTl_H0dNJaC5PYd#Xcg2Z#GG^PHK@uE8jJ3AVL./qL+$S8\GtA5AB0l[q>+>^'UNnH$<]q'%Hc87L3[MSWlN4_S)2N*Lj/OXu?9rJ!TH'[fJW]'IZ*Z8BX!C80$V]QtLt'&>@?Of\6VJ*KZ1$s<iK(^S(oB`A8In0&!HFiG7M-i0%O)/[JlL%/F$a\HldcC8ES"MDf>^61+deDhNYd-p5T6oG+.btKFe,C6`go<@I_,ncERcSC>a:<dnrQ0iYrmjdg8DEPt8#s#3H&&_(%FL7e>/eiIUD(R$ZOVPRI=fDXjcGZ!\_tb@4e`6+;<f2p'[UVqdiN1i*/&b$Y#3O+1rhJq$<f2q:bq/t=dF#V<M[/+tXH[S7ki)e1%)K$VG`<-1(5UPX;m^YT;=Vi\tbW`3M1<ThVZ?8bule^E8+bT:,-'<UB`HMlqZM3BV3&/(G[0G\Pp!8.4k7#rss'ou3(:gG6PjbWA%S.G%j9)@s&$17EdU7P6c#tYc3pO37)IVY#-]!)T`9Hp!WPkjaNHP9=ZAhGHb%@%E$gH2t'W2hV(brl;Gl&O;bg8bK[9OX3clSbY+%>ucd*'*3A%__^/5(^lUgcTt\AeFhep^-S^1dOO])msP:+4[iWor4^U"cs(m\;HFISaN`ojdcJ5:?("7JG,]%e-!b6lOfS&*WjLAD%Me&euC%WSWp8X]+LqDgsGYkZj67apK[M@e/'VtS5VNU]LhKNE4B,VT"!Tre`.g0Qek%Saddu@/7LBP<'=nJS"To:FR1s6[\.t=TN%6o3`dDC)\,E=D4O.cT)D[i=\X,/lTJj`#A@bfXAZLD&;)rC,g%8:Oo(8ol:rS!V!7^`Jbm`\-/4Ga$[b(oqr'eL/)KY5XpKk2KZ\%+<OY"%cu&0':(j44fq`dXfT]Q,GEO8[n?OOic*l]>-Ru_BI+2tYoDF=Ket=LT1[E'&HMW.=/kd&6hQr'SG0ill<K%)jSLKGpF$sG%['sMLcKSX=Lg=#R.`u4kp/\CuO(7(1?U`psMI`g+g[1,^FrJ,une(Z>p@d*V00%5K96302;[R5fcE73NC&VtK&,-S%kIeY3!Lg3$%SHnVpJS8X!kG.T,[g4sji-\Kff&?(&SR(_Nc38^bm]ZAI`pkpYFHb1lq'o:;p_t##;EQ4-4fH:&2t+?"8bS_JcI\s>cRjgTHBJX?%@NflXe(qJl5Y1M&.BGKY%0DV+>^E(TrV]I6T3'n4Jt%ol](]T$7:#CA/VEBu)/Ro)ck!bHDiq[*"n-k<LrABIGW2p,*\7(]5:8ZW%a"SZhdecHI+Zh@7+!Ks4Por0'Ba)RQQ+Ub>,k("-&k\:WJf"^5jc0/omR)/LrbfG[kb4GHGZ8=@Y3gdRfA=c1rfks4_kESZo)4JN%&i^2_$k3h-q'-foqiVZdW$(J+Ie!sd\@[$:Vp)b.G=&a'qq'Ra8RT-HI:1G]IENYdn4e=8WLm11.PB["'/mIMS:"`dQ+Z9#p8Hd)%._fO"A4bVU&=:8aF`*aKYt%d1=+1G)<Ma7A[N;_I*Jl'fDtm@X=O)s[nBeg\Bjk"7CP,X<_]3P'd%sD+JCn[bh8FD9qo4s:p3rHT%dm+hp/hF_pNC)F;E\G<o^LN(f*3XWUX>t&o:)M'Ff,bnEe5(7?eS<ebP#SM`(jhDJqNF"iY5sZgT6?Sj%QOXV%to(+)a96O[FME5%f\H:qRq#L?2:.]M&Sp)&d?eQgXYc^$g+Td-XTr`<Xm`*!C>8UrAe%=T6$";VJMt%s?Yg_(jH&,Zr3:trA?JTcaNZj98<ng.7m?P7%mDuIX;b(h!boG8c46WVSjpah/5FXVNNl0;mke/&Y9l%Z)kZI+>7sF`3FS'm]M;u5-4uiE,(>tRT?SI^YRSMT$rRWAi+._^%IJaQl%p3OK6G.;!lQ,j@L&Xmk`o[`gt>tf_N-h0[81KBodg/dGi&74AM;Dj`ibnf$bf:`)[TNR;^),F(1*<*=$Le4EPHG2To/6Y3J9:F`?%+.j$U[kP_57N]n5`8OB%%?Pe=X1JD8_[4.`cs`HgHOouP5]fOJ:VL?-,G*Eh',lr=h!J^Q=b^l%*euk.MoVB`+6aYWqSR&;`'FO8%,`=e)Q9!sU`uQFs_]@fKP]`dZ+03)Pk8V9@Ks7RhW^d%oI@C")>5`a&:V\&FjRB"\ChAdL(g-qrVKKOK@j&^$2ceVM#N0lF'eqe+%hIRN,D2i+&)V_VBFnjgraTsnM?HN$?<\'mYi<saEeCP#&2)ah4?9AYi@4J'Y$i8g+@@?l9a8GdqDWC:5S+s,u[i\9TOW*j#m<I'E%Ne:+8g%_@LqnUXoreEMtI?0N,\&p\Xc"[f?54<Dl?OLDZT_#M`0Xj$'Oei#@q$gQ2?boRpDs07=r:M*kn3sgY+M'6?(@@5@Ub`n\%BqY0R2t;SSE/9;@C:GkpVC.4mq&g_n)<SFd*"J+g`m7noUhqChqjj&;1^_q?%EW$q*W\/XU(:1K#`NYE5Cn=3jItuT.nb9%GF%0J%+d7gQI9h=b<&@E>emO$m\8G%[EXj[`=UmXc"d*s^fp:)QFH_?+jqXpC4t.V/5nbuXIMU=9HuK#B,j=Js]?lS#a/-Q8G)UjO_6*uC%E3isOHma.&`9_Pej?<t5S9?u.f^t`51UN<Q"q_;9=Lqi04,OK'8[ms)Qgpmk:'9T<C3YL`kU/2_&2TL=G$Lud889#Z-\n1u'e=Db%"Ybp8O<NIl26>f"=Nc?IZH$?n[+GP5b:Dr=oZ3n^I34X4:iqD<]PD"tkQq'jeL&%$2c2E``5L'.V7L#g:kG^5lK<W?Vo@'Mai#If%":t-)I$+H&)%ej3BrE^6a2m?0bK!iMAmq/pUoUkug1&DVjo`6EiCZ&Y?pS9arb!a6ShuD?Co?g72NfJ2m'no@D4)_G7sda:<q!52%/o>&qlNXnn_NS!p9r/$]#^=9i`GHL65mNQX#bl$b8[c"JOX6`3r$P!EURZ6'A*-lYjmke4PKAr2'1e-Q)BY*``9LI,Z+%[9q8eAJ%6d[k_',e+IHD3;!kg$R_r!A@+g=5huB4ZqO)lHe\Ud&>-]W[8o-;tfi"*DoG!;V'<o!"%^4@Bf<?_1/0#uYCej5*9$5ia\8=<1'$%M6,C+_*(L/%fV-9g=4nDi.'k$3!HB]qpNB?4s5g)nJ2Xtg;1D;C?bWLq:b>^$nLgjHCup9q,@5$oY=TQqo00JDso9P8#HU\l/\=V%eo\F><?49jPT/T'YlkdsQR2"#Z6/<0QOO?\!CBdh<QVC*\I=e0Gl=G,[;XWVEF$3rNimg\Z8E&n#;n)rk'?.Jdj0h.Vhq&Brpl$Z%5b;G'5drOba?]OmX8Cbu-%UOhVH1SG$i'WbG1ne]A!L;S0Eu@7Zk^mGUF$l5Vb1L7dDg\Ve3%]\ENEo'.jPJjlNGpZ!DAd:j5k<d%NfVc3*n(#&HMZ_u%a-HdbT^]k`I+de,$FFUf_*LsQ\f_2dNg1$rAT[&l=A=7^CcdJ%as"7')"UZ(RhN"F[2;F5Z%?FLU!Li[3l7T%eGjKt?24TuD/"ZjR(pj@&]Ajl>ko_7FG0g!0nG\Z*uT<6Og,X]9S1&=a2Z%_C:un#aBC^5m08"3pJ:pllb\)""PRC&h1X\-i_+-j%QC(GAC-Ztd^mN!$[r:mtQMK$a<drW8O4Ac>Ucq_u&YRH:+4K^!7&YYCGi1E_\d!loX&$u!T.+XBlN\9YUmLBU8L(IggBLi!.(WE1%C)Pjj5Pt5mor^LSMR4G]9es_T[Ybs`!F6rF/?&`Oi(3u3AtWU=CbmT1fPKmGLbt'?52#fl19M)(fg<9TLsr?RP/nPgA\qIc\^4:N%GT*a!6puH\"j4$a:Y"@^iQ\D$?pK5n^N`9Lr4XN[IZ%aspAHn(U&s=6-l!I#"C'*i.4J@8f'0`*a\h5lLA\1S#8a)-Ia6mjA5L's%p?/-hf9jo.4DJ"&m=;nA:!P[8APbI5q$E#UMiMWT$6&N8n$mBK=l0Wm2<2<pOTa$PO29e\lpb*mZJ@pMI<'tQ.r#k+DX8%<HIs:D%>fR[H_M:=-fECt`A\Ik2%X"Z;o_XueaTR16ST0<!O*UmbAnb`&HNanUP-P[Eri:m'(MUti(]\&(%X*A4)+brI>_g;d":L6A)rN5t%!M!nt1!bIEh<BH*BcF;!Ebf-TH4R@!U#sG(_K;m^]NtFM8kB$>,?"Wg&YgJTIUKqn*0d9c1U`8mq'56d@^)Yd9L,9"RtB#NFTsr[%nKq-=r0-olO']b9`4M4YJG.o3'S$AhbO-[X?Z>'ZBOBZ%ol/7_qSGWQLZjbVUJFX`\Kq(0V)Mb&nM()Da44;:=f647a)M54$!f6R%Y(!+)8%_'-kTRNfWUF9:2@NpseBZ!&1V&6#Ed)=bT)q<#\`9ALIZ;\MKeIh6IJ&0MDP%"=>YF/I^7/s4UL6ElCGNCF7pePhauEjK%fkIl#oY;P_qS$Cf5)8j>%+`BqS(NoFlC_YSc7qKj:R4*9i\KTTS3a4uO/*FIfNFTL/+&<*&dQhm973:tcYEb"Cd?N%E(SM-'3C\Y%n1SQM'9mfYJPL%rDq$NE1)VK=cl8)0#?._TI'\A86K;X$8-/fnSHL_H=p8^ga$:3j;.c;('5CNU\7ER9drI*UT(P-@2;q^%`.9RC%>:ZJ,mG'`-`$b)=r2q'O8b:f@4(mOq7g<;!nd=MW3WKq!UMOb+XYGp?mc-"_E[9d35!+S,RR^[sSIstVl1^=#b9l*UbO?K^p/?*]%LM>c<Lh/\<G=\^[NCdidkCY2Sl+S(>_7Q)Y*M0rqDh!#kToVVR0:''<3.25"Qu)ot_6A,Cp&rW0OlL-n<Y:ik7,p9_?P_BFCQmZ_%R`9>Lg>/:``l-cFP+4$@q=QT`9?GJd/jE8gQh+H&a[e-8R&b2'e>q3(A>V2$06!llj;9RZ6Jh"U\hmJ."gW4-p2)]p#NZG(Wn+AX%E?"eJ$)s>Dq/&"eVlNm\T+F4jTU!Duc6&p0V&?LY+"h3s/".j_ToFga"F\:ce\'S,PHTQoeXJVX[rq%9Me3-pGgU)-iI:cYMm'+e%lkc!O3\`^.1.bt="&2m7!%-J3@V&IFXN&WW7SG.?[lN,TV4f%eJf/)M@7P..##4GIc6ERPNG4OAI;KhA'DcZ!6(I:'<npC\s(?j7%:.jC7XahO=hgY8amZ?kT)j>T9m(4r)ZU5?3Y::Zk.NXGr_,!?Agu(>LG7OcD;q_6?'-%Qddg0K3$pD]-?f#tH-OP)m7$K)knYU"C%:D2IMOX+[Ert#a<Lnp2O,p3L`(G&GJQ?m%:8eRuolp#W:nVJLTl;g/6;/OK[MGNu/"K^]J7*1NIFDW:i:8KgrdNCB0?9HiH/AnCG%B2O[7S!@p4pd?\8>A8A/N$R=3migtR,S61g=?7:'hCVO.cseRodNDR)O9?aR6r_Aqd*d=<XXSdc_fs9;K[8I#ip].aBBYlp8YOQu%V1"B\acciYN+0JQp"lWO&gKl?6HjP@)77KA`-rD&R!0)hq`YuB*[AEfKfJ?R*f3HI4,*Fb^1*p=F\3uMPm#mpDY%,Ib<de#?bEq%%)l#R)e,?ibAaEl.cu$jLm^>PX2BSg>DS%TCM'gIhRutdbn0Zk^.kuOoc+j?aH:")`1E'_pb>[W?gV/Q]/1Cb7XbdJ_`H<]qIG!*5%L?5!GL2W>1B(a?En<]O:3M4lO`5CDL9g#elU6c(PV#?2aVtZk-PP$T5o]S$'&r;d>,X3bX6VaSu,l.7&,nMN.es\6k0"f`[8I8Bu%JPZY@8gqg;7t`A\Z,taA&G81>\<F9u+Q)>iea+\5<,/nW\<%IU)K1*tg*sE*NsaE*;Q.C(`Z-@(E*WV4lT.(V/Q;e6!q@*=W]3]-%P>X`t]-1-mI3n7p]Ss@E>('8Aia3\N'.Tp!Yr:GR9^t::F!A9_i;@A;MYT[m'sXsb=Xmr;,b:RJcA<5tjUkd*0qmkCUkS*dO1Q_*%'YF\M)4!n5:;u1?K,Gq4,*Mj4Tb<12`Tg)(<S_Bf9gg:on_G2qT7gs&&;\iD,V*tdG<%m"oqa3>T99j;jj$Y"Ork8cpKMT6&@5<Z%>]'k5M#4g-q=2h>I%dj[AXjB"jjV:@</u'o4VDk:dPBXUn=>dEoP*15mVkb/>I'a$Lsha7^RCtm@FAH9lVCei"d%@6"8achMZ/T8%7Jk2am-5TlFYj^ZJ7(!Z./m_"H6lPkK4c:Zh]rs'l9@#&E2MOPFtlR"kOOBeA,,hc$_a<F:Q5;VX8cT*2k%n$C*^pL6M2WT<#p7b%$<MGf@1rBi(4RV/4%Z`6ZW?(cLKgZF62W+EF7nnpn$I-N*A7'3a]'Q3q%9<hN0P_)BQX?rPU@3C2gM*;IkI8m&Nb\&D_q4&V38;d%?nQY+W`7dc'!nV+=?W8miTu*Nks^BGae=-'J;:a"HrZ,O?$P*1l]457pnD.Z`5C93Aoa^;]qIJ=XP!,5a^h(W35+k(X[<?nlu1S!%!hRM5SE>N4mr7EnPtIN\`SQB;,FVo/$?!(JWbkXp'!kA=HZ>cbggQJ:\PH`F7NZ])Hp6d"&`jWG`C>\UXW2mlDl1J6I9&ta4Pp9_%9>FbBkR4TaKqU94X=h^D#Q=:`.3JV?#3$5e)O3++i?c@63Rra!GN\S(+0[@h#?060%b98,=:NAqO21AS##d;qG@^$`H`i`#ogG"C%(!AHrH+'e0[I@E:$"h8SbNQfXNOg"K:tI7s'3&]AQ%J&c(gjH=<\S3^mVj,s)QZEXhh]L^?5F<^E:nd[&fo.:*f2U!q=09K8TFEQ%r2NM!a7hC*lFKM#/9dj;W&$i"_ju;^93H%r'`hWL?t.:b8?Q6(T@Wi-K?bu=4ctZi4Ju]e%i8KtH",Y-G+Ch_KY`h=N9;*<':?,D%"QdF<C1>U&fcSHKc,JR^7g@c<W`/THkMChEoI9?1;eP#_1A$]bG$3VRR;QZ?4U(3!/t)Q+FIkG[A_02eBHN<jokSMt,lubZDN!d2%X"?2*^)VR`c@J[Il;t.6&=3>!i[orU>e7^NXa1=>i<D>4(reU0%_W8;["t9'8dc"8k%%hklN.NCf:Zk;\EQWT1`iHdi6P,5L"-OP%*4Io*MB6UG$<e9oVZ+ES+2F2Xi]W;>.da4>YTAIDO9^A.8's?Qjb$Gn]S\&SM?M7:IXP0ME%1q]dICrq<riNLR"9CaSo51q71Es[%(X:lkR$r'uO[156;7*AI8=cT"<FFJ4c:O5I@Y5$%7LXr(%ZjcgR]E4n(u-7qHR6GMTM`LMZ:\K[pTKXr4,Jro,?PlZO`8(eU.>d@%Eh`\'T>p,/g'cF7gf8#kE6f+Lo?%E2Rp?rpqm@':1*q`B2Hu5tA&iWk[-J"DQCG\\7mftha(2#P`5C+m$+C+fbkTUE"hnG&a[<Y>%5iK_RA7qF?^a`7?V=HNXF%6GMZ2$TC7*q#gUn/D7'SiG''D]nIGh:"dXk;9MNU2SS4Wg%9EnmuidIn'0MWc'U]4N->f>BFI(Xr^+%pn7)[V1GjUn9iC((.%Y78Ue?,.`nJ<*R^`6VV,,sp_gL0N0<)QnIM#1X-]mOAP3WS9+7qW"'3?A,eMhsF9A"KZHN1QCK`/L?.8H(%l6]o(KEXJo[E(loYsP:A.,W>cTTNttla1AMY&)#%&$j;SWTJgAgmg>c=:ptIg($08G!'$1m$XbFq*_ffK,>%O.r%47ob'rp$<&Z&%?^peZaugfg$>]6^;jdm'R)7Rihc/aSW_R-5H,$?&A"l.5[<]NdbYr5@f&lq.1(WT__V2Z[<9C0e8o+$I;jiD#-=<7Os50ctmg],"%!^<O2('k'@0D<P.8^TtQ5+Sla/?5qsNb+a+qKfdtBo8ofs#L^\d;_UW%kjUm4'#'d1''$oNAb;3`Ic<noe!m:[U)804.<BR^3G^L%h?(M_m]>Wc/A^cL<ZP4d:hO1Kn/an<$t/J#q^YcFFKeLl)a?^&?RTEOAODoMc,=D@T#NfO/FAA3GIVs&YU"IC2Yd2OR$U829B:4M%3XEJK)F#RnKmXPZP!J,r-m4EN/OUV.!sB">ne#`LH'cG0Np)R2i&J!K2l%a/Ae=D)5?q3</fq?L5=\`T4dX5ZS;AW:VEb<ceUMlm%[)/5)^iHU1)An&6id%=fIG2UOO@$>\c1mZ"FAnHjmisQ94dAU"_dlTM-mb@&G;%anYG6W?XY7IO2*<F4m7rb36\>DCVbsiJ'Kqh<%[!*p:E_qNN%(TXoEa\Pm&i4T!F,gagB=V(H1uUmZQhL"bZR9,=<[e)J"m@Cf@0k(A^=1L"<s$>'$S\tnm_BY\\#X?KCZ&K>W=Y7!%=cPm+;2B_%)$>9+2MJ-aZAD7>UHH0jb&HdN4^q+n'9+2<f;,#YRFKbcK'00]X_MYMoV]=<#.?b.jQX!GL!+/&^&S4B:pN[RGP/H+%aCk/)KmmM]Ok-nR0*#(%&%"\X6-W\\?@FZI7MO)V^)W2n+Lu5)61eB$M5Df%W&l`u^6?75nP]i1`@K@f`?lZt"<\\9LTC9U@,>mG%#FO@t4+66L_P0YYa_JK[cq?a^8dh+jc^u(RnS$V"N>Jk4V1+LGE+oNnG,5XA#";Qc6c/@OF.ZAXLadELiTbo3$,@ihb7'#`27tCd%`'p]9&+b?LfQ7SbWNPfY("hKm42RF4W3>Q3E`dZEnphRKE%fK7aW^^N;KSLlJa?+@3B("f`Fd"7I/,eVZB>@mLPXLAJf?_@%\!pF%o$L]TOT6"tHt>ZdO;%s-/H`'6B84L/<Z6DjD9j"%\e!DZJaJ.]7F7+aZbb]@c!e]7Yi?.#@^;>\h_YJ1o\L<FnF,4CLou=PUOcWi%:.Gn--#BP6S$U&T*qe*=Lr9Kq9o.>S]1;\C;]#3>()V0t-e&l\:lptUPBcj1bG&eYl3ffundE,pX>5^tpXD$6G\p+\;EN!,JtfOn%)_u<8c#u0:H-@#'b-IK;NlC^!^oV;q)Yfj[a>D.[(KjQCKR4H_-^,1TqO&aN;6g(FI<Q55<9?K?0"kASl5:s'rUZ.?&5d*B:usTJ%S5Y&s2aI4D!-5&'+QpgJ1h!V1\k<D?!.dI*_4Y1A/r+l;TMBoY$k^Q,`q!KJ6t8,O%L,gA>Yil]mZ[SZPJ)54*"qt0V]CYVbl?SU%Q`f"B<7sH$^-eV7"X2@&@]eiB)brbuWF>l0U*:k<7S$>olgrGNp,g=]@`I7dO+=.BHU#[d7`LH'IEZ<I)1S9c`rCK.,5d@Hr3LL]%kfr!UML=GOm`%4C6sG!1SR;?[5RXl*VY,Lnr3=]AlG[D>bPB<\qYT0ap4jG+4T3+be6(9dIJ@HTkA#G6hIiIpnsWt!2njb+ni+nn%k*bTWK^8[7i"+q)s*3P2Qi@!FcO*7L%tB*q]qSg,`db>IcOp%:ZA6c5I"ur]P5q3Okjs/9^K9j9pk*q.rR#D!S.YqfY+,ZHmj&*"%pZLF^nJ'#7h0]")04-#VTY,[@L#qmu"#3(',mXRNqs$]pa8*W8Dg*l&IrP/4-a/"E]@,\+l102iZbOn9p9pG1QRD7iJ,/+>Qa>2$%l*HGbH2\o3J+GIEX'/4b*!T74h.a\XIf/-A]0C`Z2tA&^3=NfC?i6>:7VYhLqX7dqW-.5]qk*oI9$r\oq?Vu,Va#\-c"B4;H9MVD%U_NbYk[3TKY?em;r*S=VdT*[SUAO6#$^-Kf8BH8DcAUF)>aZF"[l9r6i%'+%,0eL4TUV.jrP9"8Nr%k$IZ]++T6fUa\"8!:iD8oj%7T069(Gnl_I*;mOQL/<\iC;*7]_'58s7l)YcT-=\db8'6#.;2;QchV!3;)8=&"]qfY'$8NAUXN@Vl6`@a$FQ@c0c5:#YF1OeAEZP%Qgjn055a0krM+;6B8mm/;>]@hYC?&fPJN[gbOL5NHV^]U$2GKgp?WkCr9;0*c^&4V]/QBQ>^\nQelU@O:O`9?=*ceiq#f>-YC?&t%F2,E_c'pBanUioA'DBl9]heZJn^37jIG"Pii8J%XH2lain,3,3iP)aZ)a@QtqnN+V66e/OV^Hun=&T#N^\R/skPt&1leg?eQ=o[#%rka^[;*3]s?f">L]3C%BpA*lXq!"7Y5.pXh03,DP="g&gp#c.t^]*-X24Q23:Cf)7H%qSA(c"Wf;\9+MT*P2k];?d/a)QV'UDMhd%qTfs2hL54q5N1]'n71"C_Oj#=mtTudc(CA]UAs.hID()7^YE/pjPJE/^NdrIO:W<0>Lpkqi?B.N`:;c=M30n2TDu+0Y<NR+^paS?%HLcd)jDPX+1MDo3%+G%*YMYl)I2o&(h1"`dU:1Z-\4HFfU5bcD\'[p"%;tB"`\r8CM`9MkM1d*n.YlK$9i(Gk[r9mIMr-Y.Ve:4F%psC24YAW`Cm-4NCX5>^Bm;Vcq)fNF_lJ4tNEP3]*:!Erc"l%FsIsh:6?bH"VM'p&bqsJ5ar9>0)-0#L].=LuD=8t[8s,E(Z%/n`V%r^r-)3f80F5Um8=MGBs[?[bIRWW)JI$R*TKTDu8P/-"(t+2Srl'eFbplaB%VjEI4\o<Xc*]_e00'K&cg+LK98W:1O"^:rj?SV'/t%(QX>u`CKFameu"tX'\&j8O$#NL:H_d2U'q5[Rl7mL$-47j87TB]nK/R4icgTs,R<?Hf(#0qJA5?E5qf[f#^$LpV2'=O;@ca&n0oL%4l@Y1!<2MkVc,DZf(crgOlD)pj=!""o=r-/IIU1Q\GpB8^-=@?V8mWk4ANKQ05m[eaU.R+3&'6PY)9\;SpH@CG=TU;mh<s&o`'uJ%<I%Euj5iNJd&K?lLs[,jIIsB14g2La]`(*QC(T\Q9rkiOd/#t4<2[j\8>l=j[bh%JOA9=uI`.tt8*;1@5k06oU094b(K^(O+#mF!%E<pctSl;Nn^:,_p>D`#4*hTt8SC4bYbSl!/To+>FIX)&rrGdV0InQg<X+0pBs#[7W?f-:]NVlm(]LUbu[u"&05;N62>I03*=ioQb%<W)4^44!g0<;$8F<:MlHqQ')b8+@,94Hc`DI2CFBr54(Rogk)2Z*B1I1qlK"^OBOH.]h_"'E@Rg7mB3Us);rQh*tCoD"4\b<W1H$%DNB;B[u9P/?%1[pWrCW)iuc#3_+QH=Hfe1)p&4:(D[WU*49/m!0E1@$GO!qW-(V.2&b;QKLto]FT(q3J_q]t!l/c,F<RLR_B40i#%;cS3m'=%P3rRSd,mjnE`lBC\9<4r1o@:82r=:Gi%r`>?l?;dS#g7in(@-)l]<QEem/s_R1TEehP>P[a7G4E<ls..tK?S5Eh"]dgi%W%t5=I[:W8pYZ#JG<](Z%HVd?!WNX2onW!#b&[0BjhE%`eSU60hBPgrIreV^h0IeEWgm#>(I&G0.ZRR#J#$'!('*d/Iqo>bqu=/h%<Q2G,.c\I<huBL(T<Wk@ampp&iQRYeb@fasH0p=[?XJ8<4OJXdErYXT4S?k`l$lB[5LT=EU\m8E_OiUO:/V!3,N8+XG08]P,lH'V%ha[EgN.aEcQFB]i*[BY4m*;_t^W/n?41fPajmOo:rcmn(VYiSH_Va%;>:G&_OmmR<k>oa_@jLsq@J;@<^W/n?K4!s\b26\Sr;"fE%a-=?ZaM!e1^6=era8"&ggF7W5OmmR<k>oa_@jLt<(V>ClpD=3d#Z/0fnn0DsO(*kHOmhRr^V;i6&H?c2#jUGs(*9M@p#dT*CCXhM%Y7EjEl(]&es608C"a8^Jn,8<.b&I\cs6>qm\Ne^nDV^XDdfdVcli,!>0DtV:+8qcL[D!lEXnR>>mVauRpn_=^'lN:.\''9B0e2:V%]tBKKU&3HF4a.`;FT:;Yn$-tSpS!=C^\.<N$h%GOn;sVhOr9OfcEEHDpZ3LTo)$N>+8kul]dI.alasoVhP-[7q@RYj?i9,qk<AFK%eA!]#gm`DDJ["Yp%RkgAkC<<FE_P`PmlYjZmH<BAqtVn;pu9+?n!"pRi-JR?IZY`H]=0Vjr_("T>2E(Lc[PZm7dO'L3$//ta"IT(%am-?"qXeVPjk]\+_&q?oK7COAJW@M#rr-a1lJAELIf-IXnD;^9n%^a=:Dh=W'0$=47j[-5T6D>=I,V1Le*(Vo>'GJoe-k`YpVX3'%mJ3NlNt=,q`-k7%o6Y]RId,sjp@8*^Wt52Ln(%=$+7H*Thfspo4@c3N`^@H0hX;Qal=XHT9.G.8E:;iE^34qnP@+:N2\<dmaWK+2%GQ,G)[.'8!%t=B3$P`\D58ehJcTcaToujrX+\o^@LW`2LG+SYa55!;^0AcZiS[U-[n`c)\h!XK8J,SsThu2p4)[T9ZnM_k<s5t22%s$[n+Q$%NLL!Mu>;+kPGmL\sC_lphk!tMNqGOI]mk`a>rhYYpB0@/3jq9MD-_>g_;Hqiujj\5];JR6$>p(WiV?_9NsqY]^*]0F"+%jjt#,\c2Gh00XmSbC?'I#O&;I>eT[MKCe9OV<kfnp:nnFU=Lma;JH!Vdg24bQWj1PflDP.rqk:HS:*d)o/lg;7q[`<J`)%*^\iug%iGSktchW%hS+Ck']UXJ%?i9ZO^?!ISch2[$jg(dfcYq+;:B/tuHG2'2Z>B0Rcd&u-?1%i4ID=Qa=jOR_>qQE[Eo`j*<70g5QQAb9%kq_A3SaYlb\`T1ZZK99:dQ_!/%?,2T/T"I%DjU@PoD)_IAQp($VX0ZAheaM.]10cK!9(P$?OKl@?1r,,e:m"i09uNFh_/3ioD/>@%F=WWAYdIcf\n:4Lp$Ip8NN/Y3k&$sgD3q6iqtX9lVgW@YR=1jf3HBP6WF'LFg;#IdVPZ\>TcmW@)DanQiH<u'jah7Vot>2)3A$R4%j0A(=AP*=>IrEi^:-c?8E(AC3HC;s*^?:3a`\Xr&qFA,`$)8sd)YC_-bL5VK\R+\3L<P076b_ZQ^@+nSWC[KJ8F<TbU9E*BK=Xr<%%277W5j2jo?Ih7Rb0,7%\"'t&ZE;W+>#C^B6Z]Ib[%cteDcccRcV(gm[-"=C3VCS>_qM'l>G?+@Z,Z:p:@#'X;7%`e6g]W$jYSW=%l_2hBaJqO#D9WYAM,k)3eA,`DPSG:;7Fnrj1VL2V4tN%36.8cE>YF+rdb6#?O&f_a-.V8SeF\I+;g.F9bur6';l@h#b.h1q5LgO3%V:p6<CnmD(1T`Rh,W'02at#DJ96lZm]Tn%EdqNE8lRe?q2,[>IShBDNWJbSjXe<g90@s1MoL+tn/CHkX+\Qt>Fe3;8.qY-*PuZP$%H3rVgXds67j/?mQ(;gamdDRtINmuu\ZUW!i5W2eEQ']$kj$_7OI(sK/]rZMFEE@"J[K'Jpp>41Wp%F6Kla*o.kl?/ts8CakXV!T%%((;JU\kX41L9Qr/g9P^rpQ]oICA<RE,E&Fudh5B^m$CZQEda6e;JJcPPbR9RV-ORu>%j6-KN?=*o?S,nZs@C6?igsXk"\Fl$#$5J%eJ:1Z#.-6K)&&QnW@XB_UWp;W_p\'GhkO+Y:$Y(.K605?/[\E4L5'm)`^iTi;bsc4/&n&.B[Y8&Z23f4p>HmkYfi=>H:aT\#F.>G%KA'l_Q+H[1"9S1X_G.<^>*O_5e*5<c6G%e4OS9_eAX\RSlnT3!O2/?mQk"r(?/MVa-1,dWep\O4g0::+q2BerlS"gIBTM1!7lN45%G0/7fS.ZiNA]!GFpPnkX/cCmcBZp2<.?'Q#T7[1!)P*lC$`@Ig/E+an\=@OpL@%lXTuB*ld(-Mm-8p5_V<P4WI?4?YkSWXq6[:MT%T:LRIcM+?>MIrqk>+deTCUb^*WD^VeH`OI#$Ej6BG7<qL7Hg5KdPBV0:l8:%?%aNRjG85FIV0L'B[VC6M=r[+[dc6RGP[<,a@]R(%7ib)_]0=VHN'U`DZEPdj)&RNpU+K"aC!oO'ijh%g_XuH;?+B"FfN:o/[jSCR<sp&2dl2<a'g]\<?.6.t83k']9/jq<?>4[r)B]9f%cYC:^/M.[RacS[Y"-!E=b*<_Nh0ku/qAHE]<p1=?1g"J6/%<6!k)=*2:,Z'HWtAtbD50Mb\n4!?45E)\:gJ0_;:U"AA`K6DQD5D3%#D>!.j-sURa;C:2VmBa27p$VlUWGWXI<a?,r*;qP=?Kao*@EdY%6*o[0MRCQ6<h.NdT^obE')Ke2B$t*?OaP0CCp;\LlG:XIr;Z7%74U3J[\b4-d3S5-W66G&c78mmHKs6V/?HLmDDD<l0ZZO!Q<V9u!2gKM5AtW^p7::W\g7]k\o#q,*!qX%gM"_F&lV.HOuZ+B9q`n(%+GFV^s%K-=/6Yq.^@``u,26EObWgUkEGoPJU=4BipEdeUFumc]O+ldc9JqMf&&_];:hWk,@tfWi;]#Y_enUYXL64Rd,_5#?NTonR%9!_bE(.lP8=`Xn-Ukq&c(<Osm]KWSqZ$P:elfV&,IK%feB34gq;'iW8e]E`-PD\\cMX/D'/(I#eGGM^Fn"@.e8*I(Ul)dci^H)/t%eCOr*_FcUJrRQkm[aL\p;E2Fa%4't_1P)Pt>`gG(8A_7)n2:h-%NT6ddf-&#-f59rLTXC#*>@q+2pa#%3^hSp5OPi'DC,p`1rNKW%?n84pJ7ptoZr%Ip'>?ONaPo2Q8Q(E,TZNAZ'5JPKIMG'f+IsLZXC>a@d^R/U.YM/h`d,,B"fq!gVq3D]oC&B]ae(>fd5M_01*GiA%U*$aIj?(Ocf7WcN,_M30Z;'GZ.s(s7arJfIlKAP/1R:N<Qe5VT4SrFqa.4C(JU6.MEh`_CgJLJEI48QPDkq7d;UqS3]OkKL"SQES%]!i$W*`1T+>3LL2@t<]BIS#-?jnf]6>AI%D9+h16[9KY,BI,rd"a5H1lDdg;F$f^)btP-0>Lp&N%>G^OBQ5P%2J?t/g-tS!T,O(c%RRd6H]da)+Lp\2)Mff$p*GL!LYH\XEqQr^,8W[Bfg=!!d[j&G7^]j!*:\V.[Ok:G<Q<j`(SRmP!P)&k2&L7X)Xa/BldlPusJhind%!>7b"lR@E@i+lZroOF&Fd\`LFVu("VRN22[C'Jj\R7FCK@\i<5@BZCSF@53k8KZS3&B^+D\+QRgD7r34%M23,cpb4",IfAQh$NA)%mA>ICDhBW1(5N<@nkhr.d]Lg\@tEF75?q?/%M2&!DF6TQ\hmJ@7uHu:ZW_SKB$"&7]!eKN,]QM9af`WlCSsiN*V'392&SZir)"7:%KIrdc=Ha;cVA#7\CA:a:-Bsf"U4]A7T@h25f[5Z*b2$VU85*s5`>=[@!XQjWhgW\a><nht()cfOY#R\]PEPPt/m0a+FBm;qaY%!>%Fb!OUUb2&aDb1XGQ_[tZXWKeC6G?-JJ_&ba%D>h5]uRq,Oj5e[bKb`,1K0SX5T]2rTNqsM1UJF8)@mDZ,j1(c##u!cg,-LFCj'pI%6/D\\Q_#:I!t$-0?qmV@GO<E@/f]$,n.'uVY1-T"#bYJ_)r5%9SJNi[hgDqA8`*'^I7Uns&\D;H/O2ZK#b^&6Tea7F_afJQ&/s`n%7Mi/3URmKOJeM;TK-:j1cu/@_k.TR0<Bmn36ite5)Q_u(*$'1+5K;C]1k^G\g-(JMF?A/m57P:t"_c^mo2KW"_.u-tlbSH$'o1:R%h7^@0hAlae=P4*`\cc[V8LhfF(e+eg-e$l;$2;_%2l'0W^$(SE'=U[I%F;KP0Er*2":6,N$ncQ+T>D3DW)YSLnO[\bNH)ohZuMj(%eOcL,_=2LY?eW*J$AK<B?R[A=,6!orYcbJdBcPU-lItV/#7<c(fi*F(q9)`RS]^?dWKC1f?jdFgUJ%i,*e.XVK9EH?81Z7N,X)`^%W6&86*C(on>N0`9s,2f#>1:9i(oqf6j1=.&jjKtBIfTJZ::%2FN-;)qG.5B:7iR&3gkZE7A07Mg=3l.U13[P\r[id9W8R.OneF<\%CN^ESc50Y8QhmH<ekYP!h2-DS&SGD7Y!6K%$\*88,(^E:[A%]k[d99/>aD2I2SKRGPYtD0:`jPu/0!']d>H9YNI<UMRT60$-EBbm%Z'9@?;Tn/6F>0n,atmc(&<EW:0P\t1k>b2@"2'M!S1(s\HS#IFX9;fD5rPVJa?Ik,Tj5CO;'lU)&6d<J$DCeglsdYpK<_IPpI]to%mpWh."H0?ke4*O*FEl27fgdn??5[5G>`@Brj"ErpA+["lf+!b['16LuTi`A::L)]VP\gc'0AUdbN::LjL4aM3BI!H&G"HF/\A(b-%V+&'ld("&t8EUB32/:<m%6hGi)(/3p%d9jUFUMbMj5EU]_^.Qe+jc3ls&@</S*urS\FN4T[P]+pZARsCNY!$dXr&^srUgG+V$g%V%[[1^:3kU[T?rEK[=C)KGfk/Y6T:5k5+"kZc%1qA2lq,^8Ve?q+Y>.F]27Jq;:9bZ4eMb#aGl7i&/mOherTO;4CFjuoO`dXCE-nqc%Z5SrC[Mkl[Bh<(?Y6<@/QM;dST]U)(=%4!\<(#]X/^#F<&6,!nPuUA\-`580X9),!W$,hMWUoHhR$oKu,jRu9"%oDU").(Idfp[\%OpAUHd)MNuJc]jV>QY>T^sN)<VfH8'PfdD#kCH6:%ILiYWY:/'(gF/4mKgMsL;BB=?!uZm.6,QM[ZoahHJI8kYW$QO`c?1[j:W3^%).M2QIQG7qr^51)_PCMPlV_p*C?\<NL/LIK5_GQZ<Y@;YaY:?j!:f?4OBQnub5mcb"aqDVd0WW<_TF=r;ca^^p,5e5XB_UNPEafE%YlV/J)i(],(V\j=:$Hsp&?(?eD4%\$s66c3!f>YM9p,6L"P)&G"<Tu^"q-DVQ#6$l8mp]o*B=5dN7b^8op/X4R$E5GY^!r[h7CiI%ok2`R%_$`M/=iQ4lk;d-6kdg-JCO56HXVl1STF!EI*C&bL]tD-e%(;qZmE1u<Ml3'Y1n9E4(!$K90EOqDu_GdHAW\6d&*7jacR<!%_dY!QaH=8ACBM1X/DEH8@Ut1ddLKq&,O<Y'h^!tV=S)B?/;2o\@QC5TZn</[[oeNhn>g[HJODQ#/)SX9&4tNgXSngE.L3-bO`_7o%i?Uf(fX"aj9SUK(HSaoJAOq2WSRk/FUt-G,<(C4F\P2+`&'Lsa99GJs%Q375'T(Dk"1bSOQa7_Dh))6R`bFP2<Rh6;r!c$JOqh`U%OWhe^,9R8Cq#`gMlhLs_7GVh)?EUp9QtgE\hMDfoh=[ZMRcP;IZ*\2N9**Fp^05WDP;K"4=^BX6^q$]!>)Q`'=\):]=im/i7lg$\%K#Wf\+Is(7?&^*gWmT!8!GVq)d3a^$>$TTKD<8\<^;\e3,(WpYQ;%.MrcG>4<RQKLG9u1uHT[W#>4jR+F$-=oZkac)Q!>ZB4aPNA%)C;'`@LKmIe3LEI!A]LpY*RdQ!9dP5.u:0K\c>\YgnCQ%oRcqO/1/Cq5!gq+fo3<FS?`Dd&RrXb"O.]gH]TH5kedDaYqh>1C@\t1%aUlFm-U"4mre))rR+`$_o_mf%&U"P\$`WD7CN^HppJNA#9:J*QqQ'I%7e9dj#H!f>d+B]b97VbV-%Nm05p/aArDmm-#3"_m_-poK%2YOR!=BP\BISNd3g2FkqK:mV!Ft5Og//'Ei(3"Zp>ob>&4!COTbCPYL_*,2"2O4OXP9"A=.u`&iM</u*j4$FuEC5hf3?@7B9j;.C%%[HC]=j:NG[<C6dWNL?_mHn:QJ?%A%bJ.UI0R1J?1mFL1g=C0,ZAN9lND;c&Z`(FAHV5pA=oG`3``c,fL6aWHU?)C'Zd#is:ira(%VWFInC4@((%Tk-k3LE7]TdH8d_^+KnM]m(!G'H]D3H`Q+*E.'?-d`YLr+TG2NDi7N?rF[(oUL_nRM-:^EX$,J:;b%^)EI+9@0m>_%Vl:ahQ7Hj\1F7h03bo4B]mm$a#>.b3C7NL&=M[^leN!HQ5cbF*Q8CnfSdaO"3-7uS[ra.1$a4@N6/=0;O#=No";Z673Zm?E5h?ub%OOlWij[cCPY9YOki7S?+V/Z?SJ>%7qn(0GS$ALGLd+V09YNsu0:%$cHc0Ujhb9`ijLPZI:B_)3ko0@>5LP%h,E=@'<:_1g#"I`>*%=Sb;N9h#Rh@P\<=b;Pdb5U4V(16QW_niAG!bS7ip)&/*"7ursXf?%:kU<TH;4>E\AQ82$/a(omD5X>*U*[:WH29Hj>;qOYM!i"`*%a:0r`1GseI/[6p)>S.2P^8]I:2oHsH0=SIIc"i6!Iru(k3H!TMbM.Nr:CKRCktl.U+*:l+fJ0e57S'np\c3pqjZ7P!MBO9p;k^c!%?>al..Z9+2Ea[b02$dXErhFq^2:.o8;W(t44:";Y:dOu96'GMe]e>3#+D@jA/^n/*0.s`$c^llemCJeVc&BGgVuZeBWL.U!KQ>H%%],buW(rlWP^!>OsKP48:pMEunKQ0*F)\r`G>M7LI_%,saEB1Yk'pKdrKn'(Va#&d::iFu]dLOuehU\gb$B?`J4m091$L4k?TT1Z'%mk@eq`1U4*#;_!%\caLhMN_LF3R%Ie\^NEQCKMrcV\[Ug3YCQ*f07ruG?>fAq=[eW"'@IFhcTC.+L,L`dr;PDhI^V48(BKiWE^dK%7f.@^>kErIMLJf7=lTO?Y:=P:cVLolh57e+:g`RbA'$Aj0)<a797AuK3=!A28B!#""[BB=2RX!B%%7QgjZXf'Y8d%;k^n_@(gh>=%Gqg6.<24m=`"\ZmLHi2kLlNtY0t>gRjLuL@_/G'-nr'/uIb_rW7f.@6""sJEbJlg:Eog1Ha=`NrE!otD44/mfo\1%X:2E]2],;r:%l6TQdR<9kZY9Fg,CB@/UbWc,EFd_L!!-@S>fo&>6[6CSKJC^RB*hGNsFPuN?<,SCDZb>(\ll7-*lenZCUmbN,=2B2U;>J%08HP:h%2JDP?O^Wgj`Ole!<XGO6,`V]!L=D`IEFb_cmX-/_O;`^$%c90YUr-Gs-LSmn'F7E,_Ua\-W3PXW1WFWhFSj0U%9*]d+:bUa)[9ZO%4`3+pR&0[;/`kuFF7<1_10r[`[?6lhJ%-D*^Z>h,6auQN,><er`IOm[R?-MH&R8V@bIWO<gPYpW"Qkt%@RN8;:E"nY_Qpo-W>l=p%@O_!(,33*Rcl;/5Kau>_A8)Jul=*DH`UTE($lb.K:cmBR"*A8V7%N<9!roHJ1SejRgB*a$,>'aXF5LYReJ,+rJ<jMR]@mb??CNl1%'Dnf4+:duKLq4Ysb5mX3K<_Js`fm(,94e`dYDC"!\TMWKB7m#gD.Y<aJ?HGp92F;ADKF^9Xl]Upg(NajO'lYYDKjncCs3Ysf\9Si%^k2q"ZaD/pbW(_u[Qr8UCUDh=W+E@]M08H@\;D?3nTi%i/q(JLFDWsgU@"[tD<Vg[!7_8"g*2-pOrgWN>q\Z[F>A9$(%_dBZ5^V6%@bi]fPMg+p!4Bq%d.3)a"VPG/HC`d&_7;M6H)hRW*Nn9"NA_"q1p<;<lP(,#%@nbK3<lgZ8Q@nY3911mW6shN.tQQS4tRioe&<=r%\pR%^01P5h](SQLK8ZCn@jW"Y[95Qre<Z>rg5Zqcd*-Z(6quKU8lQ-?c:3JA@(g]Hq+cNodWD5/Y_DZ9Ft"'S5Qnii^f?,/#<f&E%D$^[i>]H0lY<B8n+b60([#$f[arqTWXg,0_kVnW?^bM:%NjB6rg"@6,3R6:(1bUdKi3aSJeAYUg?KHVi"p6,"%nu=Q(J-D++r2f?%fH>mp+G>(/gJe[>au\-4TJ6cS'[$^G.Q2Usn;cC2NV"7Gk2f&C['$0QcHKCDeFfCD<aR"QF"R!HE\)%EU8m8tfJfQpgYP>)#rd_r%8T$2'.b-ZK'8"F.2KgJ-5?!u-(!5HS0pJmB3CtiTAi:fGBp5Ru+(]*J[(m%H-JPm=Mos<]cB8Qf2ct)J7aqV!:u5>q&JS"KIscD<%2:uh\,jSS866f(./J^XMjZj)/f+,.J,31;c#V&IW&3GY#PQ?PXqOtkR3Adh%)N0Q_.nM?[:6I]dnH4o_Y"5ajnrO_$i9&@oWQ^/p%&]ee)1h&iQPJG^%RB3uU.R$WX7,_iPX15nsL']"g_h8Rd1EiEo]hPODhs:U,KP2;r>LVD+3W@!6p:PbT1i*F2-oM2TD]&4CN!P]N%4bB%1Ttn"`U.=H?^he+70d70nZOMa>0qf7JfjX#5ku5,-4pKJRfns`2LOS$1fTD=L$F:oVgibiP`JQ?8@RZY,ZQ]P!X9`KLD5J8X%FW`5e@7?hQQeg:%;@]Lsh)9o,0c6uDV9n/tVg<?mMSVG5]p"Mk)[864V]fjVdDk,5e37U(i+&hnO]"8S-/2t-Jg\=&La7"XJ2Tt`%K3o+-Lf`Ld*/V9.7(+;E!=+]U"PI,^fbuR?%s3B9*Z40XG(%0LjY4Cfb^pEFEaf#9qq,&"fTQ>rMhdM#U]X?UGY3Q5e3IEd;/X+9%^f=KoW2:do9"u)\2Vtl8#,U(inT1Lug"+o^dFmP\`\,'W3CPh+C22^.:';[aN#<iL3JqKrJtq:^Z$"_D,n1D;J/Hr^=dt]Z=TE>[%$iY2UZMPWn^oaY?6O1Ct"0r]#[H,O5N>=kP0MPuO@18FY2TgTGYh2q`:(X)#/]q9r7N0(U(?LH',n47Imi!L35I%%U2<1S+Z3:O,%+j\W/VK0XiR6jL"RB:E>fYGbtl#>jlgRJ=i0X5'3iPo+565u#XMc>p$Zlssnk)OuLK?sgQHgV,:)hHP]LEa/!,l'sIRFG@[RTU:c%-]@;=.[N<lf^?EQ%C%L8-FS'A.MhGiqC3L<nN+]dPN:_\jer^U'NQ0m08OJcKBcoM-pPYY!34\+O)KFZgYae=VS&;KL>5RQ$>r-/%P`06QgH^M?2DC?Ji(Do#+HU`-O4#;\+gj`tis:th/N9@T5XT3Hme2%ajb<Ee2Ml6@hDUlZ.^Gb<7>.__#&$kkJkm)$ZQ0mrHZ^-p%(IMZ6[RHT95XT,kTZM#KX\L;fO9fAoo8KkY1sWu8'L]^alI63Ch$CR82M3QenW9!Wn\`^_O9ocCiGWK@i0AiCEbpQY#$sii%*tU\%6Y8]CPKd/H5T]RBJkfE[4.8L"f^OZ=T*7-m<7Y$"D2)/#RirO!,%q$^LXF_VCD"M)&fC0XZMBbWXQqPfRJJ;j)MT\Fi38)Sa'CZ0%^'L=4oBdVc^V9<f-2Z#*T\nWt6:bQu]bQ37ZSh^WWmQkT6!?HT_=@,\TM#V>H8N3l"H^<ArW_2^3*k;LD>P%k'-@&tq\<tl>MPbe%^1X9aqhE?d:7!<@)+cqhME4d'I(KSVG:Qb&:.AN:P57BNa_:(q-GL;i.\"=KG&)WJDOj&GXal]Wq0AC3VECn]gcB!Jphg8FW=Z8F%204k6hZ1:u6SEi!Ae(Q&r(]B:[@/,+\*NQ(qM#0KVG1:Q7_imG-eYa<,Wg1$CrZ`VG:]X'h:K/$j!*tEMa$lHg9Z>'AW*-`*l1$#%Aac8V`PJF*m&,sob29il!9rZ.-[[eSBTYjj<(oGdjI1R$]6Vu@=R5BTKddO/YF^YBdZm33C0H49R"(XM#nIq6Is$G1+mK?[jud71%0PETPX@YDXQb*S'bdRadEGf(1S7FVJbGlYWEtO>DM-i"*_M[QDR8o@m\SP4(J]rs[//&VNa[A\G#lJdpCkXpr4>`p+mX/\irl[aW%nH+H5:4/?rD!acS#ED,/D1\mHR?M]Z.,/S@j*FtmE_'KCkdgqI'ZaJE1f,Z*k5Ad81GDV.(e^q"4kN?G[I#i/]4aa(fltjrRjop)%(1e,A@"^F0'm9Q+MZ1ioZk#irFNHJsj\e60#i;i1-cVkcWhd'3&5u)8Zj'W2/mOE8%:?Ur$E1.?3`)4ZSL3lJ0'A5cao\l)&:*&b%_u6);0fWfX5Vb`sIZ53&r.rhpK5=Z_+D:a(7Hqa,;n:s/C^h;=O9Z4_d$aVgd=GWID4#*7n]*"C%iIX=;`tC(Lg^#R/h&bu"%.uS%>X&K4LnFt^bTI-"!2<sN->(>hN;4T0!+4UR'Jofg/EXa1X$*i9_?Nb/EKEeS)RGll?G5e-e)CE7kIh"2@>]\,$;GRWKEV?jm$=Mh%,qq47I#j(Fh]itm]Ah3%[t=$qO.\Pk1NO\%8`4QfB23jqh=:8ZF#L3<laXTdM7OcomX(#QBHD1qV#um%"GaKX5;1329E)k_K\>@4%1S2Ym50t5Qdq6fs(5`)Dg">)-#]I>oiX(,dm;P^&\>U+qgrlrGp\-j;Xp@O:1n=0mpNA&(#%K_LX/L(o>'!\p%Q"_1G];!%c"V<)%#A7)6^5bcM-Fs#O`[MC,GLOVE`0%g?+"GRWWa<n507l13#As>`@)Fd-%h\qS,gK8<bKFH"Qc:/?#RsWnJ0p1m75Aq>lYUF_H6(T[%kQPP3#2r/29_&j"4?u7LT0SOXG>>+V3Eln<K1m%N?h8j2b[<C,N6(!d%4l[\Ll<@#0kBgVLU:i#%N0XA;>bYS>ndO?U6sE[6udb-%1*_W(5!^BM:QUFm!AmZ$6NGB,4ND"e6ud=ZPt>NDE6;u4UVWZa`iA1".c3J@MhA&L=ceg"R5m)>:gRB<hg)M9FL"3qOB5u_2F!(S%`b&cWENMdT+UOOt''7Km):Hma#\n$(TU_1FB,hhJYF7&g6=YT:Ri3(d1_qZL[]V@nF"!/$R<+-jG\CoHS50hbP9>'onYRurI$GtU%\4`V2Q6ai#+[X+(>HKIbQgu>R`o<mA''b5%cr^M&<N)UrJ@<Epp2L?J:PBmE)B-eoP0M"Ije1f0ktIHe%?6@?L;j:0Q55H)@o<8t%SYNfWq+o+q!_?iQ\sjJY<l'p'49F4'ic'*1a<P1>W0+@[6q_5T'@Hi&M#sGoJrTW3gehf%ae.r,BfIsCBM4"WJ$5U8>^12pp.P"8%9L1q>;3)ii#e64<#%\I'\l?q2h]/*24rcVW*9led<*P%RWrpk[NOle$8,^B:(h!rlM+q#)G"dnq&[I4[)3]-="dsmnCZ799#U_Mj%Pd>71AJ)1C%a8-8lLOWjolC[^1@bpW>n8DZUB8e1<_]?POo?aHY>d+sUc%FL0Xlri%i0qe.kZ*\)O22g1b'*e1b+$ACcOI7N=$TP%Q_]tRVGZ:VpT>VX.Zcc,ZTP[d7O:Bm7O<YT7Ko(M^;fdnZ)aHcL"koRTXC;Go,"Q9!FZKLIoNbQi0TnS@eD9%>[?W`Jq\jRGVE2F%7<<Vd+KO3i4GsQ$AD^%Lb/#Q?&<lW.jB5G+BLagU;f.gS=l-T\YE%g@]3'*9G:Y@/Mb<?;RTC]o=]?TD=]FBgg&Zsph^4,;1q;nY%2&B3$>'a,P&+K`_eT(gd)O1t/4e.4rrQ=5*<Vd$W4Y`?Qr<3ir.<D-jH7E3=-:o]Q`;cMmR.O4]CP^O`TV;#`E2_&QJ$k[.o)q%;%L@Feui6_?/_UF[r!_i%ni:o=<JF2GV/2X;Pd)ejuB`/Sm>!IEq'slGH2NPLP.33+#L&%iLZ.2`ER1_4mk:6N%"NT2NYa\+FRi@)Q%98dinW-!rA&]t//&tGh0N54.Z8UQo2OI6pJ)8\XAaNXN;.^4s`9SH!SO)QgpgFHuh)l"h`KsZs3#+>[>)&j`OjL.gOFYJ@(YiY8F%*9fR?)'^9#GRW.)5]_H8CB<@r\rO'3p_1fm;`4\97IrN!CB7.1A_)cVQ9J2<$g=OoW1:61X\4FBT74DSq]U2<[:.YVP1lM&cAm2=%_%e/\0fWmd%Fm5+*IdGs+>g+/*Rr7i$Wa8?R1p4G>31NkNMs#(Br+_<%>98@C(DQ1Dc:ZIRM"jfL'JFV^^E@`#*;:+\QnmQkcE]M%R'Q)^etDH')S7u5X)S,%=stV.;RY5Nb4R)S$E=+e!?#l=1W])LTe;6)$D/<c63-arY"p]@$R&6P7EE7/TJt.Ho*ua`PJt\5I-a""%."]>L7)(\Bk9N#&nSt+>[.dr\'r;_-/ZkUXOl]*;cDo]tU<HZhgnGjKNgF/3d;gHdPHTfKRF4/CE"]"V_O\$4C*ZD)1CYoRMCQ<4%ff<WnP[8g,aGcR^o]"98@VLijkmc"$9`f!CC>Hk*I5-u>RP3h4;>=^fB]<,&^9fY0clmnhd!9Es2aN2D$S\&n/-=BnBk44p-DFXj%L8hg&'DF+n3TRKMC^d'/:6;Hf!Ap&X9Z0h&6=udT5%)Fbd!7AE7M[_D(YQc.A,_;,MZG4Q98Ue1TV:o\crAkZr7P"r2>9>3"%a#!%Tp=<I_J`HnECs2:,cn&4q+OfF_[R4O8u$`C2^-D`]XE]:(W<rj\+qqm/))7[[^hOV,AXrSn._6=8`[Ma%66(l6Wg>o4LY$e'4<d4%`m7G46dDH]&,N3GGl\mLVd:HVj,W&2&q6u6p*;UC]a5BEO#)IBKd%]\Z<jZ!\C2]d9L:W%VjB4:PKA-EI4jk,:NKbCLh2B$&XEEt%0\aAu'/Z&#!=U7/',)egaf*C$Sajg@4#OMVQ84`cTS.Hf/OKG:#JG+`R<RSnRs[;Kp?Skj]:B!_/u"*YP(Uf:+rFA%;4V.&4+,.!%$H"e2%L+dt:Ip1=BBK8$IVe>$2[uaO[csoGgp0i_N+rqI\iQL?iMQdbdkfKcVgW@+N>o>nK.hYq`IKSBMrb$h0T.a:-;p-,P[C;M%ZPYn#.fgI8n[8U5G!$\/N.Bdh0H[.^-?H5ME)<A/[Dadg.!0lfAeh&O9ST8lO0'4llO(c2RiuRPPXBDAfuRo??sAVr_AiOSWJQ\:%!iFnM`c*^qF^3=Pm:8+:FV4pQ[23UV0-ZYi#Z$A1_*&[6H?E8p)4`+qN(sC1UJlq,@b&(bN(uMDmH,T2SWHu(fh3,tF9;3E\/gcm%:&u8&VZ<15$/(]10PSP&d*lEF!b$1CnXGXND"0p/CigjLH_,^C3oQFIS:Y?p6MGQO+,eMQA#]$U=d.2FQ/[PKM)iu\3gE(\$%p1]%'VJlW$D7\o<85JH,??2Q%,29q3tNud9[)]73bq3_!"G]%!6s^a#1Lj1Up_b.B+>\mS^/;"TSJ&Tbm>BTeKba53?><pYmKnjDCTNA%&[,tQG()+?+uik*d.0,qg]M6CpF)#cKeC6nB1#X$BUPsVgrCILic9eYBK09"W95JY[_rHXZ6W6>kJnm`r``$`b3__&)>T=*EhDY+%ZHj8I`B1$EQ(b<JpSrDER"J+]XoQ^?U-;Y;';&.^["uEb6NpjHdn.HP?Hf^mdbosR1oDl'ZrW*N=/RR$T!=pD"#Ikjf,7JaCBW2P%MDd69n%tWpE>c:8Q2BA&2O.M%R\_&@*l0c1=7;dH`U%[u8D3+bWA8T&.D&QV0)U%_PSG,K1Vr3"9+t;QL-:A#+\NQne.H_h3eAuM%@^2#HZJGr"+;96R&p0N[D600,g1BOTL7dLN52]j<0JoagU%ott1A)']9T>1A(T:;6#%SU5?)@hYp0=M9r(p)2=r#e)1A-K<%S%E.%9T4$GZ0MG>NYe31amM.F:f&Qufj6L]^YkS"o&\tpI;.,',33b)&QGHVCF^&]-%9tf4!+$NNZ*6%Po]SI2`pk:boMu@/b'A\&?h(k%b$u"H^#68;F0b*lSP:;>NRSdsLC;N#D/3tjd]^gg)42[`<NHXla^q$WWfRX@[EcsT5'Up7I@Wb#bM&MikEaX(P,qM!bh*(M:A7A#%\Cq@oEmPJe7YD+Ne#a^BY,%T_H<@/fc/`kg.jo*=R(gC\`@n!aCls;e=e>\Zbq.8!0&MIaeZjYXK13/-?k+j6!SsO,@YX6h#p::p%^dWe-`r-(#*KY8Z'Z*Xi0p0FqqNh&5Mnfokq?GM#,1q"LJ]XqTEYecLGhg<'(HgBLKQ;R#2hIW;XPaQ&So4kS,UT<5\*\DAoVe)i%?OtVFf24toFCi4;$<Mjh%%mf9gAcS7g_"#/HrORtHhc)enc<?nQV];O;u3O4nkV=1mIJE4jbM[0XIsFCatA:/+2K\))m8gcgcZ5h%=4VA^EKlr_L)2#U*+3qg.S#mCE5]%neec/A6f5=#;c;50;TPK!PB*>.<;2e*bWJ35Afee9,Gm4;j?8NrLRCY/_or.X2C3iAUJ22;%.LQ%,GJDY(gk^:'0_5Qq#XS[31fRfr-c%Jqm5SbVM)bkU#3M>lp5Ejn/"bYK(?eraJE#\R5ZjfoPI55Wpj+%>$N#GHA!QGSgmXRD%?VHQ2dQqf==6=?allY[(IU7"WfG=PsCL[`$ISPE'R#gQl_d#W%Sb<483nlR[$bY"kqRk[S^Io@971\XSV-I>sl<sK55\".(0_>Y>%[C3tj%P[7-!W'MIQ7Z>0]3ZW/^&\1(V(F?U<P2$&,!]XF">I3dpnB_SL:In_r#p5;-"4N.`p7_-QL[ptiLEA,NT>n:L:Tg;_$C<W%21\1<l7R?m0&ULt_mO"j4uNT'B4\E,fZ1le<AW+f6eq`$c]Q5NeH4G^:RsOq,34e/7o1;m7PE"q,]@W<:.r!3"2PL,Z`.*$c/5O!%pDtG]b5P3r5]c)P6f!:ZnO.f(H\V0dmMR:Kn?[h7M29()$GVg<&s5YtThEn1*l';oH7J&VclX(M"Ju*r#l-jD&_)TInVO@t++iD-%7SEAJdIBsj/Tcmo*p$EMH0[QJ&b:.WB9:)9e2H<b0eu#<'^>(."5Njo>c(O&1<,/7:_4e"W-\aETl*-h?FW,Iboa(4bZLl\U"Eh*%<3.*;#AA[UUC]8B)=fXF5fjpMR):eXg#=m":BZ1F'"P4o6Ti\QgZJ=.mc/0N>$=B?2J&TG6es/.\X+$6A.QGu]@RYbLUq,[XX&FK%\qtJ=+!"/PaueE]4+dpBmr\.TQdVbg->/>(6esPo%s:Ch)EbI%pZe^OHnC)8p4p5)V!AdM*b\Oj2'_o*l''d4PTZDkQTik]:Tcn1%c)8Zuk;@m3iVC;KT^^23nh]+#D::r94ZM`jJ_jT.nZ\[q#&kt2S3G.R!XEpRGD_ZK4gh9RdfInET_8W;9Rn71.8(cL#a0oMo"B=3%#);Wr25CIen7i$F*I6F%$gWc5L\1^se5oigPWg_!D#jcMjE1)U[L)N3a>:p:5P1ll@?quDjH%kk"#TaL_5gLO4toZ^h3:%_91$Mr%Q>R5HnGNkGYPtg32nr^;p<JMJL=*Godl%o?DCa,]YR#Mf=9QNH^i3?c-YS#t@)9I;rifu7X$2-sTj[qJ2'WuJ_[83JN)%I!@H^m=%Z^esgSJ\:J'3.GJPna(:1P'/`#B@kX_iUY(-@^Ga*9#guXA^#Y&st:qHbr#uF(C6i^uVKj=HcnS_A@u=0=8sHNV6Rf8)<f1"3dsn%1-+X3oas%@+=Ga0hQ<F)@qM<ijl1_i.CZp>kHtc??]^>A^,40Dm:N!N<9Nk_lauiF](t1YfE\VIW36FrA9DU8A9o_!I4FQ.bk)Ub%Y]0+^h3!Q-WhF7q8V#(13[T&PB\7T:@bmYn*D<Ic+utF!GUtF`dt/$jB6oH.L/`,/H!Y&&0f=`eN"1Z4k#KuohloMRC^f4dM4RJ$%W?9?X]I/#_TU=p<j&:JU@4KWoSJ+.h2NR1c@UM'q(>$`TSg$!L?N;t4';2"t'`KB"RB$EN-sKtERA^O7VPa]FVPb++4uh>%](D=c%lr4mjcg`?=/)j0OGVZrgJF4/%!6WL(80tBT5[e24GRY`@Te]gYiM0o%KZ89tmt'#3fM+Sq)X-%YrCKe]!89FGo"3Rh1UY4tV2"c/%.@c/TZKA^+!KC#,J9HsG2Lit;:7GtUm8O.:at8$FDY1b\46l.JWRUTDRH^a7e8$[!nl=S&UK;C(Y.f^:f6;lb=PT@0U>*L.L?5EW%aB/cO)g?VomRK5CN`-M]T`]$EYiIQoh=H'io_"fR#,c%Dk.@(Ji\c3J8E$!BgEN';e\&C7I^h-X?<k,Teu*I'5\lj@>qd$=#EkG.%gq@N1g].d:D?,G:PT!m>)2Ae4@lAdb&fb4_-?^(<fZf<n_!psTn(O?96^)[dl#R1N52:sN$Q#n3h=e"]AjLq3SfgR0\9O2hgR)]c%,)3L`iPH%`Eu497*6/6@DW"q9mV]m#_^Zhp2)O@Z5_=u=!l^Hel>hgOpggT;j%7(0[NL4!<,8+@Mi`G=6#W8p(-4-nP?$Pt_WsBt%)%PTW]#a2<qK=A+QH)jnA$db!)ltB!ao)r?]lNBnLp;7\eKoo2<A1Sfm.-4B>]tn2f/=a9[3@#c:97.`DZ$I%n^ofS2nEC^*VIpb%0`JcW:%SdNTO'[0Ej^u"eMOa*Y:r!Z`MsNnm8HIF'r(`2[g[`"]@b2Kd6-!+B5r"HoXI_6[+BKN\bXONi+F<V?`A)H?qp>s%%lGm%Dp.r$&j!GV.8aR]X;[uOb$hoLaNqSOJ@KA;@(rB*KmMsHNM(V&,,h(65k]N0>5Zd)Tjk$7!8s<p2O1=l8uQAF6LG_I?teGB5PHGe%HP8Ukh-rMK%jiQ<fQGio4j2Rg1A)J\Z2BlW]rgipYfC61b8\6'NAdZq@Pg$uGQFr"Xou.T8'nTTEIFE(*T8%:fu5"dA2t<"/frOc%=l(VIoBTX6LMX>F:B3/8a7HqE1`DtJH)okZ[5K$G][A/")a>@hdWi<5ll`-(#/mj\"\b)lU&+:W/OIn4XDP9k(2^kjd*oYP+Qn$N%Hq:g0$9eGTRn!:"Si?)fDQ3<:ga6Q9(E47FbS-o-%a]iFYtR9CkD_3U*RYe"b.DAIFqPkOIA3c8a7;9&DNDt=o=RN5o=UVre#%?/%OmthXQ%e,?(m[_2"=PkTU:Hpp7`Z7Vbol1]"-f-8Wi5.>dLVKS"*C<J()r8)as*XLhG/0%<[''Dm31AE]skl=j8/iXTKpY]AbdYr%BS<U*!,.'LhCX.ZY2Sb9b6ie+cj4n&BE1Q4BB=AAG&<`P7h"SiZ=U8GM;MQI*8=WlFiQKF'NcG[.CiPagh`\SIQUI+OK6BOSf#.[%?@l0&0Dl8@;#nXX5r='J9;UMM%ZAbl3l;2b].:?GcQum:o:pi8>#u-0Af6S'JE-%t[HR+6YR%i)5Q:R+Lnlrb51JqNEt"+iotr8#%+9acmAG8i#0_0XoqdJ6?`Zkso\!N\WH!Wdbd0NUIScdbk45uY.K\u3ha?Yc'n5jY%bo:fS`=pF+2b^6C&g=0E7o62J>[*UI3V_m5%K<Xo^@`HfW@f)gKRiECjVk23W;pT_[S5RY^F,#u@o.J`dVq.C*Ma>\9aonGrLVoY&0CnAk_[p=?lmqlf#Z@c$]-0d/5Ft1XX82]N%b@N$-F2miD+f1aU&Gqu08876!<8'@AYhO<>FRlpES9A67;7&J^jf4)b.IEWqC*Z+]gA,_9%Z]tJ-D[&@6nLS;)65TRP=feECr>J5%N'pq,1Z>T6?,7=\b>`3am:;DVKSK17^p3Y-2$@`c!/JdT<)eXV06!K(%%1l'!Q`A$0$NS_V#+XWD"b]DN')]$p,Oj*i?2N_:"dC>%h(Y3T;hROFg#:h[V3/Ig@p`aG&_L$Nb2pSa(GIEd5XPte?l1_(jm0M6$B@J-J>S+gE.rWS;V!L_V.i"^?%r:O;Wi(CGQ:/A)9<@=%#8S4Z@cYE](oB;)KHbXp+^qfEPA"g=d8]nOQPOBoQ#l$Q_+#*"@4dm5[]5"lbk;Z53G^MPo<S%AEbfB;W\$R:<<p3W?C?#qYa[W+%.[,j<*3Pb;*2<sT8i^-J!?@k_>\>&D'%Bk7)rOZV2!k_`]:=JNCVIAX2>0MZS'Pq(f0'AImu7@%^!T3MD!t47)VJucfGaju]obSk%h5<-&CH1NpDe.Y_gK^oN&K1;^5fVXt=D1t5'laip'2ns8/q=0?&nVO4Mdetb9&?TPf=!]9fnfujRVB2D/6sA:eElP8b&@4B4QG0e%f<^ldM['p1ZcD!g]uO-4jR^7F"#uh49O\%0Wu.Ps]a-Vs.Y>h"6U0r]/0X.UcpIA@2YLIr4,D^k,#TnIhsSAGH^-D]=B6WBmf?[o%,o1(g*h]?4RM_pjc&gBJArn,8WL6<!p'Ybm.hZUE?r"fZboBg?ooV4!J"*!;YO&q.3I<E2b21#`[a'Z!dIPYI/hW;Qh]p[nlu/X=%^Bppi.]2Z'aQ\%-a?1Km[^_S8Jg:nSUsJ:P!-`o`S^g=t_l(BD]a-WHD[)WDa0g0s?-r?@UYW5<.X_i#q>5iZLCWNHk/uPM&7:T\%$$Qmp20\r?Z%`urVEe#VE'&GCNb9YbAd`SP:2FF,CCA()M+i*`?KLfU]`o$E=!!cKi?I:B]btAJ[PI$gCf'JJ`^bC3,:!ZQKM#nG%nL1kpT74FZqVl$@_h9F^04<AdYm%g:7t'P^0atEfpNW@%^W@T/FLAVmk3gKUo&q9rEc@sNl"]hV.X@*$'#3rRN6BMm]`EhJ7Zb`=%>h_=6i2EOYk&di"G%2D)2H-'oi*L",:bCg,aYPWR]a5B1-.Jd2]_K`[h^d6fI%_PKiE0<;r2TqL[adVYeFk!W;c^bc4e$/%Z@]>k%8oTWKV&#UVfR%(5Aetj4oPCD0ae>5Ib:8F+I<&`PZ;Hsts/;Q"*E3TBG#rB(%Q/k7oQ.u]NI=gI00=Dn/Y_01KLjTr#G]SfFjJFt%[113P66iFi5KDL%+;2CL$n%`k?>fDOCHLg^+-`]hrEs%N#,mSI"0s;.c/T?RjA/@BiI`_[jkAh%pUR^5KjbgkXD$,F@Ae.SKl?fd%d]mXqDY-3[3pPnER=KBFin=`/a@:KQA8V^N`;p0gZ`V%e(r5,n:uSDT@h7J9&2RNW$F4?9Wbq?d<o[4saOSffY8n8+m.O\l(p!f"%>dXjkL;=7\Z`aO>A[u2P@P+!-1s3WeBsP8T+_19O=ma.p]$hddGHtBTKnt8?mu-9h(5k@6dcC%/p]j#5S,Zd;Oa^a0,dZ#&12J]J%;m%#MNs+a%^Gj#``3IfiO@?\'BXgsj,32_2'>6R`<?^+Z]?-=A6R2!@K2QIbNJpLk.F"'MLWQTkV8RBk+NlFZe=$Y'[3gK#:T4d0%(K.s^$u:@jr$:LURbI\!4D34J/H!#5^lK.:BFp]QQG2SdkgZ%=A8VjLiTXgs$m8:S1SAO_Z>C@1f.Zk^RB/dIN*::3Ne;)(B.I0q%((Qd_0[\tJ191ZD=[M1,bK)r#!G)>Ocnam,F3ODi0\\9Ubg'0>[lF?2CQ":(eNn,D=6:M_lm<)eGjKKeES>=XE#8XA]CWMH:Olr+%*7l&u)mXW\!J0^iOE?R1&7g(?bN,3ZQD^5`:<L;_WQWHoRYc=g"6<Uo,%t;A:n+$Li,3CqA)j$4S(<44e:hLq%s#NAo[M<aHbqN*%Qq!Tm_D-GVZkuLs#)M>SZcs<NILh2ZlG?KM>:>*)RqiBRN)8a6!)7>58^Q)qS45&Qgs_7&Wt($G+,oq)UB1I^#04'0*DcN6&.L(7%@\D])"RuTrfE_3^h?ZBciu"&j!O+K*Ep;]PJO#K\!0'J\e]JIikAB^L4jbOFZi!s%E5m865[/;\:j<ogWIMq$0'/8F%J125P]fir%/bY<]'LBI[RC<31jJ(aIhN/2F:D=8^%ssl0m/U2$h./k-#gcss"Al':^&&a46JXnJa%NOL8W9<@2eJ/N)sDpp2o%)ppmkW9X^6i'%go[m,jVC&s7I+gg3,CTOloJI_;8]L+2EFt6.Zq$6_KG70kl]27-dI*pa1:b][OBZK4ohKs*3Ee9^#F8r@0;K<DAd!%"sC7[.:FGf%:=tq"k#_W;dMCq&5U38Ab&-@G`V+Yh'Ol[%[Kn<lj$YP4=fO%WY=V5Op^Mk'+C;S##q-eJ3"Q(,X64X>b!naAVpuM9.>L8dD[I%6%#2jS4LB]C6eZ\PV^e&L,2.hrl)Vd4]4(/m/GA=N5iKUIl35q-0/%qI2fBdG=1$Zcd;6n2uJI<hN*^5k-\jK7#i8A0'fGm;f3XH:U%l9q35K?]UkO(f#q^Js!-`[;F1:4Q*!BQs\XEuCPP_p>qB^HDn7oPpUrTbAjoleXeO^_VD:Mq(05FH:Urdfke(XsP!A#J/lJ_p*fK%\CBYdh:2TJ+kLl]3#[gD*Z)RmN^9#.nFL3SGho'I,Y%3Q#.PDkh?"3E3as'Bog&,Ao\a#cIq"qb(kPGfg3Y]#4&;O)cNKYKddGq.%4M3T?B**u4gn@utAr2ZIGuIji\t9'amUt&4G'L`n#mh#1^3@&?dm6^[1L;j/FD4X3hiP3\=0C_>7'PMDT\"7"iDD#6T(,E_SKc>t%hJsUPic73218&Dr&n*Nkc&Y$%E['SrEs1TN7V+G]+qVJ[3WG8IO6h0&i4,@+:p+HDQap9L<4R5[i^Bls"c\OZ7Y0-26`.99;$06R%05,ID?LG';)P'te6+C4JGSkKK9(VhTR7\0kbDM"-Bm4ZL`[uVOWr8M!"#KB0"N#kj;s/KgQ!hOsHTFFPSt83X=j]G];TSg[09`it%^4K+L.F-+rep2*EZ?uGX(C0^,<h.1f=r>&;ZkW74gIC1P>Hctec$B)g2cIAdV;1@^q=l,<L)5;<(Q"f"@Bh__ff^1*C]ts%=#qa2%S=urd(nfE?8l<I8?d2NSL_9o2":;:FL<ioPo==qfiq-_@QSo09+(a@s20"nr(no=J!NHoi\p/L+\:,0>mV3TJl`aV(k4tG`(n=OT%_bSF&3:-D#rqg^$ms(K&JDntc(03Z7h]e``'2F/<kHqnoouL'>&CAGC:P)&"djF<`.0B]cnDLR3#+emjZ^n.6h;8NjM3`33S/@;H%=T2Qj)i`RcS'%fL&.*5NZciE(nRfZ5M@1/e,q+.Z=H!4u#M%"K=jZoB[Ku\!*V?4G+ebI6rihHf(nkqbYm^YJ0oFnV;@qs$^MSH/%L.OD*1CeO6TtX.kBjbR2]+^Rq"6dO$hnUV_/KPMfH4StB;D'WBB/ZJ[KUh6>_9er0%r0l(3mf=,9(YCW/SJH2NIXor13-ZAJ'5FL%j\!V._G$R-%1+/-TmbT1`CVc-9t<BBcT*^)@ChQ8W`r;c149.+7LXFU!,<Ra!Eg+mEYk80dm.lXY[i,B6cCgKQAIeb+/cGm$;C*N%RZ^erQ0?[`?8-MH!uc(Z0[V77cDl\n&q08+FmgJJ=3I)JI:u"j@)_,6XH4;8Pii.iQEp+0)H,]KG#C-BVhHZqb4D#Ejn[+CY(AcX%#aM;l8A?rKm(A+l`Cfc:+i0WI(^(X">qjYR6;I00TFuZte5GB'n-Fm;4Es'R_CcnA;%@1VAW8Cg-Qp_*R4ou`!&:$L83Wu"49VN,%++S,a66,mSnB56'iQF)F:@af=p.oXERo.Hsnc;XPV;kI:&&?/f9X\j"25ErYQHp!8Jm:[_Aak(D=!#MUS8+0+@](:hOE?hmQ@n8Y%Dk;UEF(,fPq\lkG<4DIH;!T7s0Sh20pP0;m,2t_W).]<LIsgoj,XKu>V<Q-jnpJfIOY^!_5!72mkEqAR-TRtTSEMarb4LO`[<V%)%n((A1q,Y^0X<&5o1DVL^)dkDJPGp`%Uo^$kW_O9Y;l\/+_+OB7+g[PfEUikH2k]Zf#VsqcC\&ndZjTB0Sc/C:__#V6,N\c`AF5d*%'a1o@lP"OJ`m$Gnm%KJ_WHoGs3AaL8BN(p0\LM)%CQ":(Fb&2S;4"clW1U@0#4,TefOU3>6cYE6&0W:TbS[BlTe8."L2T-)-T9Z$%NG_m1&[>+AbZd!jo(F0uF0'uu@Tp#F*2%,r(mGZ)#6B!*@9Ms"=4<4+K(A4MF&^N@%Ln`#MHt*4E<8,f34p`?qDZh;@T_p\jop#o%-6c#Z4O?V&E7HJA0!:]f>8-BEe8NoDKs(6Hl*+E6$.`i!:_KrPIQB_-#-#&Mr%5.)"5(j7aNr\amjo;Uhe0K/E:#!'Z<5^<J!kR7%fd7OZh@J4N&R'=BJ;'<>nB6J9N/$F1E8jpY<tpuZPtR\[".\&X9MgoE7b;8be1`S(_BO/'dm`Fo.5*Fq1>i1tm,i<LS-4nFcU?c2%Gu>pTP-aJ/^gaR%##_p$Z=h'%b^Q4V7];/YFaY#j2ML,s[SbeF,SE:geKFdSr_]8C*9@r](bjP';#KSY]ldZ9keg8)9aorE8b0H0%(#,Yq_]lp$#,6J8@-a];H39Q?6*VW.J#E\YC.q=rUd6a?b/#1](6T5GjL)Ds9k0jSBUdU33cNSGN5<A@@!RGb]Z]++nMI&9:OHEb%3/r-M!3ME!"CD;Z+\nq%B[::&]2:2K_ZE<N1*Pk<^AJqc.L0Ra/7CEpmALJAma;2Zc0\526ujrI/WVd/&&R#`Br]%fP$`+='W[C*%lAEEcY],,UONR+H[^!r9%E1nC,+_qiV#+:m#``pJSlMnPrG<,Rr?%]H#0aJ,2OH!o48u6nS-E9j3[Wsn9]\_c]&X8&ZqGWV5s%t3%gcmOliKVu7KI$MDJJ7!s6%+\3Z,\i:!0MT-X,@&oo$.r%&g1p9o![_m:$!Lmn_M*FbSZiMdI+4/T%O7Pnd7p?+jb=[]G3/eKeEjV%HBBY-Yso4F!pdGeo6AdGASWTN77LJ\]^$0IjFnK"#hTCu\_p:g&R$1b,$=!seLE5%)'loZ9AZOdUcP;7:UOb\E@FmZi?:E35p]*$%R(I\kTKGPTk']L@Oef#'VID0r0P-?+9"*QQj^;ugq\QYk^_!1doZ?F*).X*d+F+2?kl]J7J!Z6!pmRkulN3.^";p,NDjg(I`"0@F%OGfZ"+;^S=*n^Ous/kh%)8K5o+l7FLp%if_r\$Fk0[be0oDTTggl.:]'(Z6>pX>C5XS5M-Mm-hL8.A:_`:Q7[R4ch-nAj0r%uB+G%O5FlA"!Y1[6:[ZN8*$2,kGl!k?fMV-,W?`\#MG5@A]YXSmFsmS)!Pf3q+38uHi^I>.tV'5V&t6Hk=>\*Bdcc/Th3M1W@,MV'@b:"%5._#4hm6(p#5pRR@gC3m0^+t?SB@:tElcbB.E!:3cp!&I_Z%"Xo/nZ-V)ha<Bb=lp<mj2+*CccOe\d6-c3pSSHsqU!NG\gM_rRNF%D&&AW^URNEegGgF*JQ>a1Y=/WBTk!/p5si&\_Z8!@rm_@/fcJG7'MOh"flk)Xl3u(1N3JXqAffp:1&k-UH`pN_'^&3nSU*\L"ueA%F_;?Pas'kjL6r7*LZMT_f29[B13/2*b?7VH%ZeSiQ([1C*U6k88HPHJ5(K+jU#MMY&6oLp-"u%.^DZ%@?MURO>tbal/?;-Y?h'&Z%)&o:TKRSb#?Ek-&@b'<Wp7![E#B[ZN'/mN$FR>P=M"7VqU4ai_*)"<8r<0N&?;V6k.L'9GgTp*bjqg5/%R#dS\`P>Gp*F*Jh"fHH%r$B5Sl<<5I*$E1a/5:oE5cCSP7STE6gTEjr7]=BHhp%gc@6iG`kN+I)J5(O9*0LSi#"YHqs)`c_ZIbbX7EGB<62AJu4O-di!)__\%^tlsL\Z0(:Q`G((ol5`=,Ukr8E09<E\[GK0aQD([H!Z0_c/*lZj7m$m[`G@!)Dh4TLOojdSE2On@pK9MMe/06l/R.DJRDc`A2,>E%%O<tf>Kc\4&l2M*.;P(AR^]Y><nX+76/ibqof'O2eh5R^Jq/01J_;;aHA()B0n\iJif?aN"`?f"QhY=aW<PmoHgP#Ii0A,0KARGk%*Yr+E/MJ<C`S\#I`rNNd@k2l?Nr%(?@u%>Wo$kbjK2eQLON4pM"?TIK<9TKB0i24'N0RCd,K+M$H*'I=AJ^](JRS6I!>qL!d/ej$%WooRBha[p33]c"s1SVo_f/o#aVW'YP7?qWg!SK2<qIG*fLWmp-%*B7>Tf.$"`31Y4btZU@7^8I($!phhr2TqlerACr%nD$gK9>[\%J:oc;^4laiL-`B)`oii)NoY4gZ+#F>\;7Y:4h//WDKu5%5f7^`+D="*+rBME:&H*@q'f.%UM680$[r2N9PP"fGIu\.C]iXVY!k2L%k%i(78b'8)#*&#-6+oBH.`1I(fM9%biiKb5mj4f+;!1J+DosI5hqt$BB-S,%n)0SB@a>Wpb#sMnmMd?ucs4kk=L7XaI`#WVKSa-C%lhsbG*sAI`>)5`qLeO\2;3T2B7@s8YUj3#iq!4g!g;>K#/V@rXR2,nH`QrIuP)9h3't0D30F3#J(E;Nh+Qg$)"0>*75MF_(;M\6X%!7GO]K<Dbo_jmI_ii''f4$lZ5\%.No(RkXV:c[luK4u,Dl.%Wc-UF;c3*f9-16(C-!f'%#(Brl*jO7M&/5A"2l_T7gd^?)8P;A22%KEj-q)Be<p9?)W(jkM,?4s@'B:sG`!m.+\tr%tHRSjc;c@aN>t=_d(p,dS:'=Img%Z:5,MXi<UHjVHLJ9k+<q.mc\]J&+o*BHr4s%/5*Yk*;X.>q'e##!?^Nh@/0Qf1l!qRXXMr,_A[J@DC,p-(,W<$o2so1?>SOKVKg[ds7"B2kATCmH(?E(OF@nYF:b?6=D+Ba^Db*N%_\Fr\2Tg:U7V,(QFkNsLcb8W2_FBi\#hhk:)\Tr'VS9@<4u?q1/dU/_5r#,O"OK84k)b!jLMo%[(^DU2AS]`9i.k(ea=Dq9mV\<\%EhcuJgJM#_`#OFB8ko\_(iW@.0W5L%!JGK^nOA%2E*\XmfLme$Lmj#?ak"p?%LVg)^5/!sI0F;cL]N5VhR^]#SHRsW"(`c#**S.i%m:MVg#Im@@RF.\TQY#]@N%BAoKX@4Hc^3bl;o9>.=0HN'f!aEhQmFba$ZF,6/pSE;+]8Zo.W/RF0Hg/Y\khFn?Q,tuim&+:&GTg#%EB,-A;N7?I5j7++N,J\tGoA>sLdP:=@))rQ96NgXY.;/UZOPpUl>H#20qi*Qj>eEjdGI/GHm(BIOt8nVfa2OC:aJW#G7b2Cqk/*7%g6ZXa&0?BM!G"!UR?qE,RR#fA!`GVJgDD-#C`'^oltse:!JpQ'14+8!K,a"-?]kXMQ=TeS7PUV%%Ei$C[%[\.TP5%J"`W[lnlc>4%Y3-KfmXg6PouE"9ZpRibCs^8Qn+0cR`s=70nVLU6kY<8=6V7]%=OR"V&@>N5Ar"/XK1YjQ&ZcU\#tRuii+1U3GU?nd(:3opK_deP%`]u@L1\m'[VjgsL.D%omTp\kg3((^U.g@j9VgCJoj-J^_a?qLUFlOA[1H(-ddY-\=*_*)"EhiN0f!W8>'S`ImIIDnP^"[hX=WGgY%IAe,L,t']t#hBtdj"fd%Y07DE?"O1@Xk=aWA<9JigAHQ/;:)asAHSVQJdQl)<#6%90NtafFVhlH#B6/.#=*..g'%,L'dU3]j$u7W%,lcQb3Qf2(D(6,>57qoHh@.OWYtNXA:<e?FO4Mi$5O-$Oj8*5696K0XAJaLPKfec(jeYHPh@-@c07pbHnVOo^dfM&:m[MfO1lgFi%EhqjISu9`".<WOXa5,Y$m(WW^[NbV;G_H#"A90Ue7D7XI^Z.U_9b,Zng"m5r"[59@^RIN7BUL!b!Fl$iI+3>SqsVlkc,2:6GNc3,%V`"Jp+:TkZs':/0s"8n<.E3_lo>in#@<^O?.@!uCaCh7f.CaNL(!HS<5hg%T"ngcDfG*9gAGYsWqsOm@Zo=6afW,0H1RS(6=%fh7%RL*knBOR[(h:V;\^5J)bmfGJU%tNu;b,q=pB(>%36$M4[h3pZL\F1V$IZAq(ab4jV*)5ET/[f8P_;W+dTXsRl.CI=REe*dNU>`i(%Qe/X@W>ng?Re<6-GG0H&I<T.hiu11On3tZI[7p_0o2%_<D9H\-@I%9Rge'PYCsIsHfos;3X)=CX*!3D.WLR`NUUCI(<sRrk)mtA`%*;&nb$q)i8n1\QE0J!:<JohC]k)9>?0r(hp`*"lo'YK)AJW7R7;=InBShX9++O+S6`XG+)P97dQJD00pbUC]V(HRTq1\_VfNM[)$%MEFHaX;M#'rU7^o]bkV+N!QsK@g6e7ck=%^:4cpKN1Z^DL]6GRHif0i4dt01"X$g1*j7esH!Fu<IAJV2D,Z6BL_1PLmJoVLpsRpF%D4k)E,Gm"D5\u7dE6DYJ!ULE8LU3hR)<J/$5>W:`(*0%k:_,6<D`<.D8MIMs@,C#t=P1#5S%Z6KgC+Gd6(=&aJ547&N_jDqK<]^)%I@gZ&_LpFOlpkG"(!=`8=8X3gg54SeVB$chC5L,DZSt%"'SYAX:=L[#[3gtW[:KpsL+,Bb`9dAGH`.[Noopf0p5-a-c8<%3jb7KS%ld1Z]#ulW;MS[a.f&mjH$Z;&@H]+M&Rj#4]?Lptc/O1<13/%C4IG:T^#uYP?";cO:SL]m?-*9W6;.1^hKO:nM+q!EgL<Q181K=+O%^GHAhn;u6[Hgbt/,_P]FJIA6a01qZSVO>:sD"NAY'0r<(Pc`)5MLa"[ajr&b(FKGmf+G$G3X75Y@$*tD\)s$-?Fta[)$,Amq4gN5%n4#Dta,Nt@PsrXJ+q:2^c`N)g&iMg\JQ5cPJR<l+;jj'k8?Ne'aa>H+!^-h!h$et-f8:eA*ceeT$Q'l^:d$_([(9S$b]W'nlR/8&%N+(3,e;E3"Q>@NnUdU/tno:kZ,1n3?"s;K&$=]upLI5?7@-Omao`0ZKp+!57;qS@GC0sDM\8VrMblm=2<PVLtpB=%tG>$3p#%@i3%@qek%3%VNseM\O_?3ei9d&:ee-h:^@C=!=7\okG+NBW<TNr&#oo7DQC&L[>eAH/,)iXCBNVXTKb]*a:_L'%l'Hl^JU61U.$XYS%E%Y-q2s6hXOUWI`-77s@b-%9j4>)8fMb_G@jfUYP(#f65ZqK9plXB(k)k-3i\?aR#W<hb`lY&)Dps!Nqu>GeDgDao/l\!0&ij5bCK,%o^YEB$t#!0U>+GA@nh1i`gSmPlW=f@o^714-62Y\"EVu7T/+sMWH;Q?+T/R8R]>J4jX1n13>@cI!,W?=D*HM1X'nSEj2Qrnh=;;#%eC0$b0`hlF<d,3C=H%EZl%n(.T0/&P4KJHf*=cbFgLi'W!XJW[99p(Z\c>@7\Vpk>P9PYsn18u-?l"K/iFaO\FBme(%'cJGV:dC^%H^*ja^%U.a'YZUnDd=/P@dHJ2jG;Aeq<5U4hq6T`Z[CPSA<b0n3]%,'&R<:1!bcT6MJa!oHe9I6l0X]71=!5XFu8m+6#m6Ri7+)P%1Y*/3=?,6nX@PFSe$1n?af'$=gi\j&fC5^j6Ms^VW?!Zu.KPd6Sb4PX`s"0XHS?OgRYlAiMq<+(:O[dQqr@!E'X_0>%>5NhqlfJA%6%)*1S%0gR8LH(bR[58HCH"+LCE&@a<IQtoIV"g81RYeHZC<1g<?^bE?Q!$"G"c[5lDks;Dp\<aSA4a5=ZLusl1;C@PZZgXU@0S0%k#9$CqYV^R(Gu`^2;hR1cL0J9-,9>ok9!sBpTK?Z?<j#V\b#*5+$G#MbP+3rm,=:D++<h=59HK3p\EuZI/VpR&-#CS3WJ<dLL5K.%`Kq+]^\[_`rrGGNZ/Tuq]^WNLci,R5i#Wj~>%AI9_PrivateDataEnd